
zephyr.elf:     file format elf32-littlearm


Disassembly of section rom_start:

00000000 <_vector_start>:
	forced_pm_state = state;
#endif
}

enum power_states _sys_suspend(int32_t ticks)
{
   0:	20000fe0 	.word	0x20000fe0
	bool deep_sleep;
#if CONFIG_DEVICE_POWER_MANAGEMENT
	bool low_power = false;
#endif

	pm_state = (forced_pm_state == SYS_POWER_STATE_AUTO) ?
   4:	000022f1 	.word	0x000022f1
		   sys_pm_policy_next_state(ticks) : forced_pm_state;
   8:	0000587b 	.word	0x0000587b
   c:	00002321 	.word	0x00002321
  10:	00002321 	.word	0x00002321

	if (pm_state == SYS_POWER_STATE_ACTIVE) {
  14:	00002321 	.word	0x00002321
  18:	00002321 	.word	0x00002321
	...
#endif
	}

	/* Enter power state */
	sys_pm_debug_start_timer();
	sys_set_power_state(pm_state);
  2c:	0000224d 	.word	0x0000224d
		sys_pm_resume_devices();
	}
#endif
	sys_pm_log_debug_info(pm_state);

	if (!post_ops_done) {
  30:	00002321 	.word	0x00002321
		post_ops_done = 1;
		/* clear forced_pm_state */
		forced_pm_state = SYS_POWER_STATE_AUTO;
		sys_pm_notify_power_state_exit(pm_state);
  34:	00000000 	.word	0x00000000
		post_ops_done = 1;
  38:	000021f9 	.word	0x000021f9
		forced_pm_state = SYS_POWER_STATE_AUTO;
  3c:	00005859 	.word	0x00005859

00000040 <_irq_vector_table>:
		sys_pm_notify_power_state_exit(pm_state);
  40:	000022b1 000022b1 000022b1 000022b1     ."..."..."..."..
		_sys_pm_power_state_exit_post_ops(pm_state);
	}

	return pm_state;
}
  50:	000022b1 000022b1 000022b1 000022b1     ."..."..."..."..
  60:	000022b1 000022b1 000022b1 000022b1     ."..."..."..."..
  70:	000022b1 000022b1 000022b1 000022b1     ."..."..."..."..
  80:	000022b1 000022b1 000022b1 000022b1     ."..."..."..."..
  90:	000022b1 000022b1 000022b1 000022b1     ."..."..."..."..
  a0:	000022b1 000022b1 000022b1 000022b1     ."..."..."..."..
  b0:	000022b1 000022b1 000022b1 000022b1     ."..."..."..."..
  c0:	000022b1 000022b1 000022b1 000022b1     ."..."..."..."..
  d0:	000022b1 000022b1 000022b1              ."..."..."..

Disassembly of section text:

000000dc <__aeabi_uldivmod>:
      dc:	b953      	cbnz	r3, f4 <__aeabi_uldivmod+0x18>
      de:	b94a      	cbnz	r2, f4 <__aeabi_uldivmod+0x18>
      e0:	2900      	cmp	r1, #0
      e2:	bf08      	it	eq
      e4:	2800      	cmpeq	r0, #0
      e6:	bf1c      	itt	ne
      e8:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
      ec:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
      f0:	f000 b96c 	b.w	3cc <__aeabi_idiv0>
      f4:	f1ad 0c08 	sub.w	ip, sp, #8
      f8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
      fc:	f000 f806 	bl	10c <__udivmoddi4>
     100:	f8dd e004 	ldr.w	lr, [sp, #4]
     104:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
     108:	b004      	add	sp, #16
     10a:	4770      	bx	lr

0000010c <__udivmoddi4>:
     10c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
     110:	9e08      	ldr	r6, [sp, #32]
     112:	460d      	mov	r5, r1
     114:	4604      	mov	r4, r0
     116:	468e      	mov	lr, r1
     118:	2b00      	cmp	r3, #0
     11a:	f040 8082 	bne.w	222 <CONFIG_FLASH_SIZE+0x22>
     11e:	428a      	cmp	r2, r1
     120:	4617      	mov	r7, r2
     122:	d946      	bls.n	1b2 <CONFIG_NRF52_ANOMALY_132_DELAY_US+0x68>
     124:	fab2 f282 	clz	r2, r2
     128:	b14a      	cbz	r2, 13e <__udivmoddi4+0x32>
     12a:	f1c2 0120 	rsb	r1, r2, #32
     12e:	fa05 f302 	lsl.w	r3, r5, r2
     132:	fa20 f101 	lsr.w	r1, r0, r1
     136:	4097      	lsls	r7, r2
     138:	ea41 0e03 	orr.w	lr, r1, r3
     13c:	4094      	lsls	r4, r2
     13e:	ea4f 4817 	mov.w	r8, r7, lsr #16
     142:	0c23      	lsrs	r3, r4, #16
     144:	fbbe fcf8 	udiv	ip, lr, r8
     148:	b2b9      	uxth	r1, r7
     14a:	fb08 ee1c 	mls	lr, r8, ip, lr
     14e:	ea43 430e 	orr.w	r3, r3, lr, lsl #16
     152:	fb0c f001 	mul.w	r0, ip, r1
     156:	4298      	cmp	r0, r3
     158:	d90a      	bls.n	170 <CONFIG_NRF52_ANOMALY_132_DELAY_US+0x26>
     15a:	18fb      	adds	r3, r7, r3
     15c:	f10c 35ff 	add.w	r5, ip, #4294967295	; 0xffffffff
     160:	f080 8116 	bcs.w	390 <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0x90>
     164:	4298      	cmp	r0, r3
     166:	f240 8113 	bls.w	390 <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0x90>
     16a:	f1ac 0c02 	sub.w	ip, ip, #2
     16e:	443b      	add	r3, r7
     170:	1a1b      	subs	r3, r3, r0
     172:	b2a4      	uxth	r4, r4
     174:	fbb3 f0f8 	udiv	r0, r3, r8
     178:	fb08 3310 	mls	r3, r8, r0, r3
     17c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
     180:	fb00 f101 	mul.w	r1, r0, r1
     184:	42a1      	cmp	r1, r4
     186:	d909      	bls.n	19c <CONFIG_NRF52_ANOMALY_132_DELAY_US+0x52>
     188:	193c      	adds	r4, r7, r4
     18a:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
     18e:	f080 8101 	bcs.w	394 <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0x94>
     192:	42a1      	cmp	r1, r4
     194:	f240 80fe 	bls.w	394 <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0x94>
     198:	3802      	subs	r0, #2
     19a:	443c      	add	r4, r7
     19c:	1a64      	subs	r4, r4, r1
     19e:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
     1a2:	2100      	movs	r1, #0
     1a4:	b11e      	cbz	r6, 1ae <CONFIG_NRF52_ANOMALY_132_DELAY_US+0x64>
     1a6:	40d4      	lsrs	r4, r2
     1a8:	2300      	movs	r3, #0
     1aa:	e9c6 4300 	strd	r4, r3, [r6]
     1ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
     1b2:	b902      	cbnz	r2, 1b6 <CONFIG_NRF52_ANOMALY_132_DELAY_US+0x6c>
     1b4:	deff      	udf	#255	; 0xff
     1b6:	fab2 f282 	clz	r2, r2
     1ba:	2a00      	cmp	r2, #0
     1bc:	d14f      	bne.n	25e <CONFIG_FLASH_SIZE+0x5e>
     1be:	1bcb      	subs	r3, r1, r7
     1c0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
     1c4:	fa1f f887 	uxth.w	r8, r7
     1c8:	2101      	movs	r1, #1
     1ca:	fbb3 fcfe 	udiv	ip, r3, lr
     1ce:	0c25      	lsrs	r5, r4, #16
     1d0:	fb0e 331c 	mls	r3, lr, ip, r3
     1d4:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
     1d8:	fb08 f30c 	mul.w	r3, r8, ip
     1dc:	42ab      	cmp	r3, r5
     1de:	d907      	bls.n	1f0 <CONFIG_NRF52_ANOMALY_132_DELAY_US+0xa6>
     1e0:	197d      	adds	r5, r7, r5
     1e2:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
     1e6:	d202      	bcs.n	1ee <CONFIG_NRF52_ANOMALY_132_DELAY_US+0xa4>
     1e8:	42ab      	cmp	r3, r5
     1ea:	f200 80e7 	bhi.w	3bc <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0xbc>
     1ee:	4684      	mov	ip, r0
     1f0:	1aed      	subs	r5, r5, r3
     1f2:	b2a3      	uxth	r3, r4
     1f4:	fbb5 f0fe 	udiv	r0, r5, lr
     1f8:	fb0e 5510 	mls	r5, lr, r0, r5
     1fc:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
     200:	fb08 f800 	mul.w	r8, r8, r0
     204:	45a0      	cmp	r8, r4
     206:	d907      	bls.n	218 <CONFIG_FLASH_SIZE+0x18>
     208:	193c      	adds	r4, r7, r4
     20a:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
     20e:	d202      	bcs.n	216 <CONFIG_FLASH_SIZE+0x16>
     210:	45a0      	cmp	r8, r4
     212:	f200 80d7 	bhi.w	3c4 <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0xc4>
     216:	4618      	mov	r0, r3
     218:	eba4 0408 	sub.w	r4, r4, r8
     21c:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
     220:	e7c0      	b.n	1a4 <CONFIG_NRF52_ANOMALY_132_DELAY_US+0x5a>
     222:	428b      	cmp	r3, r1
     224:	d908      	bls.n	238 <CONFIG_FLASH_SIZE+0x38>
     226:	2e00      	cmp	r6, #0
     228:	f000 80af 	beq.w	38a <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0x8a>
     22c:	2100      	movs	r1, #0
     22e:	e9c6 0500 	strd	r0, r5, [r6]
     232:	4608      	mov	r0, r1
     234:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
     238:	fab3 f183 	clz	r1, r3
     23c:	2900      	cmp	r1, #0
     23e:	d14b      	bne.n	2d8 <CONFIG_FLASH_SIZE+0xd8>
     240:	42ab      	cmp	r3, r5
     242:	d302      	bcc.n	24a <CONFIG_FLASH_SIZE+0x4a>
     244:	4282      	cmp	r2, r0
     246:	f200 80b7 	bhi.w	3b8 <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0xb8>
     24a:	1a84      	subs	r4, r0, r2
     24c:	eb65 0303 	sbc.w	r3, r5, r3
     250:	2001      	movs	r0, #1
     252:	469e      	mov	lr, r3
     254:	2e00      	cmp	r6, #0
     256:	d0aa      	beq.n	1ae <CONFIG_NRF52_ANOMALY_132_DELAY_US+0x64>
     258:	e9c6 4e00 	strd	r4, lr, [r6]
     25c:	e7a7      	b.n	1ae <CONFIG_NRF52_ANOMALY_132_DELAY_US+0x64>
     25e:	f1c2 0c20 	rsb	ip, r2, #32
     262:	fa01 f302 	lsl.w	r3, r1, r2
     266:	4097      	lsls	r7, r2
     268:	fa20 f00c 	lsr.w	r0, r0, ip
     26c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
     270:	fa21 fc0c 	lsr.w	ip, r1, ip
     274:	4318      	orrs	r0, r3
     276:	fbbc f1fe 	udiv	r1, ip, lr
     27a:	0c05      	lsrs	r5, r0, #16
     27c:	fb0e cc11 	mls	ip, lr, r1, ip
     280:	fa1f f887 	uxth.w	r8, r7
     284:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
     288:	fb01 f308 	mul.w	r3, r1, r8
     28c:	42ab      	cmp	r3, r5
     28e:	fa04 f402 	lsl.w	r4, r4, r2
     292:	d909      	bls.n	2a8 <CONFIG_FLASH_SIZE+0xa8>
     294:	197d      	adds	r5, r7, r5
     296:	f101 3cff 	add.w	ip, r1, #4294967295	; 0xffffffff
     29a:	f080 808b 	bcs.w	3b4 <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0xb4>
     29e:	42ab      	cmp	r3, r5
     2a0:	f240 8088 	bls.w	3b4 <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0xb4>
     2a4:	3902      	subs	r1, #2
     2a6:	443d      	add	r5, r7
     2a8:	1aeb      	subs	r3, r5, r3
     2aa:	b285      	uxth	r5, r0
     2ac:	fbb3 f0fe 	udiv	r0, r3, lr
     2b0:	fb0e 3310 	mls	r3, lr, r0, r3
     2b4:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
     2b8:	fb00 f308 	mul.w	r3, r0, r8
     2bc:	42ab      	cmp	r3, r5
     2be:	d907      	bls.n	2d0 <CONFIG_FLASH_SIZE+0xd0>
     2c0:	197d      	adds	r5, r7, r5
     2c2:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
     2c6:	d271      	bcs.n	3ac <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0xac>
     2c8:	42ab      	cmp	r3, r5
     2ca:	d96f      	bls.n	3ac <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0xac>
     2cc:	3802      	subs	r0, #2
     2ce:	443d      	add	r5, r7
     2d0:	1aeb      	subs	r3, r5, r3
     2d2:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
     2d6:	e778      	b.n	1ca <CONFIG_NRF52_ANOMALY_132_DELAY_US+0x80>
     2d8:	f1c1 0c20 	rsb	ip, r1, #32
     2dc:	408b      	lsls	r3, r1
     2de:	fa22 f70c 	lsr.w	r7, r2, ip
     2e2:	431f      	orrs	r7, r3
     2e4:	fa20 f40c 	lsr.w	r4, r0, ip
     2e8:	fa05 f301 	lsl.w	r3, r5, r1
     2ec:	ea4f 4e17 	mov.w	lr, r7, lsr #16
     2f0:	fa25 f50c 	lsr.w	r5, r5, ip
     2f4:	431c      	orrs	r4, r3
     2f6:	0c23      	lsrs	r3, r4, #16
     2f8:	fbb5 f9fe 	udiv	r9, r5, lr
     2fc:	fa1f f887 	uxth.w	r8, r7
     300:	fb0e 5519 	mls	r5, lr, r9, r5
     304:	ea43 4505 	orr.w	r5, r3, r5, lsl #16
     308:	fb09 fa08 	mul.w	sl, r9, r8
     30c:	45aa      	cmp	sl, r5
     30e:	fa02 f201 	lsl.w	r2, r2, r1
     312:	fa00 f301 	lsl.w	r3, r0, r1
     316:	d908      	bls.n	32a <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0x2a>
     318:	197d      	adds	r5, r7, r5
     31a:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
     31e:	d247      	bcs.n	3b0 <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0xb0>
     320:	45aa      	cmp	sl, r5
     322:	d945      	bls.n	3b0 <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0xb0>
     324:	f1a9 0902 	sub.w	r9, r9, #2
     328:	443d      	add	r5, r7
     32a:	eba5 050a 	sub.w	r5, r5, sl
     32e:	b2a4      	uxth	r4, r4
     330:	fbb5 f0fe 	udiv	r0, r5, lr
     334:	fb0e 5510 	mls	r5, lr, r0, r5
     338:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
     33c:	fb00 f808 	mul.w	r8, r0, r8
     340:	45a0      	cmp	r8, r4
     342:	d907      	bls.n	354 <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0x54>
     344:	193c      	adds	r4, r7, r4
     346:	f100 35ff 	add.w	r5, r0, #4294967295	; 0xffffffff
     34a:	d22d      	bcs.n	3a8 <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0xa8>
     34c:	45a0      	cmp	r8, r4
     34e:	d92b      	bls.n	3a8 <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0xa8>
     350:	3802      	subs	r0, #2
     352:	443c      	add	r4, r7
     354:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
     358:	eba4 0408 	sub.w	r4, r4, r8
     35c:	fba0 8902 	umull	r8, r9, r0, r2
     360:	454c      	cmp	r4, r9
     362:	46c6      	mov	lr, r8
     364:	464d      	mov	r5, r9
     366:	d319      	bcc.n	39c <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0x9c>
     368:	d016      	beq.n	398 <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0x98>
     36a:	b15e      	cbz	r6, 384 <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0x84>
     36c:	ebb3 020e 	subs.w	r2, r3, lr
     370:	eb64 0405 	sbc.w	r4, r4, r5
     374:	fa04 fc0c 	lsl.w	ip, r4, ip
     378:	40ca      	lsrs	r2, r1
     37a:	ea4c 0202 	orr.w	r2, ip, r2
     37e:	40cc      	lsrs	r4, r1
     380:	e9c6 2400 	strd	r2, r4, [r6]
     384:	2100      	movs	r1, #0
     386:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
     38a:	4631      	mov	r1, r6
     38c:	4630      	mov	r0, r6
     38e:	e70e      	b.n	1ae <CONFIG_NRF52_ANOMALY_132_DELAY_US+0x64>
     390:	46ac      	mov	ip, r5
     392:	e6ed      	b.n	170 <CONFIG_NRF52_ANOMALY_132_DELAY_US+0x26>
     394:	4618      	mov	r0, r3
     396:	e701      	b.n	19c <CONFIG_NRF52_ANOMALY_132_DELAY_US+0x52>
     398:	4543      	cmp	r3, r8
     39a:	d2e6      	bcs.n	36a <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0x6a>
     39c:	ebb8 0e02 	subs.w	lr, r8, r2
     3a0:	eb69 0507 	sbc.w	r5, r9, r7
     3a4:	3801      	subs	r0, #1
     3a6:	e7e0      	b.n	36a <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0x6a>
     3a8:	4628      	mov	r0, r5
     3aa:	e7d3      	b.n	354 <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0x54>
     3ac:	4660      	mov	r0, ip
     3ae:	e78f      	b.n	2d0 <CONFIG_FLASH_SIZE+0xd0>
     3b0:	4681      	mov	r9, r0
     3b2:	e7ba      	b.n	32a <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0x2a>
     3b4:	4661      	mov	r1, ip
     3b6:	e777      	b.n	2a8 <CONFIG_FLASH_SIZE+0xa8>
     3b8:	4608      	mov	r0, r1
     3ba:	e74b      	b.n	254 <CONFIG_FLASH_SIZE+0x54>
     3bc:	f1ac 0c02 	sub.w	ip, ip, #2
     3c0:	443d      	add	r5, r7
     3c2:	e715      	b.n	1f0 <CONFIG_NRF52_ANOMALY_132_DELAY_US+0xa6>
     3c4:	3802      	subs	r0, #2
     3c6:	443c      	add	r4, r7
     3c8:	e726      	b.n	218 <CONFIG_FLASH_SIZE+0x18>
     3ca:	bf00      	nop

000003cc <__aeabi_idiv0>:
     3cc:	4770      	bx	lr
     3ce:	bf00      	nop

000003d0 <pwm_pin_set_usec.constprop.0>:
 * @param flags Flags for pin configuration (polarity).
 *
 * @retval 0 If successful.
 * @retval Negative errno code if failure.
 */
static inline int pwm_pin_set_usec(const struct device *dev, uint32_t pwm,
     3d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
     3d4:	4606      	mov	r6, r0
     3d6:	b087      	sub	sp, #28
     3d8:	468a      	mov	sl, r1
     3da:	4617      	mov	r7, r2
	return api->get_cycles_per_sec(dev, pwm, cycles);
     3dc:	6883      	ldr	r3, [r0, #8]
     3de:	aa04      	add	r2, sp, #16
     3e0:	685b      	ldr	r3, [r3, #4]
     3e2:	4798      	blx	r3
				   uint32_t period, uint32_t pulse,
				   pwm_flags_t flags)
{
	uint64_t period_cycles, pulse_cycles, cycles_per_sec;

	if (pwm_get_cycles_per_sec(dev, pwm, &cycles_per_sec) != 0) {
     3e4:	9002      	str	r0, [sp, #8]
     3e6:	2800      	cmp	r0, #0
     3e8:	d135      	bne.n	456 <CONFIG_LOG_BUFFER_SIZE+0x56>
		return -EIO;
	}

	period_cycles = (period * cycles_per_sec) / USEC_PER_SEC;
     3ea:	e9dd 4304 	ldrd	r4, r3, [sp, #16]
     3ee:	9303      	str	r3, [sp, #12]
     3f0:	9a03      	ldr	r2, [sp, #12]
     3f2:	f644 6320 	movw	r3, #20000	; 0x4e20
     3f6:	fba4 8903 	umull	r8, r9, r4, r3
     3fa:	fb03 9902 	mla	r9, r3, r2, r9
     3fe:	4640      	mov	r0, r8
     400:	4a18      	ldr	r2, [pc, #96]	; (464 <CONFIG_LOG_BUFFER_SIZE+0x64>)
     402:	2300      	movs	r3, #0
     404:	4649      	mov	r1, r9
     406:	f7ff fe69 	bl	dc <__aeabi_uldivmod>
	if (period_cycles >= ((uint64_t)1 << 32)) {
     40a:	4b17      	ldr	r3, [pc, #92]	; (468 <CONFIG_LOG_BUFFER_SIZE+0x68>)
     40c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
     410:	454b      	cmp	r3, r9
     412:	bf08      	it	eq
     414:	4542      	cmpeq	r2, r8
	period_cycles = (period * cycles_per_sec) / USEC_PER_SEC;
     416:	4683      	mov	fp, r0
	if (period_cycles >= ((uint64_t)1 << 32)) {
     418:	d320      	bcc.n	45c <CONFIG_LOG_BUFFER_SIZE+0x5c>
		return -ENOTSUP;
	}

	pulse_cycles = (pulse * cycles_per_sec) / USEC_PER_SEC;
     41a:	9b03      	ldr	r3, [sp, #12]
     41c:	4a11      	ldr	r2, [pc, #68]	; (464 <CONFIG_LOG_BUFFER_SIZE+0x64>)
     41e:	fba7 4504 	umull	r4, r5, r7, r4
     422:	fb07 5503 	mla	r5, r7, r3, r5
     426:	4620      	mov	r0, r4
     428:	2300      	movs	r3, #0
     42a:	4629      	mov	r1, r5
     42c:	f7ff fe56 	bl	dc <__aeabi_uldivmod>
	if (pulse_cycles >= ((uint64_t)1 << 32)) {
     430:	4a0d      	ldr	r2, [pc, #52]	; (468 <CONFIG_LOG_BUFFER_SIZE+0x68>)
     432:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
     436:	42aa      	cmp	r2, r5
     438:	bf08      	it	eq
     43a:	42a1      	cmpeq	r1, r4
	pulse_cycles = (pulse * cycles_per_sec) / USEC_PER_SEC;
     43c:	4603      	mov	r3, r0
	if (pulse_cycles >= ((uint64_t)1 << 32)) {
     43e:	d30d      	bcc.n	45c <CONFIG_LOG_BUFFER_SIZE+0x5c>
	return api->pin_set(dev, pwm, period, pulse, flags);
     440:	68b2      	ldr	r2, [r6, #8]
     442:	9902      	ldr	r1, [sp, #8]
     444:	9100      	str	r1, [sp, #0]
     446:	6814      	ldr	r4, [r2, #0]
     448:	4651      	mov	r1, sl
     44a:	465a      	mov	r2, fp
     44c:	4630      	mov	r0, r6
     44e:	47a0      	blx	r4
		return -ENOTSUP;
	}

	return pwm_pin_set_cycles(dev, pwm, (uint32_t)period_cycles,
				  (uint32_t)pulse_cycles, flags);
}
     450:	b007      	add	sp, #28
     452:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		return -EIO;
     456:	f06f 0004 	mvn.w	r0, #4
     45a:	e7f9      	b.n	450 <CONFIG_LOG_BUFFER_SIZE+0x50>
		return -ENOTSUP;
     45c:	f06f 0022 	mvn.w	r0, #34	; 0x22
     460:	e7f6      	b.n	450 <CONFIG_LOG_BUFFER_SIZE+0x50>
     462:	bf00      	nop
     464:	000f4240 	.word	0x000f4240
     468:	000f423f 	.word	0x000f423f

0000046c <main>:
}

enum { RED, GREEN, BLUE };

void main(void)
{
     46c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	struct device const *pwm_dev[3];
	uint32_t pulse_red, pulse_green, pulse_blue; /* pulse widths */
	int ret;

	printk("PWM-based RGB LED control\n");
     470:	4827      	ldr	r0, [pc, #156]	; (510 <main+0xa4>)
     472:	f004 fc88 	bl	4d86 <printk>
	if (z_syscall_trap()) {
		return (const struct device *) arch_syscall_invoke1(*(uintptr_t *)&name, K_SYSCALL_DEVICE_GET_BINDING);
	}
#endif
	compiler_barrier();
	return z_impl_device_get_binding(name);
     476:	4827      	ldr	r0, [pc, #156]	; (514 <main+0xa8>)
     478:	f003 faec 	bl	3a54 <z_impl_device_get_binding>
     47c:	4681      	mov	r9, r0
     47e:	4825      	ldr	r0, [pc, #148]	; (514 <main+0xa8>)
     480:	f003 fae8 	bl	3a54 <z_impl_device_get_binding>
     484:	4680      	mov	r8, r0
     486:	4823      	ldr	r0, [pc, #140]	; (514 <main+0xa8>)
     488:	f003 fae4 	bl	3a54 <z_impl_device_get_binding>
     48c:	4607      	mov	r7, r0

	pwm_dev[RED] = device_get_binding(RED_LABEL);
	pwm_dev[GREEN] = device_get_binding(GREEN_LABEL);
	pwm_dev[BLUE] = device_get_binding(BLUE_LABEL);
	if (!pwm_dev[RED] || !pwm_dev[GREEN] || !pwm_dev[BLUE]) {
     48e:	f1b9 0f00 	cmp.w	r9, #0
     492:	d003      	beq.n	49c <main+0x30>
     494:	f1b8 0f00 	cmp.w	r8, #0
     498:	d000      	beq.n	49c <main+0x30>
     49a:	bb58      	cbnz	r0, 4f4 <main+0x88>
					k_sleep(K_SECONDS(1));
				}
			}
		}
	}
}
     49c:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
		printk("Error: cannot find one or more PWM devices\n");
     4a0:	481d      	ldr	r0, [pc, #116]	; (518 <main+0xac>)
     4a2:	f004 bc70 	b.w	4d86 <printk>
			for (pulse_green = 0U; pulse_green <= PERIOD_USEC;
     4a6:	4604      	mov	r4, r0
				for (pulse_blue = 0U; pulse_blue <= PERIOD_USEC;
     4a8:	f245 5af0 	movw	sl, #22000	; 0x55f0
	return pwm_pin_set_usec(pwm_dev, pwm_pin, PERIOD_USEC,
     4ac:	2118      	movs	r1, #24
     4ae:	4622      	mov	r2, r4
     4b0:	4640      	mov	r0, r8
     4b2:	f7ff ff8d 	bl	3d0 <pwm_pin_set_usec.constprop.0>
				if (ret != 0) {
     4b6:	4601      	mov	r1, r0
     4b8:	b108      	cbz	r0, 4be <main+0x52>
					printk("Error %d: "
     4ba:	4818      	ldr	r0, [pc, #96]	; (51c <main+0xb0>)
     4bc:	e024      	b.n	508 <main+0x9c>
				for (pulse_blue = 0U; pulse_blue <= PERIOD_USEC;
     4be:	4605      	mov	r5, r0
	return pwm_pin_set_usec(pwm_dev, pwm_pin, PERIOD_USEC,
     4c0:	2116      	movs	r1, #22
     4c2:	462a      	mov	r2, r5
     4c4:	4638      	mov	r0, r7
     4c6:	f7ff ff83 	bl	3d0 <pwm_pin_set_usec.constprop.0>
					if (ret != 0) {
     4ca:	4601      	mov	r1, r0
     4cc:	b108      	cbz	r0, 4d2 <main+0x66>
						printk("Error %d: "
     4ce:	4814      	ldr	r0, [pc, #80]	; (520 <main+0xb4>)
     4d0:	e01a      	b.n	508 <main+0x9c>
		parm0.val = timeout;
		return (int32_t) arch_syscall_invoke2(parm0.split.lo, parm0.split.hi, K_SYSCALL_K_SLEEP);
	}
#endif
	compiler_barrier();
	return z_impl_k_sleep(timeout);
     4d2:	f44f 4000 	mov.w	r0, #32768	; 0x8000
     4d6:	2100      	movs	r1, #0
				     pulse_blue += STEPSIZE_USEC) {
     4d8:	f505 65fa 	add.w	r5, r5, #2000	; 0x7d0
     4dc:	f004 f8ee 	bl	46bc <z_impl_k_sleep>
				for (pulse_blue = 0U; pulse_blue <= PERIOD_USEC;
     4e0:	4555      	cmp	r5, sl
     4e2:	d1ed      	bne.n	4c0 <main+0x54>
			     pulse_green += STEPSIZE_USEC) {
     4e4:	f504 64fa 	add.w	r4, r4, #2000	; 0x7d0
			for (pulse_green = 0U; pulse_green <= PERIOD_USEC;
     4e8:	42ac      	cmp	r4, r5
     4ea:	d1df      	bne.n	4ac <main+0x40>
		     pulse_red += STEPSIZE_USEC) {
     4ec:	f506 66fa 	add.w	r6, r6, #2000	; 0x7d0
		for (pulse_red = 0U; pulse_red <= PERIOD_USEC;
     4f0:	42a6      	cmp	r6, r4
     4f2:	d100      	bne.n	4f6 <main+0x8a>
     4f4:	2600      	movs	r6, #0
	return pwm_pin_set_usec(pwm_dev, pwm_pin, PERIOD_USEC,
     4f6:	2117      	movs	r1, #23
     4f8:	4632      	mov	r2, r6
     4fa:	4648      	mov	r0, r9
     4fc:	f7ff ff68 	bl	3d0 <pwm_pin_set_usec.constprop.0>
			if (ret != 0) {
     500:	4601      	mov	r1, r0
     502:	2800      	cmp	r0, #0
     504:	d0cf      	beq.n	4a6 <main+0x3a>
				printk("Error %d: "
     506:	4807      	ldr	r0, [pc, #28]	; (524 <main+0xb8>)
}
     508:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
						printk("Error %d: "
     50c:	f004 bc3b 	b.w	4d86 <printk>
     510:	00006220 	.word	0x00006220
     514:	0000623b 	.word	0x0000623b
     518:	00006241 	.word	0x00006241
     51c:	00006289 	.word	0x00006289
     520:	000062a7 	.word	0x000062a7
     524:	0000626d 	.word	0x0000626d

00000528 <char_out>:

static int char_out(int c, void *ctx_p)
{
	struct out_context *ctx = ctx_p;

	ctx->count++;
     528:	680b      	ldr	r3, [r1, #0]
     52a:	3301      	adds	r3, #1
     52c:	600b      	str	r3, [r1, #0]
	return _char_out(c);
     52e:	4b01      	ldr	r3, [pc, #4]	; (534 <char_out+0xc>)
     530:	681b      	ldr	r3, [r3, #0]
     532:	4718      	bx	r3
     534:	20000000 	.word	0x20000000

00000538 <__printk_hook_install>:
	_char_out = fn;
     538:	4b01      	ldr	r3, [pc, #4]	; (540 <__printk_hook_install+0x8>)
     53a:	6018      	str	r0, [r3, #0]
}
     53c:	4770      	bx	lr
     53e:	bf00      	nop
     540:	20000000 	.word	0x20000000

00000544 <vprintk>:
#endif
	}
}
#else
void vprintk(const char *fmt, va_list ap)
{
     544:	b507      	push	{r0, r1, r2, lr}
     546:	460b      	mov	r3, r1
	struct out_context ctx = { 0 };
     548:	2100      	movs	r1, #0
{
     54a:	4602      	mov	r2, r0
	struct out_context ctx = { 0 };
     54c:	9101      	str	r1, [sp, #4]
#ifdef CONFIG_PRINTK_SYNC
	k_spinlock_key_t key = k_spin_lock(&lock);
#endif

	cbvprintf(char_out, &ctx, fmt, ap);
     54e:	4803      	ldr	r0, [pc, #12]	; (55c <vprintk+0x18>)
     550:	a901      	add	r1, sp, #4
     552:	f000 fa57 	bl	a04 <cbvprintf>

#ifdef CONFIG_PRINTK_SYNC
	k_spin_unlock(&lock, key);
#endif
}
     556:	b003      	add	sp, #12
     558:	f85d fb04 	ldr.w	pc, [sp], #4
     55c:	00000529 	.word	0x00000529

00000560 <vsnprintk>:

	return ret;
}

int vsnprintk(char *str, size_t size, const char *fmt, va_list ap)
{
     560:	b530      	push	{r4, r5, lr}
     562:	b085      	sub	sp, #20
	struct str_context ctx = { str, size, 0 };
     564:	e9cd 0101 	strd	r0, r1, [sp, #4]
{
     568:	4604      	mov	r4, r0
	struct str_context ctx = { str, size, 0 };
     56a:	2500      	movs	r5, #0

	cbvprintf(str_out, &ctx, fmt, ap);
     56c:	a901      	add	r1, sp, #4
     56e:	4805      	ldr	r0, [pc, #20]	; (584 <vsnprintk+0x24>)
	struct str_context ctx = { str, size, 0 };
     570:	9503      	str	r5, [sp, #12]
	cbvprintf(str_out, &ctx, fmt, ap);
     572:	f000 fa47 	bl	a04 <cbvprintf>

	if (ctx.count < ctx.max) {
     576:	e9dd 3002 	ldrd	r3, r0, [sp, #8]
     57a:	4298      	cmp	r0, r3
		str[ctx.count] = '\0';
     57c:	bfb8      	it	lt
     57e:	5425      	strblt	r5, [r4, r0]
	}

	return ctx.count;
}
     580:	b005      	add	sp, #20
     582:	bd30      	pop	{r4, r5, pc}
     584:	00004d61 	.word	0x00004d61

00000588 <process_event>:
 * regions.
 */
static void process_event(struct onoff_manager *mgr,
			  int evt,
			  k_spinlock_key_t key)
{
     588:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	sys_slist_t clients;
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
     58c:	f8b0 9018 	ldrh.w	r9, [r0, #24]
	__ASSERT_NO_MSG(evt != EVT_NOP);

	/* If this is a nested call record the event for processing in
	 * the top invocation.
	 */
	if (processing) {
     590:	f019 0808 	ands.w	r8, r9, #8
{
     594:	4604      	mov	r4, r0
     596:	4693      	mov	fp, r2
	if (processing) {
     598:	d00d      	beq.n	5b6 <process_event+0x2e>
		if (evt == EVT_COMPLETE) {
     59a:	2901      	cmp	r1, #1
			mgr->flags |= ONOFF_FLAG_COMPLETE;
     59c:	bf0c      	ite	eq
     59e:	f049 0910 	orreq.w	r9, r9, #16
		} else {
			__ASSERT_NO_MSG(evt == EVT_RECHECK);

			mgr->flags |= ONOFF_FLAG_RECHECK;
     5a2:	f049 0920 	orrne.w	r9, r9, #32
     5a6:	f8a0 9018 	strh.w	r9, [r0, #24]
	__asm__ volatile(
		"cpsie i;"
		"isb"
		: : : "memory");
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	__asm__ volatile(
     5aa:	f38b 8811 	msr	BASEPRI, fp
     5ae:	f3bf 8f6f 	isb	sy
		state = mgr->flags & ONOFF_STATE_MASK;
	} while (evt != EVT_NOP);

out:
	k_spin_unlock(&mgr->lock, key);
}
     5b2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
     5b6:	f009 0907 	and.w	r9, r9, #7
		if (evt == EVT_RECHECK) {
     5ba:	2902      	cmp	r1, #2
     5bc:	d107      	bne.n	5ce <process_event+0x46>
			evt = process_recheck(mgr);
     5be:	4620      	mov	r0, r4
     5c0:	f004 fbfb 	bl	4dba <process_recheck>
		if (evt == EVT_NOP) {
     5c4:	2800      	cmp	r0, #0
     5c6:	d0f0      	beq.n	5aa <process_event+0x22>
		if (evt == EVT_COMPLETE) {
     5c8:	2801      	cmp	r0, #1
     5ca:	8b23      	ldrh	r3, [r4, #24]
     5cc:	d150      	bne.n	670 <process_event+0xe8>
			res = mgr->last_res;
     5ce:	6967      	ldr	r7, [r4, #20]
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
     5d0:	8b21      	ldrh	r1, [r4, #24]
	if (res < 0) {
     5d2:	2f00      	cmp	r7, #0
     5d4:	da15      	bge.n	602 <process_event+0x7a>
		*clients = mgr->clients;
     5d6:	6825      	ldr	r5, [r4, #0]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
     5d8:	f021 0107 	bic.w	r1, r1, #7
 * @param list A pointer on the list to initialize
 */
static inline void sys_slist_init(sys_slist_t *list)
{
	list->head = NULL;
	list->tail = NULL;
     5dc:	e9c4 8800 	strd	r8, r8, [r4]
     5e0:	f041 0101 	orr.w	r1, r1, #1
	mgr->flags = (state & ONOFF_STATE_MASK)
     5e4:	8321      	strh	r1, [r4, #24]
		onoff_transition_fn transit = NULL;
     5e6:	2600      	movs	r6, #0
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
     5e8:	8b21      	ldrh	r1, [r4, #24]
     5ea:	f001 0a07 	and.w	sl, r1, #7
				   && !sys_slist_is_empty(&mgr->monitors);
     5ee:	45ca      	cmp	sl, r9
     5f0:	d002      	beq.n	5f8 <process_event+0x70>
		if (do_monitors
     5f2:	68a3      	ldr	r3, [r4, #8]
     5f4:	2b00      	cmp	r3, #0
     5f6:	d15c      	bne.n	6b2 <process_event+0x12a>
		    || !sys_slist_is_empty(&clients)
     5f8:	b90d      	cbnz	r5, 5fe <process_event+0x76>
		    || (transit != NULL)) {
     5fa:	2e00      	cmp	r6, #0
     5fc:	d074      	beq.n	6e8 <process_event+0x160>
     5fe:	2300      	movs	r3, #0
     600:	e058      	b.n	6b4 <process_event+0x12c>
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
     602:	f001 0307 	and.w	r3, r1, #7
		   || (state == ONOFF_STATE_RESETTING)) {
     606:	1f5a      	subs	r2, r3, #5
	} else if ((state == ONOFF_STATE_TO_ON)
     608:	2a01      	cmp	r2, #1
     60a:	d820      	bhi.n	64e <process_event+0xc6>
		*clients = mgr->clients;
     60c:	f021 0107 	bic.w	r1, r1, #7
		if (state == ONOFF_STATE_TO_ON) {
     610:	2b06      	cmp	r3, #6
		*clients = mgr->clients;
     612:	6825      	ldr	r5, [r4, #0]
	list->head = NULL;
     614:	b289      	uxth	r1, r1
	list->tail = NULL;
     616:	e9c4 8800 	strd	r8, r8, [r4]
		if (state == ONOFF_STATE_TO_ON) {
     61a:	d10c      	bne.n	636 <process_event+0xae>
 *
 * @return A pointer on the first node of the list (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_head(sys_slist_t *list)
{
	return list->head;
     61c:	2d00      	cmp	r5, #0
     61e:	462b      	mov	r3, r5
     620:	bf38      	it	cc
     622:	2300      	movcc	r3, #0
			SYS_SLIST_FOR_EACH_CONTAINER(clients, cp, node) {
     624:	b12b      	cbz	r3, 632 <process_event+0xaa>
				mgr->refs += 1U;
     626:	8b62      	ldrh	r2, [r4, #26]
 *
 * @return a pointer on the next node (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_next_no_check(sys_snode_t *node);

Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
     628:	681b      	ldr	r3, [r3, #0]
     62a:	3201      	adds	r2, #1
     62c:	8362      	strh	r2, [r4, #26]
			SYS_SLIST_FOR_EACH_CONTAINER(clients, cp, node) {
     62e:	2b00      	cmp	r3, #0
     630:	d1f8      	bne.n	624 <process_event+0x9c>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
     632:	f041 0102 	orr.w	r1, r1, #2
	mgr->flags = (state & ONOFF_STATE_MASK)
     636:	8321      	strh	r1, [r4, #24]
		if (process_recheck(mgr) != EVT_NOP) {
     638:	4620      	mov	r0, r4
     63a:	f004 fbbe 	bl	4dba <process_recheck>
     63e:	4606      	mov	r6, r0
     640:	2800      	cmp	r0, #0
     642:	d0d1      	beq.n	5e8 <process_event+0x60>
			mgr->flags |= ONOFF_FLAG_RECHECK;
     644:	8b23      	ldrh	r3, [r4, #24]
     646:	f043 0320 	orr.w	r3, r3, #32
     64a:	8323      	strh	r3, [r4, #24]
     64c:	e7cb      	b.n	5e6 <process_event+0x5e>
	} else if (state == ONOFF_STATE_TO_OFF) {
     64e:	2b04      	cmp	r3, #4
     650:	d10c      	bne.n	66c <process_event+0xe4>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
     652:	f021 0107 	bic.w	r1, r1, #7
     656:	b289      	uxth	r1, r1
	mgr->flags = (state & ONOFF_STATE_MASK)
     658:	8321      	strh	r1, [r4, #24]
		if (process_recheck(mgr) != EVT_NOP) {
     65a:	4620      	mov	r0, r4
     65c:	f004 fbad 	bl	4dba <process_recheck>
     660:	4605      	mov	r5, r0
     662:	2800      	cmp	r0, #0
     664:	d0bf      	beq.n	5e6 <process_event+0x5e>
			mgr->flags |= ONOFF_FLAG_RECHECK;
     666:	f041 0120 	orr.w	r1, r1, #32
     66a:	8321      	strh	r1, [r4, #24]
     66c:	2500      	movs	r5, #0
     66e:	e7ba      	b.n	5e6 <process_event+0x5e>
		} else if (evt == EVT_START) {
     670:	2803      	cmp	r0, #3
     672:	d109      	bne.n	688 <process_event+0x100>
			transit = mgr->transitions->start;
     674:	6922      	ldr	r2, [r4, #16]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
     676:	f023 0307 	bic.w	r3, r3, #7
			transit = mgr->transitions->start;
     67a:	6816      	ldr	r6, [r2, #0]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
     67c:	f043 0306 	orr.w	r3, r3, #6
	mgr->flags = (state & ONOFF_STATE_MASK)
     680:	8323      	strh	r3, [r4, #24]
}
     682:	2500      	movs	r5, #0
		res = 0;
     684:	462f      	mov	r7, r5
     686:	e7af      	b.n	5e8 <process_event+0x60>
		} else if (evt == EVT_STOP) {
     688:	2804      	cmp	r0, #4
     68a:	d106      	bne.n	69a <process_event+0x112>
			transit = mgr->transitions->stop;
     68c:	6922      	ldr	r2, [r4, #16]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
     68e:	f023 0307 	bic.w	r3, r3, #7
			transit = mgr->transitions->stop;
     692:	6856      	ldr	r6, [r2, #4]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
     694:	f043 0304 	orr.w	r3, r3, #4
     698:	e7f2      	b.n	680 <process_event+0xf8>
		} else if (evt == EVT_RESET) {
     69a:	2805      	cmp	r0, #5
     69c:	d106      	bne.n	6ac <process_event+0x124>
			transit = mgr->transitions->reset;
     69e:	6922      	ldr	r2, [r4, #16]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
     6a0:	f023 0307 	bic.w	r3, r3, #7
			transit = mgr->transitions->reset;
     6a4:	6896      	ldr	r6, [r2, #8]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
     6a6:	f043 0305 	orr.w	r3, r3, #5
     6aa:	e7e9      	b.n	680 <process_event+0xf8>
     6ac:	2500      	movs	r5, #0
		onoff_transition_fn transit = NULL;
     6ae:	462e      	mov	r6, r5
     6b0:	e7e8      	b.n	684 <process_event+0xfc>
				   && !sys_slist_is_empty(&mgr->monitors);
     6b2:	2301      	movs	r3, #1
			uint32_t flags = mgr->flags | ONOFF_FLAG_PROCESSING;
     6b4:	f041 0108 	orr.w	r1, r1, #8
			mgr->flags = flags;
     6b8:	8321      	strh	r1, [r4, #24]
     6ba:	f38b 8811 	msr	BASEPRI, fp
     6be:	f3bf 8f6f 	isb	sy
			if (do_monitors) {
     6c2:	bb03      	cbnz	r3, 706 <process_event+0x17e>
	while (!sys_slist_is_empty(list)) {
     6c4:	2d00      	cmp	r5, #0
     6c6:	d133      	bne.n	730 <process_event+0x1a8>
			if (transit != NULL) {
     6c8:	b116      	cbz	r6, 6d0 <process_event+0x148>
				transit(mgr, transition_complete);
     6ca:	4921      	ldr	r1, [pc, #132]	; (750 <process_event+0x1c8>)
     6cc:	4620      	mov	r0, r4
     6ce:	47b0      	blx	r6
	__asm__ volatile(
     6d0:	f04f 0320 	mov.w	r3, #32
     6d4:	f3ef 8b11 	mrs	fp, BASEPRI
     6d8:	f383 8811 	msr	BASEPRI, r3
     6dc:	f3bf 8f6f 	isb	sy
			mgr->flags &= ~ONOFF_FLAG_PROCESSING;
     6e0:	8b23      	ldrh	r3, [r4, #24]
     6e2:	f023 0308 	bic.w	r3, r3, #8
     6e6:	8323      	strh	r3, [r4, #24]
		if ((mgr->flags & ONOFF_FLAG_COMPLETE) != 0) {
     6e8:	8b23      	ldrh	r3, [r4, #24]
     6ea:	06da      	lsls	r2, r3, #27
     6ec:	d528      	bpl.n	740 <process_event+0x1b8>
			mgr->flags &= ~ONOFF_FLAG_COMPLETE;
     6ee:	f023 0310 	bic.w	r3, r3, #16
     6f2:	8323      	strh	r3, [r4, #24]
			evt = EVT_COMPLETE;
     6f4:	2101      	movs	r1, #1
		state = mgr->flags & ONOFF_STATE_MASK;
     6f6:	f8b4 9018 	ldrh.w	r9, [r4, #24]
     6fa:	f009 0907 	and.w	r9, r9, #7
	} while (evt != EVT_NOP);
     6fe:	2900      	cmp	r1, #0
     700:	f47f af5b 	bne.w	5ba <process_event+0x32>
out:
     704:	e751      	b.n	5aa <process_event+0x22>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
     706:	68a1      	ldr	r1, [r4, #8]
     708:	2900      	cmp	r1, #0
     70a:	d0db      	beq.n	6c4 <process_event+0x13c>
	return node->next;
     70c:	680b      	ldr	r3, [r1, #0]
		mon->callback(mgr, mon, state, res);
     70e:	f8d1 b004 	ldr.w	fp, [r1, #4]
     712:	2b00      	cmp	r3, #0
     714:	bf38      	it	cc
     716:	2300      	movcc	r3, #0
     718:	4699      	mov	r9, r3
     71a:	4652      	mov	r2, sl
     71c:	463b      	mov	r3, r7
     71e:	4620      	mov	r0, r4
     720:	47d8      	blx	fp
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
     722:	f1b9 0f00 	cmp.w	r9, #0
     726:	d0cd      	beq.n	6c4 <process_event+0x13c>
     728:	f8d9 3000 	ldr.w	r3, [r9]
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
     72c:	4649      	mov	r1, r9
     72e:	e7ee      	b.n	70e <process_event+0x186>
 *
 * @return A pointer to the first node of the list
 */
static inline sys_snode_t *sys_slist_get_not_empty(sys_slist_t *list);

Z_GENLIST_GET_NOT_EMPTY(slist, snode)
     730:	4629      	mov	r1, r5
		notify_one(mgr, cli, state, res);
     732:	463b      	mov	r3, r7
     734:	4652      	mov	r2, sl
     736:	4620      	mov	r0, r4
     738:	682d      	ldr	r5, [r5, #0]
     73a:	f004 fb5a 	bl	4df2 <notify_one>
     73e:	e7c1      	b.n	6c4 <process_event+0x13c>
		} else if ((mgr->flags & ONOFF_FLAG_RECHECK) != 0) {
     740:	f013 0120 	ands.w	r1, r3, #32
			mgr->flags &= ~ONOFF_FLAG_RECHECK;
     744:	bf1e      	ittt	ne
     746:	f023 0320 	bicne.w	r3, r3, #32
     74a:	8323      	strhne	r3, [r4, #24]
			evt = EVT_RECHECK;
     74c:	2102      	movne	r1, #2
     74e:	e7d2      	b.n	6f6 <process_event+0x16e>
     750:	00004e1f 	.word	0x00004e1f

00000754 <extract_conversion>:
 *
 * @return pointer to the first character that follows the specification.
 */
static inline const char *extract_conversion(struct conversion *conv,
					     const char *sp)
{
     754:	b5f0      	push	{r4, r5, r6, r7, lr}
	*conv = (struct conversion) {
     756:	2200      	movs	r2, #0
     758:	e9c0 2200 	strd	r2, r2, [r0]
     75c:	6082      	str	r2, [r0, #8]
	/* Skip over the opening %.  If the conversion specifier is %,
	 * that's the only thing that should be there, so
	 * fast-exit.
	 */
	++sp;
	if (*sp == '%') {
     75e:	784a      	ldrb	r2, [r1, #1]
     760:	2a25      	cmp	r2, #37	; 0x25
{
     762:	4603      	mov	r3, r0
	if (*sp == '%') {
     764:	d033      	beq.n	7ce <extract_conversion+0x7a>
	++sp;
     766:	3101      	adds	r1, #1
     768:	460c      	mov	r4, r1
		switch (*sp) {
     76a:	f811 2b01 	ldrb.w	r2, [r1], #1
     76e:	2a2b      	cmp	r2, #43	; 0x2b
     770:	d03d      	beq.n	7ee <extract_conversion+0x9a>
     772:	d82f      	bhi.n	7d4 <extract_conversion+0x80>
     774:	2a20      	cmp	r2, #32
     776:	d03e      	beq.n	7f6 <extract_conversion+0xa2>
     778:	2a23      	cmp	r2, #35	; 0x23
     77a:	d040      	beq.n	7fe <extract_conversion+0xaa>
	if (conv->flag_zero && conv->flag_dash) {
     77c:	781a      	ldrb	r2, [r3, #0]
     77e:	f002 0144 	and.w	r1, r2, #68	; 0x44
     782:	2944      	cmp	r1, #68	; 0x44
     784:	d102      	bne.n	78c <extract_conversion+0x38>
		conv->flag_zero = false;
     786:	f36f 1286 	bfc	r2, #6, #1
     78a:	701a      	strb	r2, [r3, #0]
	if (*sp == '*') {
     78c:	7822      	ldrb	r2, [r4, #0]
     78e:	2a2a      	cmp	r2, #42	; 0x2a
     790:	d14c      	bne.n	82c <CONFIG_ISR_STACK_SIZE+0x2c>
		conv->width_present = true;
     792:	881a      	ldrh	r2, [r3, #0]
     794:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
     798:	1c60      	adds	r0, r4, #1
     79a:	801a      	strh	r2, [r3, #0]
	if (*sp != '.') {
     79c:	7802      	ldrb	r2, [r0, #0]
     79e:	2a2e      	cmp	r2, #46	; 0x2e
     7a0:	d14f      	bne.n	842 <CONFIG_ISR_STACK_SIZE+0x42>
	if (*sp == '*') {
     7a2:	7842      	ldrb	r2, [r0, #1]
     7a4:	2a2a      	cmp	r2, #42	; 0x2a
     7a6:	d045      	beq.n	834 <CONFIG_ISR_STACK_SIZE+0x34>
     7a8:	3001      	adds	r0, #1
	const char *sp = *str;
     7aa:	4605      	mov	r5, r0
	size_t val = 0;
     7ac:	2200      	movs	r2, #0
		val = 10U * val + *sp++ - '0';
     7ae:	270a      	movs	r7, #10
			(((unsigned)c) <= (unsigned)'~'));
}

static inline int isdigit(int a)
{
	return (int)(((unsigned)(a)-(unsigned)'0') < 10U);
     7b0:	4601      	mov	r1, r0
     7b2:	f811 4b01 	ldrb.w	r4, [r1], #1
     7b6:	f1a4 0630 	sub.w	r6, r4, #48	; 0x30
	while (isdigit((int)(unsigned char)*sp)) {
     7ba:	2e09      	cmp	r6, #9
     7bc:	d953      	bls.n	866 <CONFIG_ISR_STACK_SIZE+0x66>
	if (sp != wp) {
     7be:	42a8      	cmp	r0, r5
		conv->prec_present = true;
     7c0:	bf1f      	itttt	ne
     7c2:	7859      	ldrbne	r1, [r3, #1]
		conv->prec_value = prec;
     7c4:	609a      	strne	r2, [r3, #8]
		conv->prec_present = true;
     7c6:	f041 0102 	orrne.w	r1, r1, #2
     7ca:	7059      	strbne	r1, [r3, #1]
		if (prec != conv->prec_value) {
     7cc:	e039      	b.n	842 <CONFIG_ISR_STACK_SIZE+0x42>
		conv->specifier = *sp++;
     7ce:	1c88      	adds	r0, r1, #2
     7d0:	70da      	strb	r2, [r3, #3]
	sp = extract_prec(conv, sp);
	sp = extract_length(conv, sp);
	sp = extract_specifier(conv, sp);

	return sp;
}
     7d2:	bdf0      	pop	{r4, r5, r6, r7, pc}
		switch (*sp) {
     7d4:	2a2d      	cmp	r2, #45	; 0x2d
     7d6:	d005      	beq.n	7e4 <extract_conversion+0x90>
     7d8:	2a30      	cmp	r2, #48	; 0x30
     7da:	d1cf      	bne.n	77c <extract_conversion+0x28>
			conv->flag_zero = true;
     7dc:	781a      	ldrb	r2, [r3, #0]
     7de:	f042 0240 	orr.w	r2, r2, #64	; 0x40
     7e2:	e002      	b.n	7ea <extract_conversion+0x96>
			conv->flag_dash = true;
     7e4:	781a      	ldrb	r2, [r3, #0]
     7e6:	f042 0204 	orr.w	r2, r2, #4
			conv->flag_zero = true;
     7ea:	701a      	strb	r2, [r3, #0]
			break;
     7ec:	e7bc      	b.n	768 <extract_conversion+0x14>
			conv->flag_plus = true;
     7ee:	781a      	ldrb	r2, [r3, #0]
     7f0:	f042 0208 	orr.w	r2, r2, #8
     7f4:	e7f9      	b.n	7ea <extract_conversion+0x96>
			conv->flag_space = true;
     7f6:	781a      	ldrb	r2, [r3, #0]
     7f8:	f042 0210 	orr.w	r2, r2, #16
     7fc:	e7f5      	b.n	7ea <extract_conversion+0x96>
			conv->flag_hash = true;
     7fe:	781a      	ldrb	r2, [r3, #0]
     800:	f042 0220 	orr.w	r2, r2, #32
     804:	e7f1      	b.n	7ea <extract_conversion+0x96>
		val = 10U * val + *sp++ - '0';
     806:	fb07 5202 	mla	r2, r7, r2, r5
     80a:	3a30      	subs	r2, #48	; 0x30
     80c:	4608      	mov	r0, r1
     80e:	4601      	mov	r1, r0
     810:	f811 5b01 	ldrb.w	r5, [r1], #1
     814:	f1a5 0630 	sub.w	r6, r5, #48	; 0x30
	while (isdigit((int)(unsigned char)*sp)) {
     818:	2e09      	cmp	r6, #9
     81a:	d9f4      	bls.n	806 <CONFIG_ISR_STACK_SIZE+0x6>
	if (sp != wp) {
     81c:	4284      	cmp	r4, r0
		conv->width_present = true;
     81e:	bf1f      	itttt	ne
     820:	7819      	ldrbne	r1, [r3, #0]
		conv->width_value = width;
     822:	605a      	strne	r2, [r3, #4]
		conv->width_present = true;
     824:	f041 0180 	orrne.w	r1, r1, #128	; 0x80
     828:	7019      	strbne	r1, [r3, #0]
		if (width != conv->width_value) {
     82a:	e7b7      	b.n	79c <extract_conversion+0x48>
     82c:	4620      	mov	r0, r4
	size_t val = 0;
     82e:	2200      	movs	r2, #0
		val = 10U * val + *sp++ - '0';
     830:	270a      	movs	r7, #10
     832:	e7ec      	b.n	80e <CONFIG_ISR_STACK_SIZE+0xe>
		conv->prec_present = true;
     834:	785a      	ldrb	r2, [r3, #1]
     836:	f022 0206 	bic.w	r2, r2, #6
     83a:	f042 0206 	orr.w	r2, r2, #6
     83e:	705a      	strb	r2, [r3, #1]
		return ++sp;
     840:	3002      	adds	r0, #2
	switch (*sp) {
     842:	4601      	mov	r1, r0
     844:	f811 4b01 	ldrb.w	r4, [r1], #1
     848:	2c6c      	cmp	r4, #108	; 0x6c
     84a:	d03c      	beq.n	8c6 <CONFIG_ISR_STACK_SIZE+0xc6>
     84c:	d810      	bhi.n	870 <CONFIG_ISR_STACK_SIZE+0x70>
     84e:	2c68      	cmp	r4, #104	; 0x68
     850:	d015      	beq.n	87e <CONFIG_ISR_STACK_SIZE+0x7e>
     852:	2c6a      	cmp	r4, #106	; 0x6a
     854:	d03f      	beq.n	8d6 <CONFIG_ISR_STACK_SIZE+0xd6>
     856:	2c4c      	cmp	r4, #76	; 0x4c
     858:	d042      	beq.n	8e0 <CONFIG_ISR_STACK_SIZE+0xe0>
		conv->length_mod = LENGTH_NONE;
     85a:	785a      	ldrb	r2, [r3, #1]
     85c:	f36f 02c6 	bfc	r2, #3, #4
     860:	705a      	strb	r2, [r3, #1]
		break;
     862:	4601      	mov	r1, r0
     864:	e014      	b.n	890 <CONFIG_ISR_STACK_SIZE+0x90>
		val = 10U * val + *sp++ - '0';
     866:	fb07 4202 	mla	r2, r7, r2, r4
     86a:	3a30      	subs	r2, #48	; 0x30
     86c:	4608      	mov	r0, r1
     86e:	e79f      	b.n	7b0 <extract_conversion+0x5c>
	switch (*sp) {
     870:	2c74      	cmp	r4, #116	; 0x74
     872:	785a      	ldrb	r2, [r3, #1]
     874:	d032      	beq.n	8dc <CONFIG_ISR_STACK_SIZE+0xdc>
     876:	2c7a      	cmp	r4, #122	; 0x7a
     878:	d1ef      	bne.n	85a <CONFIG_ISR_STACK_SIZE+0x5a>
		conv->length_mod = LENGTH_Z;
     87a:	2006      	movs	r0, #6
     87c:	e01f      	b.n	8be <CONFIG_ISR_STACK_SIZE+0xbe>
		if (*++sp == 'h') {
     87e:	7842      	ldrb	r2, [r0, #1]
     880:	2a68      	cmp	r2, #104	; 0x68
     882:	785a      	ldrb	r2, [r3, #1]
     884:	d11a      	bne.n	8bc <CONFIG_ISR_STACK_SIZE+0xbc>
			conv->length_mod = LENGTH_HH;
     886:	2101      	movs	r1, #1
			conv->length_mod = LENGTH_LL;
     888:	f361 02c6 	bfi	r2, r1, #3, #4
     88c:	705a      	strb	r2, [r3, #1]
			++sp;
     88e:	1c81      	adds	r1, r0, #2
	conv->specifier = *sp++;
     890:	4608      	mov	r0, r1
     892:	f810 4b01 	ldrb.w	r4, [r0], #1
     896:	70dc      	strb	r4, [r3, #3]
	switch (conv->specifier) {
     898:	2c78      	cmp	r4, #120	; 0x78
     89a:	f200 80ac 	bhi.w	9f6 <CONFIG_ISR_STACK_SIZE+0x1f6>
     89e:	2c57      	cmp	r4, #87	; 0x57
     8a0:	d829      	bhi.n	8f6 <CONFIG_ISR_STACK_SIZE+0xf6>
     8a2:	2c41      	cmp	r4, #65	; 0x41
     8a4:	d003      	beq.n	8ae <CONFIG_ISR_STACK_SIZE+0xae>
     8a6:	3c45      	subs	r4, #69	; 0x45
     8a8:	2c02      	cmp	r4, #2
     8aa:	f200 80a4 	bhi.w	9f6 <CONFIG_ISR_STACK_SIZE+0x1f6>
		conv->specifier_cat = SPECIFIER_FP;
     8ae:	789a      	ldrb	r2, [r3, #2]
     8b0:	2104      	movs	r1, #4
     8b2:	f361 0202 	bfi	r2, r1, #0, #3
     8b6:	709a      	strb	r2, [r3, #2]
			unsupported = true;
     8b8:	2201      	movs	r2, #1
			break;
     8ba:	e078      	b.n	9ae <CONFIG_ISR_STACK_SIZE+0x1ae>
			conv->length_mod = LENGTH_H;
     8bc:	2002      	movs	r0, #2
			conv->length_mod = LENGTH_L;
     8be:	f360 02c6 	bfi	r2, r0, #3, #4
     8c2:	705a      	strb	r2, [r3, #1]
     8c4:	e7e4      	b.n	890 <CONFIG_ISR_STACK_SIZE+0x90>
		if (*++sp == 'l') {
     8c6:	7842      	ldrb	r2, [r0, #1]
     8c8:	2a6c      	cmp	r2, #108	; 0x6c
     8ca:	785a      	ldrb	r2, [r3, #1]
     8cc:	d101      	bne.n	8d2 <CONFIG_ISR_STACK_SIZE+0xd2>
			conv->length_mod = LENGTH_LL;
     8ce:	2104      	movs	r1, #4
     8d0:	e7da      	b.n	888 <CONFIG_ISR_STACK_SIZE+0x88>
			conv->length_mod = LENGTH_L;
     8d2:	2003      	movs	r0, #3
     8d4:	e7f3      	b.n	8be <CONFIG_ISR_STACK_SIZE+0xbe>
		conv->length_mod = LENGTH_J;
     8d6:	785a      	ldrb	r2, [r3, #1]
     8d8:	2005      	movs	r0, #5
     8da:	e7f0      	b.n	8be <CONFIG_ISR_STACK_SIZE+0xbe>
		conv->length_mod = LENGTH_T;
     8dc:	2007      	movs	r0, #7
     8de:	e7ee      	b.n	8be <CONFIG_ISR_STACK_SIZE+0xbe>
		conv->unsupported = true;
     8e0:	881a      	ldrh	r2, [r3, #0]
     8e2:	f422 42f0 	bic.w	r2, r2, #30720	; 0x7800
     8e6:	f022 0202 	bic.w	r2, r2, #2
     8ea:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
     8ee:	f042 0202 	orr.w	r2, r2, #2
     8f2:	801a      	strh	r2, [r3, #0]
		break;
     8f4:	e7cc      	b.n	890 <CONFIG_ISR_STACK_SIZE+0x90>
     8f6:	f1a4 0258 	sub.w	r2, r4, #88	; 0x58
     8fa:	2a20      	cmp	r2, #32
     8fc:	d87b      	bhi.n	9f6 <CONFIG_ISR_STACK_SIZE+0x1f6>
     8fe:	a101      	add	r1, pc, #4	; (adr r1, 904 <CONFIG_ISR_STACK_SIZE+0x104>)
     900:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
     904:	000009bf 	.word	0x000009bf
     908:	000009f7 	.word	0x000009f7
     90c:	000009f7 	.word	0x000009f7
     910:	000009f7 	.word	0x000009f7
     914:	000009f7 	.word	0x000009f7
     918:	000009f7 	.word	0x000009f7
     91c:	000009f7 	.word	0x000009f7
     920:	000009f7 	.word	0x000009f7
     924:	000009f7 	.word	0x000009f7
     928:	000008af 	.word	0x000008af
     92c:	000009f7 	.word	0x000009f7
     930:	000009bf 	.word	0x000009bf
     934:	00000989 	.word	0x00000989
     938:	000008af 	.word	0x000008af
     93c:	000008af 	.word	0x000008af
     940:	000008af 	.word	0x000008af
     944:	000009f7 	.word	0x000009f7
     948:	00000989 	.word	0x00000989
     94c:	000009f7 	.word	0x000009f7
     950:	000009f7 	.word	0x000009f7
     954:	000009f7 	.word	0x000009f7
     958:	000009f7 	.word	0x000009f7
     95c:	000009c5 	.word	0x000009c5
     960:	000009bf 	.word	0x000009bf
     964:	000009df 	.word	0x000009df
     968:	000009f7 	.word	0x000009f7
     96c:	000009f7 	.word	0x000009f7
     970:	000009df 	.word	0x000009df
     974:	000009f7 	.word	0x000009f7
     978:	000009bf 	.word	0x000009bf
     97c:	000009f7 	.word	0x000009f7
     980:	000009f7 	.word	0x000009f7
     984:	000009bf 	.word	0x000009bf
		conv->specifier_cat = SPECIFIER_SINT;
     988:	789a      	ldrb	r2, [r3, #2]
     98a:	2101      	movs	r1, #1
		conv->specifier_cat = SPECIFIER_UINT;
     98c:	f361 0202 	bfi	r2, r1, #0, #3
     990:	709a      	strb	r2, [r3, #2]
		if (conv->length_mod == LENGTH_UPPER_L) {
     992:	785a      	ldrb	r2, [r3, #1]
     994:	f002 0278 	and.w	r2, r2, #120	; 0x78
     998:	2a40      	cmp	r2, #64	; 0x40
			conv->invalid = true;
     99a:	bf02      	ittt	eq
     99c:	7819      	ldrbeq	r1, [r3, #0]
     99e:	f041 0101 	orreq.w	r1, r1, #1
     9a2:	7019      	strbeq	r1, [r3, #0]
		if (conv->specifier == 'c') {
     9a4:	2c63      	cmp	r4, #99	; 0x63
     9a6:	d12a      	bne.n	9fe <CONFIG_ISR_STACK_SIZE+0x1fe>
			unsupported = (conv->length_mod != LENGTH_NONE);
     9a8:	3a00      	subs	r2, #0
     9aa:	bf18      	it	ne
     9ac:	2201      	movne	r2, #1
	conv->unsupported |= unsupported;
     9ae:	7819      	ldrb	r1, [r3, #0]
     9b0:	f3c1 0440 	ubfx	r4, r1, #1, #1
     9b4:	4322      	orrs	r2, r4
     9b6:	f362 0141 	bfi	r1, r2, #1, #1
     9ba:	7019      	strb	r1, [r3, #0]
	return sp;
     9bc:	e709      	b.n	7d2 <extract_conversion+0x7e>
		conv->specifier_cat = SPECIFIER_UINT;
     9be:	789a      	ldrb	r2, [r3, #2]
     9c0:	2102      	movs	r1, #2
     9c2:	e7e3      	b.n	98c <CONFIG_ISR_STACK_SIZE+0x18c>
		conv->specifier_cat = SPECIFIER_PTR;
     9c4:	789a      	ldrb	r2, [r3, #2]
     9c6:	2103      	movs	r1, #3
     9c8:	f361 0202 	bfi	r2, r1, #0, #3
     9cc:	709a      	strb	r2, [r3, #2]
		if (conv->length_mod == LENGTH_UPPER_L) {
     9ce:	785a      	ldrb	r2, [r3, #1]
     9d0:	f002 0278 	and.w	r2, r2, #120	; 0x78
     9d4:	f1a2 0140 	sub.w	r1, r2, #64	; 0x40
     9d8:	424a      	negs	r2, r1
     9da:	414a      	adcs	r2, r1
     9dc:	e7e7      	b.n	9ae <CONFIG_ISR_STACK_SIZE+0x1ae>
		conv->specifier_cat = SPECIFIER_PTR;
     9de:	789a      	ldrb	r2, [r3, #2]
     9e0:	2103      	movs	r1, #3
     9e2:	f361 0202 	bfi	r2, r1, #0, #3
     9e6:	709a      	strb	r2, [r3, #2]
		if (conv->length_mod != LENGTH_NONE) {
     9e8:	785a      	ldrb	r2, [r3, #1]
     9ea:	f012 0f78 	tst.w	r2, #120	; 0x78
     9ee:	bf14      	ite	ne
     9f0:	2201      	movne	r2, #1
     9f2:	2200      	moveq	r2, #0
     9f4:	e7db      	b.n	9ae <CONFIG_ISR_STACK_SIZE+0x1ae>
		conv->invalid = true;
     9f6:	781a      	ldrb	r2, [r3, #0]
     9f8:	f042 0201 	orr.w	r2, r2, #1
     9fc:	701a      	strb	r2, [r3, #0]
	bool unsupported = false;
     9fe:	2200      	movs	r2, #0
     a00:	e7d5      	b.n	9ae <CONFIG_ISR_STACK_SIZE+0x1ae>
     a02:	bf00      	nop

00000a04 <cbvprintf>:

	return (int)count;
}

int cbvprintf(cbprintf_cb out, void *ctx, const char *fp, va_list ap)
{
     a04:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
     a08:	4680      	mov	r8, r0
     a0a:	b08f      	sub	sp, #60	; 0x3c
     a0c:	4689      	mov	r9, r1
     a0e:	4692      	mov	sl, r2
     a10:	461c      	mov	r4, r3
	char buf[CONVERTED_BUFLEN];
	size_t count = 0;
     a12:	2500      	movs	r5, #0
		return rc; \
	} \
	count += rc; \
} while (false)

	while (*fp != 0) {
     a14:	f89a 0000 	ldrb.w	r0, [sl]
     a18:	b908      	cbnz	r0, a1e <cbvprintf+0x1a>
			OUTC(' ');
			--width;
		}
	}

	return count;
     a1a:	4628      	mov	r0, r5
     a1c:	e10b      	b.n	c36 <cbvprintf+0x232>
		if (*fp != '%') {
     a1e:	2825      	cmp	r0, #37	; 0x25
     a20:	d009      	beq.n	a36 <cbvprintf+0x32>
			OUTC(*fp++);
     a22:	4649      	mov	r1, r9
     a24:	47c0      	blx	r8
     a26:	2800      	cmp	r0, #0
     a28:	f2c0 8105 	blt.w	c36 <cbvprintf+0x232>
     a2c:	f10a 0301 	add.w	r3, sl, #1
     a30:	9302      	str	r3, [sp, #8]
			OUTC('%');
     a32:	3501      	adds	r5, #1
			break;
     a34:	e059      	b.n	aea <cbvprintf+0xe6>
		fp = extract_conversion(&conv, sp);
     a36:	4651      	mov	r1, sl
     a38:	a805      	add	r0, sp, #20
     a3a:	f7ff fe8b 	bl	754 <extract_conversion>
		if (conv.width_star) {
     a3e:	f89d 3015 	ldrb.w	r3, [sp, #21]
		fp = extract_conversion(&conv, sp);
     a42:	9002      	str	r0, [sp, #8]
		if (conv.width_star) {
     a44:	07d9      	lsls	r1, r3, #31
     a46:	d51a      	bpl.n	a7e <cbvprintf+0x7a>
			width = va_arg(ap, int);
     a48:	f854 7b04 	ldr.w	r7, [r4], #4
			if (width < 0) {
     a4c:	2f00      	cmp	r7, #0
     a4e:	da06      	bge.n	a5e <cbvprintf+0x5a>
				conv.flag_dash = true;
     a50:	f89d 2014 	ldrb.w	r2, [sp, #20]
     a54:	f042 0204 	orr.w	r2, r2, #4
     a58:	f88d 2014 	strb.w	r2, [sp, #20]
				width = -width;
     a5c:	427f      	negs	r7, r7
		if (conv.prec_star) {
     a5e:	075a      	lsls	r2, r3, #29
     a60:	d515      	bpl.n	a8e <cbvprintf+0x8a>
			int arg = va_arg(ap, int);
     a62:	f854 bb04 	ldr.w	fp, [r4], #4
			if (arg < 0) {
     a66:	f1bb 0f00 	cmp.w	fp, #0
     a6a:	da14      	bge.n	a96 <cbvprintf+0x92>
				conv.prec_present = false;
     a6c:	f89d 3015 	ldrb.w	r3, [sp, #21]
     a70:	f36f 0341 	bfc	r3, #1, #1
     a74:	f88d 3015 	strb.w	r3, [sp, #21]
		int precision = -1;
     a78:	f04f 3bff 	mov.w	fp, #4294967295	; 0xffffffff
     a7c:	e00b      	b.n	a96 <cbvprintf+0x92>
		} else if (conv.width_present) {
     a7e:	f99d 2014 	ldrsb.w	r2, [sp, #20]
     a82:	2a00      	cmp	r2, #0
			width = conv.width_value;
     a84:	bfb4      	ite	lt
     a86:	9f06      	ldrlt	r7, [sp, #24]
		int width = -1;
     a88:	f04f 37ff 	movge.w	r7, #4294967295	; 0xffffffff
     a8c:	e7e7      	b.n	a5e <cbvprintf+0x5a>
		} else if (conv.prec_present) {
     a8e:	079b      	lsls	r3, r3, #30
     a90:	d5f2      	bpl.n	a78 <cbvprintf+0x74>
			precision = conv.prec_value;
     a92:	f8dd b01c 	ldr.w	fp, [sp, #28]
			= (enum specifier_cat_enum)conv.specifier_cat;
     a96:	f89d 3016 	ldrb.w	r3, [sp, #22]
			= (enum length_mod_enum)conv.length_mod;
     a9a:	f89d c015 	ldrb.w	ip, [sp, #21]
		enum specifier_cat_enum specifier_cat
     a9e:	f003 0307 	and.w	r3, r3, #7
		conv.pad0_value = 0;
     aa2:	2100      	movs	r1, #0
		if (specifier_cat == SPECIFIER_SINT) {
     aa4:	2b01      	cmp	r3, #1
		conv.pad0_pre_exp = 0;
     aa6:	e9cd 1106 	strd	r1, r1, [sp, #24]
			= (enum length_mod_enum)conv.length_mod;
     aaa:	f3cc 0cc3 	ubfx	ip, ip, #3, #4
		union argument_value value = (union argument_value){
     aae:	468e      	mov	lr, r1
		if (specifier_cat == SPECIFIER_SINT) {
     ab0:	d130      	bne.n	b14 <cbvprintf+0x110>
			switch (length_mod) {
     ab2:	f1ac 0303 	sub.w	r3, ip, #3
     ab6:	2b04      	cmp	r3, #4
     ab8:	d81a      	bhi.n	af0 <cbvprintf+0xec>
     aba:	e8df f003 	tbb	[pc, r3]
     abe:	3b03      	.short	0x3b03
     ac0:	193b      	.short	0x193b
     ac2:	19          	.byte	0x19
     ac3:	00          	.byte	0x00
				value.sint = va_arg(ap, long);
     ac4:	f854 1b04 	ldr.w	r1, [r4], #4
     ac8:	17cb      	asrs	r3, r1, #31
				value.sint = (short)value.sint;
     aca:	469e      	mov	lr, r3
		if (conv.invalid || conv.unsupported) {
     acc:	f89d 3014 	ldrb.w	r3, [sp, #20]
     ad0:	f013 0603 	ands.w	r6, r3, #3
     ad4:	d050      	beq.n	b78 <cbvprintf+0x174>
			OUTS(sp, fp);
     ad6:	9b02      	ldr	r3, [sp, #8]
     ad8:	4652      	mov	r2, sl
     ada:	4649      	mov	r1, r9
     adc:	4640      	mov	r0, r8
     ade:	f004 fb48 	bl	5172 <outs>
     ae2:	2800      	cmp	r0, #0
     ae4:	f2c0 80a7 	blt.w	c36 <cbvprintf+0x232>
     ae8:	4405      	add	r5, r0
			OUTS(bps, bpe);
     aea:	f8dd a008 	ldr.w	sl, [sp, #8]
     aee:	e791      	b.n	a14 <cbvprintf+0x10>
					(sint_value_type)va_arg(ap, ptrdiff_t);
     af0:	f854 1b04 	ldr.w	r1, [r4], #4
			if (length_mod == LENGTH_HH) {
     af4:	f1bc 0f01 	cmp.w	ip, #1
					(sint_value_type)va_arg(ap, ptrdiff_t);
     af8:	ea4f 73e1 	mov.w	r3, r1, asr #31
				value.sint =
     afc:	469e      	mov	lr, r3
			if (length_mod == LENGTH_HH) {
     afe:	d102      	bne.n	b06 <cbvprintf+0x102>
				value.uint = (unsigned char)value.uint;
     b00:	f001 01ff 	and.w	r1, r1, #255	; 0xff
     b04:	e013      	b.n	b2e <cbvprintf+0x12a>
			} else if (length_mod == LENGTH_H) {
     b06:	f1bc 0f02 	cmp.w	ip, #2
     b0a:	d1df      	bne.n	acc <cbvprintf+0xc8>
				value.sint = (short)value.sint;
     b0c:	b20a      	sxth	r2, r1
     b0e:	17d3      	asrs	r3, r2, #31
     b10:	4611      	mov	r1, r2
     b12:	e7da      	b.n	aca <cbvprintf+0xc6>
		} else if (specifier_cat == SPECIFIER_UINT) {
     b14:	2b02      	cmp	r3, #2
     b16:	d122      	bne.n	b5e <cbvprintf+0x15a>
			switch (length_mod) {
     b18:	f1ac 0303 	sub.w	r3, ip, #3
     b1c:	2b04      	cmp	r3, #4
     b1e:	d812      	bhi.n	b46 <cbvprintf+0x142>
     b20:	e8df f003 	tbb	[pc, r3]
     b24:	11080803 	.word	0x11080803
     b28:	11          	.byte	0x11
     b29:	00          	.byte	0x00
				value.uint = va_arg(ap, unsigned long);
     b2a:	f854 1b04 	ldr.w	r1, [r4], #4
				value.uint = (unsigned short)value.uint;
     b2e:	f04f 0e00 	mov.w	lr, #0
     b32:	e7cb      	b.n	acc <cbvprintf+0xc8>
					(uint_value_type)va_arg(ap,
     b34:	1de3      	adds	r3, r4, #7
     b36:	f023 0307 	bic.w	r3, r3, #7
     b3a:	461c      	mov	r4, r3
				value.uint =
     b3c:	f8d3 e004 	ldr.w	lr, [r3, #4]
     b40:	f854 1b08 	ldr.w	r1, [r4], #8
				break;
     b44:	e7c2      	b.n	acc <cbvprintf+0xc8>
			if (length_mod == LENGTH_HH) {
     b46:	f1bc 0f01 	cmp.w	ip, #1
					(uint_value_type)va_arg(ap, size_t);
     b4a:	f854 1b04 	ldr.w	r1, [r4], #4
				value.uint =
     b4e:	f04f 0e00 	mov.w	lr, #0
			if (length_mod == LENGTH_HH) {
     b52:	d0d5      	beq.n	b00 <cbvprintf+0xfc>
			} else if (length_mod == LENGTH_H) {
     b54:	f1bc 0f02 	cmp.w	ip, #2
     b58:	d1b8      	bne.n	acc <cbvprintf+0xc8>
				value.uint = (unsigned short)value.uint;
     b5a:	b289      	uxth	r1, r1
     b5c:	e7e7      	b.n	b2e <cbvprintf+0x12a>
		} else if (specifier_cat == SPECIFIER_FP) {
     b5e:	2b04      	cmp	r3, #4
     b60:	d105      	bne.n	b6e <cbvprintf+0x16a>
			if (length_mod == LENGTH_UPPER_L) {
     b62:	3407      	adds	r4, #7
     b64:	f024 0407 	bic.w	r4, r4, #7
     b68:	e8f4 2302 	ldrd	r2, r3, [r4], #8
     b6c:	e7d0      	b.n	b10 <cbvprintf+0x10c>
		} else if (specifier_cat == SPECIFIER_PTR) {
     b6e:	2b03      	cmp	r3, #3
			value.ptr = va_arg(ap, void *);
     b70:	bf08      	it	eq
     b72:	f854 1b04 	ldreq.w	r1, [r4], #4
     b76:	e7a9      	b.n	acc <cbvprintf+0xc8>
		switch (conv.specifier) {
     b78:	f89d 0017 	ldrb.w	r0, [sp, #23]
     b7c:	2878      	cmp	r0, #120	; 0x78
     b7e:	d8b4      	bhi.n	aea <cbvprintf+0xe6>
     b80:	2862      	cmp	r0, #98	; 0x62
     b82:	d821      	bhi.n	bc8 <cbvprintf+0x1c4>
     b84:	2825      	cmp	r0, #37	; 0x25
     b86:	d051      	beq.n	c2c <cbvprintf+0x228>
     b88:	2858      	cmp	r0, #88	; 0x58
     b8a:	d1ae      	bne.n	aea <cbvprintf+0xe6>
			bps = encode_uint(value.uint, &conv, buf, bpe);
     b8c:	f10d 0336 	add.w	r3, sp, #54	; 0x36
     b90:	9300      	str	r3, [sp, #0]
     b92:	4608      	mov	r0, r1
     b94:	ab08      	add	r3, sp, #32
     b96:	aa05      	add	r2, sp, #20
     b98:	4671      	mov	r1, lr
     b9a:	f004 fa9f 	bl	50dc <encode_uint>
     b9e:	4682      	mov	sl, r0
			if (precision >= 0) {
     ba0:	f1bb 0f00 	cmp.w	fp, #0
     ba4:	f10d 0136 	add.w	r1, sp, #54	; 0x36
     ba8:	db0c      	blt.n	bc4 <cbvprintf+0x1c0>
				conv.flag_zero = false;
     baa:	f89d 2014 	ldrb.w	r2, [sp, #20]
				size_t len = bpe - bps;
     bae:	eba1 030a 	sub.w	r3, r1, sl
				conv.flag_zero = false;
     bb2:	f36f 1286 	bfc	r2, #6, #1
				if (len < (size_t)precision) {
     bb6:	459b      	cmp	fp, r3
				conv.flag_zero = false;
     bb8:	f88d 2014 	strb.w	r2, [sp, #20]
				if (len < (size_t)precision) {
     bbc:	d902      	bls.n	bc4 <cbvprintf+0x1c0>
					conv.pad0_value = precision - (int)len;
     bbe:	ebab 0303 	sub.w	r3, fp, r3
     bc2:	9306      	str	r3, [sp, #24]
		const char *bpe = buf + sizeof(buf);
     bc4:	468b      	mov	fp, r1
     bc6:	e048      	b.n	c5a <cbvprintf+0x256>
     bc8:	3863      	subs	r0, #99	; 0x63
     bca:	2815      	cmp	r0, #21
     bcc:	d88d      	bhi.n	aea <cbvprintf+0xe6>
     bce:	a201      	add	r2, pc, #4	; (adr r2, bd4 <cbvprintf+0x1d0>)
     bd0:	f852 f020 	ldr.w	pc, [r2, r0, lsl #2]
     bd4:	00000c63 	.word	0x00000c63
     bd8:	00000cc1 	.word	0x00000cc1
     bdc:	00000aeb 	.word	0x00000aeb
     be0:	00000aeb 	.word	0x00000aeb
     be4:	00000aeb 	.word	0x00000aeb
     be8:	00000aeb 	.word	0x00000aeb
     bec:	00000cc1 	.word	0x00000cc1
     bf0:	00000aeb 	.word	0x00000aeb
     bf4:	00000aeb 	.word	0x00000aeb
     bf8:	00000aeb 	.word	0x00000aeb
     bfc:	00000aeb 	.word	0x00000aeb
     c00:	00000d1b 	.word	0x00000d1b
     c04:	00000ce9 	.word	0x00000ce9
     c08:	00000ced 	.word	0x00000ced
     c0c:	00000aeb 	.word	0x00000aeb
     c10:	00000aeb 	.word	0x00000aeb
     c14:	00000c3d 	.word	0x00000c3d
     c18:	00000aeb 	.word	0x00000aeb
     c1c:	00000ce9 	.word	0x00000ce9
     c20:	00000aeb 	.word	0x00000aeb
     c24:	00000aeb 	.word	0x00000aeb
     c28:	00000ce9 	.word	0x00000ce9
			OUTC('%');
     c2c:	4649      	mov	r1, r9
     c2e:	47c0      	blx	r8
     c30:	2800      	cmp	r0, #0
     c32:	f6bf aefe 	bge.w	a32 <cbvprintf+0x2e>
#undef OUTS
#undef OUTC
}
     c36:	b00f      	add	sp, #60	; 0x3c
     c38:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			size_t len = strlen(bps);
     c3c:	4608      	mov	r0, r1
			bps = (const char *)value.ptr;
     c3e:	468a      	mov	sl, r1
			size_t len = strlen(bps);
     c40:	9103      	str	r1, [sp, #12]
     c42:	f004 fe3e 	bl	58c2 <strlen>
			if ((precision >= 0)
     c46:	f1bb 0f00 	cmp.w	fp, #0
     c4a:	9903      	ldr	r1, [sp, #12]
     c4c:	db02      	blt.n	c54 <cbvprintf+0x250>
     c4e:	4558      	cmp	r0, fp
     c50:	bf28      	it	cs
     c52:	4658      	movcs	r0, fp
			bpe = bps + len;
     c54:	eb01 0b00 	add.w	fp, r1, r0
		char sign = 0;
     c58:	2600      	movs	r6, #0
		if (bps == NULL) {
     c5a:	f1ba 0f00 	cmp.w	sl, #0
     c5e:	d107      	bne.n	c70 <cbvprintf+0x26c>
     c60:	e743      	b.n	aea <cbvprintf+0xe6>
			buf[0] = value.uint;
     c62:	f88d 1020 	strb.w	r1, [sp, #32]
			break;
     c66:	2600      	movs	r6, #0
			bpe = buf + 1;
     c68:	f10d 0b21 	add.w	fp, sp, #33	; 0x21
			bps = buf;
     c6c:	f10d 0a20 	add.w	sl, sp, #32
		size_t nj_len = (bpe - bps);
     c70:	ebab 030a 	sub.w	r3, fp, sl
		if (sign != 0) {
     c74:	b106      	cbz	r6, c78 <cbvprintf+0x274>
			nj_len += 1U;
     c76:	3301      	adds	r3, #1
		if (conv.altform_0c) {
     c78:	f89d 2016 	ldrb.w	r2, [sp, #22]
     c7c:	06d0      	lsls	r0, r2, #27
     c7e:	d567      	bpl.n	d50 <cbvprintf+0x34c>
			nj_len += 2U;
     c80:	3302      	adds	r3, #2
		if (conv.pad_fp) {
     c82:	0652      	lsls	r2, r2, #25
		nj_len += conv.pad0_value;
     c84:	9906      	ldr	r1, [sp, #24]
			nj_len += conv.pad0_pre_exp;
     c86:	bf48      	it	mi
     c88:	9a07      	ldrmi	r2, [sp, #28]
		nj_len += conv.pad0_value;
     c8a:	440b      	add	r3, r1
			nj_len += conv.pad0_pre_exp;
     c8c:	bf48      	it	mi
     c8e:	189b      	addmi	r3, r3, r2
		if (width > 0) {
     c90:	2f00      	cmp	r7, #0
     c92:	dd70      	ble.n	d76 <cbvprintf+0x372>
			if (!conv.flag_dash) {
     c94:	f89d 2014 	ldrb.w	r2, [sp, #20]
			width -= (int)nj_len;
     c98:	1aff      	subs	r7, r7, r3
			if (!conv.flag_dash) {
     c9a:	f3c2 0380 	ubfx	r3, r2, #2, #1
     c9e:	9303      	str	r3, [sp, #12]
     ca0:	0753      	lsls	r3, r2, #29
     ca2:	d468      	bmi.n	d76 <cbvprintf+0x372>
				if (conv.flag_zero) {
     ca4:	0650      	lsls	r0, r2, #25
     ca6:	f140 80a3 	bpl.w	df0 <cbvprintf+0x3ec>
					if (sign != 0) {
     caa:	b13e      	cbz	r6, cbc <cbvprintf+0x2b8>
						OUTC(sign);
     cac:	4649      	mov	r1, r9
     cae:	4630      	mov	r0, r6
     cb0:	47c0      	blx	r8
     cb2:	2800      	cmp	r0, #0
     cb4:	dbbf      	blt.n	c36 <cbvprintf+0x232>
						sign = 0;
     cb6:	9b03      	ldr	r3, [sp, #12]
						OUTC(sign);
     cb8:	3501      	adds	r5, #1
						sign = 0;
     cba:	461e      	mov	r6, r3
					pad = '0';
     cbc:	2330      	movs	r3, #48	; 0x30
     cbe:	e098      	b.n	df2 <cbvprintf+0x3ee>
			if (conv.flag_plus) {
     cc0:	071e      	lsls	r6, r3, #28
     cc2:	d40f      	bmi.n	ce4 <cbvprintf+0x2e0>
				sign = ' ';
     cc4:	f013 0610 	ands.w	r6, r3, #16
     cc8:	bf18      	it	ne
     cca:	2620      	movne	r6, #32
			if (value.sint < 0) {
     ccc:	2900      	cmp	r1, #0
     cce:	f17e 0000 	sbcs.w	r0, lr, #0
     cd2:	f6bf af5b 	bge.w	b8c <cbvprintf+0x188>
				value.uint = -value.sint;
     cd6:	424a      	negs	r2, r1
     cd8:	eb6e 034e 	sbc.w	r3, lr, lr, lsl #1
     cdc:	4611      	mov	r1, r2
     cde:	469e      	mov	lr, r3
				sign = '-';
     ce0:	262d      	movs	r6, #45	; 0x2d
     ce2:	e753      	b.n	b8c <cbvprintf+0x188>
				sign = '+';
     ce4:	262b      	movs	r6, #43	; 0x2b
     ce6:	e7f1      	b.n	ccc <cbvprintf+0x2c8>
		switch (conv.specifier) {
     ce8:	2600      	movs	r6, #0
     cea:	e74f      	b.n	b8c <cbvprintf+0x188>
			if (value.ptr != NULL) {
     cec:	b351      	cbz	r1, d44 <cbvprintf+0x340>
				bps = encode_uint((uintptr_t)value.ptr, &conv,
     cee:	f10d 0336 	add.w	r3, sp, #54	; 0x36
     cf2:	9300      	str	r3, [sp, #0]
     cf4:	4608      	mov	r0, r1
     cf6:	ab08      	add	r3, sp, #32
     cf8:	aa05      	add	r2, sp, #20
     cfa:	2100      	movs	r1, #0
     cfc:	f004 f9ee 	bl	50dc <encode_uint>
				conv.altform_0c = true;
     d00:	f8bd 3016 	ldrh.w	r3, [sp, #22]
     d04:	f003 03ef 	and.w	r3, r3, #239	; 0xef
     d08:	f443 43f0 	orr.w	r3, r3, #30720	; 0x7800
     d0c:	f043 0310 	orr.w	r3, r3, #16
				bps = encode_uint((uintptr_t)value.ptr, &conv,
     d10:	4682      	mov	sl, r0
				conv.altform_0c = true;
     d12:	f8ad 3016 	strh.w	r3, [sp, #22]
		char sign = 0;
     d16:	2600      	movs	r6, #0
				goto prec_int_pad0;
     d18:	e742      	b.n	ba0 <cbvprintf+0x19c>
	switch ((enum length_mod_enum)conv->length_mod) {
     d1a:	f1bc 0f07 	cmp.w	ip, #7
     d1e:	f63f aee4 	bhi.w	aea <cbvprintf+0xe6>
     d22:	e8df f00c 	tbb	[pc, ip]
     d26:	040d      	.short	0x040d
     d28:	08080d06 	.word	0x08080d06
     d2c:	0d0d      	.short	0x0d0d
		*(signed char *)dp = (signed char)count;
     d2e:	700d      	strb	r5, [r1, #0]
		break;
     d30:	e6db      	b.n	aea <cbvprintf+0xe6>
		*(short *)dp = (short)count;
     d32:	800d      	strh	r5, [r1, #0]
		break;
     d34:	e6d9      	b.n	aea <cbvprintf+0xe6>
		*(intmax_t *)dp = (intmax_t)count;
     d36:	462a      	mov	r2, r5
     d38:	17eb      	asrs	r3, r5, #31
     d3a:	e9c1 2300 	strd	r2, r3, [r1]
		break;
     d3e:	e6d4      	b.n	aea <cbvprintf+0xe6>
		*(ptrdiff_t *)dp = (ptrdiff_t)count;
     d40:	600d      	str	r5, [r1, #0]
		break;
     d42:	e6d2      	b.n	aea <cbvprintf+0xe6>
			bpe = bps + 5;
     d44:	f8df b0c0 	ldr.w	fp, [pc, #192]	; e08 <cbvprintf+0x404>
     d48:	460e      	mov	r6, r1
			bps = "(nil)";
     d4a:	f1ab 0a05 	sub.w	sl, fp, #5
     d4e:	e78f      	b.n	c70 <cbvprintf+0x26c>
		} else if (conv.altform_0) {
     d50:	0711      	lsls	r1, r2, #28
			nj_len += 1U;
     d52:	bf48      	it	mi
     d54:	3301      	addmi	r3, #1
     d56:	e794      	b.n	c82 <cbvprintf+0x27e>
					OUTC(pad);
     d58:	4618      	mov	r0, r3
     d5a:	4649      	mov	r1, r9
     d5c:	9303      	str	r3, [sp, #12]
     d5e:	47c0      	blx	r8
     d60:	2800      	cmp	r0, #0
     d62:	9b03      	ldr	r3, [sp, #12]
     d64:	f6ff af67 	blt.w	c36 <cbvprintf+0x232>
				while (width-- > 0) {
     d68:	2f00      	cmp	r7, #0
     d6a:	eba5 0107 	sub.w	r1, r5, r7
     d6e:	f107 37ff 	add.w	r7, r7, #4294967295	; 0xffffffff
     d72:	dcf1      	bgt.n	d58 <cbvprintf+0x354>
     d74:	460d      	mov	r5, r1
		if (sign != 0) {
     d76:	b136      	cbz	r6, d86 <cbvprintf+0x382>
			OUTC(sign);
     d78:	4649      	mov	r1, r9
     d7a:	4630      	mov	r0, r6
     d7c:	47c0      	blx	r8
     d7e:	2800      	cmp	r0, #0
     d80:	f6ff af59 	blt.w	c36 <cbvprintf+0x232>
     d84:	3501      	adds	r5, #1
			if (conv.altform_0c | conv.altform_0) {
     d86:	f89d 3016 	ldrb.w	r3, [sp, #22]
     d8a:	06d9      	lsls	r1, r3, #27
     d8c:	d401      	bmi.n	d92 <cbvprintf+0x38e>
     d8e:	071a      	lsls	r2, r3, #28
     d90:	d506      	bpl.n	da0 <cbvprintf+0x39c>
				OUTC('0');
     d92:	4649      	mov	r1, r9
     d94:	2030      	movs	r0, #48	; 0x30
     d96:	47c0      	blx	r8
     d98:	2800      	cmp	r0, #0
     d9a:	f6ff af4c 	blt.w	c36 <cbvprintf+0x232>
     d9e:	3501      	adds	r5, #1
			if (conv.altform_0c) {
     da0:	f89d 3016 	ldrb.w	r3, [sp, #22]
     da4:	06db      	lsls	r3, r3, #27
     da6:	d507      	bpl.n	db8 <cbvprintf+0x3b4>
				OUTC(conv.specifier);
     da8:	f89d 0017 	ldrb.w	r0, [sp, #23]
     dac:	4649      	mov	r1, r9
     dae:	47c0      	blx	r8
     db0:	2800      	cmp	r0, #0
     db2:	f6ff af40 	blt.w	c36 <cbvprintf+0x232>
     db6:	3501      	adds	r5, #1
			while (pad_len-- > 0) {
     db8:	9e06      	ldr	r6, [sp, #24]
     dba:	442e      	add	r6, r5
     dbc:	1b73      	subs	r3, r6, r5
     dbe:	2b00      	cmp	r3, #0
     dc0:	dc19      	bgt.n	df6 <cbvprintf+0x3f2>
			OUTS(bps, bpe);
     dc2:	465b      	mov	r3, fp
     dc4:	4652      	mov	r2, sl
     dc6:	4649      	mov	r1, r9
     dc8:	4640      	mov	r0, r8
     dca:	f004 f9d2 	bl	5172 <outs>
     dce:	2800      	cmp	r0, #0
     dd0:	f6ff af31 	blt.w	c36 <cbvprintf+0x232>
     dd4:	4405      	add	r5, r0
		while (width > 0) {
     dd6:	442f      	add	r7, r5
     dd8:	1b7b      	subs	r3, r7, r5
     dda:	2b00      	cmp	r3, #0
     ddc:	f77f ae85 	ble.w	aea <cbvprintf+0xe6>
			OUTC(' ');
     de0:	4649      	mov	r1, r9
     de2:	2020      	movs	r0, #32
     de4:	47c0      	blx	r8
     de6:	2800      	cmp	r0, #0
     de8:	f6ff af25 	blt.w	c36 <cbvprintf+0x232>
     dec:	3501      	adds	r5, #1
			--width;
     dee:	e7f3      	b.n	dd8 <cbvprintf+0x3d4>
				char pad = ' ';
     df0:	2320      	movs	r3, #32
     df2:	443d      	add	r5, r7
     df4:	e7b8      	b.n	d68 <cbvprintf+0x364>
				OUTC('0');
     df6:	4649      	mov	r1, r9
     df8:	2030      	movs	r0, #48	; 0x30
     dfa:	47c0      	blx	r8
     dfc:	2800      	cmp	r0, #0
     dfe:	f6ff af1a 	blt.w	c36 <cbvprintf+0x232>
     e02:	3501      	adds	r5, #1
     e04:	e7da      	b.n	dbc <cbvprintf+0x3b8>
     e06:	bf00      	nop
     e08:	000062c9 	.word	0x000062c9

00000e0c <enable_logger>:

K_KERNEL_STACK_DEFINE(logging_stack, CONFIG_LOG_PROCESS_THREAD_STACK_SIZE);
struct k_thread logging_thread;

static int enable_logger(const struct device *arg)
{
     e0c:	b530      	push	{r4, r5, lr}
	ARG_UNUSED(arg);

	if (IS_ENABLED(CONFIG_LOG_PROCESS_THREAD)) {
		k_timer_init(&log_process_thread_timer,
     e0e:	4910      	ldr	r1, [pc, #64]	; (e50 <enable_logger+0x44>)
     e10:	4810      	ldr	r0, [pc, #64]	; (e54 <enable_logger+0x48>)
{
     e12:	b089      	sub	sp, #36	; 0x24
		k_timer_init(&log_process_thread_timer,
     e14:	2200      	movs	r2, #0
     e16:	f005 f802 	bl	5e1e <k_timer_init>
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
     e1a:	4d0f      	ldr	r5, [pc, #60]	; (e58 <enable_logger+0x4c>)
     e1c:	490f      	ldr	r1, [pc, #60]	; (e5c <enable_logger+0x50>)
     e1e:	2200      	movs	r2, #0
     e20:	2300      	movs	r3, #0
     e22:	e9cd 2306 	strd	r2, r3, [sp, #24]
     e26:	2400      	movs	r4, #0
     e28:	230e      	movs	r3, #14
     e2a:	e9cd 3403 	strd	r3, r4, [sp, #12]
     e2e:	e9cd 4401 	strd	r4, r4, [sp, #4]
     e32:	4b0b      	ldr	r3, [pc, #44]	; (e60 <enable_logger+0x54>)
     e34:	9400      	str	r4, [sp, #0]
     e36:	f44f 7240 	mov.w	r2, #768	; 0x300
     e3a:	4628      	mov	r0, r5
     e3c:	f003 fce0 	bl	4800 <z_impl_k_thread_create>
	if (z_syscall_trap()) {
		return (int) arch_syscall_invoke2(*(uintptr_t *)&thread_id, *(uintptr_t *)&value, K_SYSCALL_K_THREAD_NAME_SET);
	}
#endif
	compiler_barrier();
	return z_impl_k_thread_name_set(thread_id, value);
     e40:	4908      	ldr	r1, [pc, #32]	; (e64 <enable_logger+0x58>)
     e42:	4628      	mov	r0, r5
     e44:	f004 ffa2 	bl	5d8c <z_impl_k_thread_name_set>
	} else {
		log_init();
	}

	return 0;
}
     e48:	4620      	mov	r0, r4
     e4a:	b009      	add	sp, #36	; 0x24
     e4c:	bd30      	pop	{r4, r5, pc}
     e4e:	bf00      	nop
     e50:	00000e69 	.word	0x00000e69
     e54:	200000b0 	.word	0x200000b0
     e58:	200000e8 	.word	0x200000e8
     e5c:	200008c0 	.word	0x200008c0
     e60:	00001281 	.word	0x00001281
     e64:	000062ca 	.word	0x000062ca

00000e68 <log_process_thread_timer_expiry_fn>:
		arch_syscall_invoke1(*(uintptr_t *)&sem, K_SYSCALL_K_SEM_GIVE);
		return;
	}
#endif
	compiler_barrier();
	z_impl_k_sem_give(sem);
     e68:	4801      	ldr	r0, [pc, #4]	; (e70 <log_process_thread_timer_expiry_fn+0x8>)
     e6a:	f003 bc4d 	b.w	4708 <z_impl_k_sem_give>
     e6e:	bf00      	nop
     e70:	200000a0 	.word	0x200000a0

00000e74 <log_core_init>:
{
     e74:	b508      	push	{r3, lr}
		log_msg_pool_init();
     e76:	f000 fa65 	bl	1344 <log_msg_pool_init>
		log_list_init(&list);
     e7a:	4809      	ldr	r0, [pc, #36]	; (ea0 <log_core_init+0x2c>)
     e7c:	f004 f990 	bl	51a0 <log_list_init>
		k_mem_slab_init(&log_strdup_pool, log_strdup_pool_buf,
     e80:	2304      	movs	r3, #4
     e82:	2228      	movs	r2, #40	; 0x28
     e84:	4907      	ldr	r1, [pc, #28]	; (ea4 <log_core_init+0x30>)
     e86:	4808      	ldr	r0, [pc, #32]	; (ea8 <log_core_init+0x34>)
     e88:	f004 fe8f 	bl	5baa <k_mem_slab_init>
		timestamp_func = k_cycle_get_32_wrapper;
     e8c:	4b07      	ldr	r3, [pc, #28]	; (eac <log_core_init+0x38>)
     e8e:	4a08      	ldr	r2, [pc, #32]	; (eb0 <log_core_init+0x3c>)
     e90:	601a      	str	r2, [r3, #0]
	log_output_timestamp_freq_set(freq);
     e92:	f44f 4000 	mov.w	r0, #32768	; 0x8000
}
     e96:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	log_output_timestamp_freq_set(freq);
     e9a:	f000 bc9b 	b.w	17d4 <log_output_timestamp_freq_set>
     e9e:	bf00      	nop
     ea0:	2000027c 	.word	0x2000027c
     ea4:	20001980 	.word	0x20001980
     ea8:	20000284 	.word	0x20000284
     eac:	20000004 	.word	0x20000004
     eb0:	000051df 	.word	0x000051df

00000eb4 <dropped_notify>:
{
     eb4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
{
	/* This builtin, as described by Intel, is not a traditional
	 * test-and-set operation, but rather an atomic exchange operation. It
	 * writes value into *ptr, and returns the previous contents of *ptr.
	 */
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
     eb6:	4b0f      	ldr	r3, [pc, #60]	; (ef4 <dropped_notify+0x40>)
     eb8:	f3bf 8f5b 	dmb	ish
     ebc:	2500      	movs	r5, #0
     ebe:	e853 7f00 	ldrex	r7, [r3]
     ec2:	e843 5200 	strex	r2, r5, [r3]
     ec6:	2a00      	cmp	r2, #0
     ec8:	d1f9      	bne.n	ebe <dropped_notify+0xa>
     eca:	f3bf 8f5b 	dmb	ish
 *
 * @return Number of backends.
 */
static inline int log_backend_count_get(void)
{
	return __log_backends_end - __log_backends_start;
     ece:	4c0a      	ldr	r4, [pc, #40]	; (ef8 <dropped_notify+0x44>)
     ed0:	4e0a      	ldr	r6, [pc, #40]	; (efc <dropped_notify+0x48>)
     ed2:	1b36      	subs	r6, r6, r4
     ed4:	1136      	asrs	r6, r6, #4
	for (int i = 0; i < log_backend_count_get(); i++) {
     ed6:	42b5      	cmp	r5, r6
     ed8:	db00      	blt.n	edc <dropped_notify+0x28>
}
     eda:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 */
static inline bool log_backend_is_active(
				const struct log_backend *const backend)
{
	__ASSERT_NO_MSG(backend != NULL);
	return backend->cb->active;
     edc:	6863      	ldr	r3, [r4, #4]
		if (log_backend_is_active(backend)) {
     ede:	795b      	ldrb	r3, [r3, #5]
     ee0:	b12b      	cbz	r3, eee <dropped_notify+0x3a>
	if (backend->api->dropped != NULL) {
     ee2:	6823      	ldr	r3, [r4, #0]
     ee4:	68db      	ldr	r3, [r3, #12]
     ee6:	b113      	cbz	r3, eee <dropped_notify+0x3a>
		backend->api->dropped(backend, cnt);
     ee8:	4639      	mov	r1, r7
     eea:	4620      	mov	r0, r4
     eec:	4798      	blx	r3
	for (int i = 0; i < log_backend_count_get(); i++) {
     eee:	3501      	adds	r5, #1
     ef0:	3410      	adds	r4, #16
     ef2:	e7f0      	b.n	ed6 <dropped_notify+0x22>
     ef4:	20000274 	.word	0x20000274
     ef8:	00006074 	.word	0x00006074
     efc:	00006094 	.word	0x00006094

00000f00 <log_dropped>:
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
     f00:	4b06      	ldr	r3, [pc, #24]	; (f1c <log_dropped+0x1c>)
     f02:	f3bf 8f5b 	dmb	ish
     f06:	e853 2f00 	ldrex	r2, [r3]
     f0a:	3201      	adds	r2, #1
     f0c:	e843 2100 	strex	r1, r2, [r3]
     f10:	2900      	cmp	r1, #0
     f12:	d1f8      	bne.n	f06 <log_dropped+0x6>
     f14:	f3bf 8f5b 	dmb	ish
}
     f18:	4770      	bx	lr
     f1a:	bf00      	nop
     f1c:	20000274 	.word	0x20000274

00000f20 <log_source_name_get>:
 * @return Source ID.
 */
static inline uint32_t log_const_source_id(
				const struct log_source_const_data *data)
{
	return ((uint8_t *)data - (uint8_t *)__log_const_start)/
     f20:	4a04      	ldr	r2, [pc, #16]	; (f34 <log_source_name_get+0x14>)
     f22:	4b05      	ldr	r3, [pc, #20]	; (f38 <log_source_name_get+0x18>)
     f24:	1a9b      	subs	r3, r3, r2
	return src_id < log_sources_count() ? log_name_get(src_id) : NULL;
     f26:	ebb1 0fd3 	cmp.w	r1, r3, lsr #3
	return __log_const_start[source_id].name;
     f2a:	bf34      	ite	cc
     f2c:	f852 0031 	ldrcc.w	r0, [r2, r1, lsl #3]
     f30:	2000      	movcs	r0, #0
}
     f32:	4770      	bx	lr
     f34:	0000602c 	.word	0x0000602c
     f38:	00006074 	.word	0x00006074

00000f3c <log_backend_enable>:
	id += backend - log_backend_get(0);
     f3c:	4b09      	ldr	r3, [pc, #36]	; (f64 <log_backend_enable+0x28>)
	log_backend_id_set(backend, id);
     f3e:	6842      	ldr	r2, [r0, #4]
	id += backend - log_backend_get(0);
     f40:	1ac3      	subs	r3, r0, r3
     f42:	111b      	asrs	r3, r3, #4
     f44:	3301      	adds	r3, #1
{
     f46:	b510      	push	{r4, lr}
	log_backend_id_set(backend, id);
     f48:	7113      	strb	r3, [r2, #4]
	log_backend_activate(backend, ctx);
     f4a:	6843      	ldr	r3, [r0, #4]
	if (!backend_attached) {
     f4c:	4c06      	ldr	r4, [pc, #24]	; (f68 <log_backend_enable+0x2c>)
	backend->cb->ctx = ctx;
     f4e:	6019      	str	r1, [r3, #0]
	backend->cb->active = true;
     f50:	2201      	movs	r2, #1
     f52:	715a      	strb	r2, [r3, #5]
     f54:	7822      	ldrb	r2, [r4, #0]
     f56:	b912      	cbnz	r2, f5e <log_backend_enable+0x22>
     f58:	4804      	ldr	r0, [pc, #16]	; (f6c <log_backend_enable+0x30>)
     f5a:	f003 fbd5 	bl	4708 <z_impl_k_sem_give>
	backend_attached = true;
     f5e:	2301      	movs	r3, #1
     f60:	7023      	strb	r3, [r4, #0]
}
     f62:	bd10      	pop	{r4, pc}
     f64:	00006074 	.word	0x00006074
     f68:	20000488 	.word	0x20000488
     f6c:	200000a0 	.word	0x200000a0

00000f70 <log_init>:
{
     f70:	b570      	push	{r4, r5, r6, lr}
     f72:	4b11      	ldr	r3, [pc, #68]	; (fb8 <log_init+0x48>)
     f74:	f3bf 8f5b 	dmb	ish
     f78:	e853 5f00 	ldrex	r5, [r3]
     f7c:	1c6a      	adds	r2, r5, #1
     f7e:	e843 2100 	strex	r1, r2, [r3]
     f82:	2900      	cmp	r1, #0
     f84:	d1f8      	bne.n	f78 <log_init+0x8>
     f86:	f3bf 8f5b 	dmb	ish
	if (atomic_inc(&initialized) != 0) {
     f8a:	b92d      	cbnz	r5, f98 <log_init+0x28>
	return __log_backends_end - __log_backends_start;
     f8c:	4c0b      	ldr	r4, [pc, #44]	; (fbc <log_init+0x4c>)
     f8e:	4e0c      	ldr	r6, [pc, #48]	; (fc0 <log_init+0x50>)
     f90:	1b36      	subs	r6, r6, r4
     f92:	1136      	asrs	r6, r6, #4
	for (i = 0; i < log_backend_count_get(); i++) {
     f94:	42b5      	cmp	r5, r6
     f96:	db00      	blt.n	f9a <log_init+0x2a>
}
     f98:	bd70      	pop	{r4, r5, r6, pc}
		if (backend->autostart) {
     f9a:	7b23      	ldrb	r3, [r4, #12]
     f9c:	b143      	cbz	r3, fb0 <log_init+0x40>
			if (backend->api->init != NULL) {
     f9e:	6823      	ldr	r3, [r4, #0]
     fa0:	695b      	ldr	r3, [r3, #20]
     fa2:	b103      	cbz	r3, fa6 <log_init+0x36>
				backend->api->init();
     fa4:	4798      	blx	r3
			log_backend_enable(backend, NULL, CONFIG_LOG_MAX_LEVEL);
     fa6:	2204      	movs	r2, #4
     fa8:	2100      	movs	r1, #0
     faa:	4620      	mov	r0, r4
     fac:	f7ff ffc6 	bl	f3c <log_backend_enable>
	for (i = 0; i < log_backend_count_get(); i++) {
     fb0:	3501      	adds	r5, #1
     fb2:	3410      	adds	r4, #16
     fb4:	e7ee      	b.n	f94 <log_init+0x24>
     fb6:	bf00      	nop
     fb8:	20000278 	.word	0x20000278
     fbc:	00006074 	.word	0x00006074
     fc0:	00006094 	.word	0x00006094

00000fc4 <log_strdup>:
	return (((const char *)addr >= (const char *)RO_START) &&
     fc4:	4b16      	ldr	r3, [pc, #88]	; (1020 <CONFIG_FPROTECT_BLOCK_SIZE+0x20>)
     fc6:	4298      	cmp	r0, r3
{
     fc8:	b537      	push	{r0, r1, r2, r4, r5, lr}
     fca:	4604      	mov	r4, r0
	return (((const char *)addr >= (const char *)RO_START) &&
     fcc:	d302      	bcc.n	fd4 <log_strdup+0x10>
	if (IS_ENABLED(CONFIG_LOG_IMMEDIATE) ||
     fce:	4b15      	ldr	r3, [pc, #84]	; (1024 <CONFIG_FPROTECT_BLOCK_SIZE+0x24>)
     fd0:	4298      	cmp	r0, r3
     fd2:	d320      	bcc.n	1016 <CONFIG_FPROTECT_BLOCK_SIZE+0x16>
	err = k_mem_slab_alloc(&log_strdup_pool, (void **)&dup, K_NO_WAIT);
     fd4:	4814      	ldr	r0, [pc, #80]	; (1028 <CONFIG_FPROTECT_BLOCK_SIZE+0x28>)
     fd6:	2200      	movs	r2, #0
     fd8:	2300      	movs	r3, #0
     fda:	a901      	add	r1, sp, #4
     fdc:	f002 feea 	bl	3db4 <k_mem_slab_alloc>
	if (err != 0) {
     fe0:	4605      	mov	r5, r0
     fe2:	b9d8      	cbnz	r0, 101c <CONFIG_FPROTECT_BLOCK_SIZE+0x1c>
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
     fe4:	2201      	movs	r2, #1
     fe6:	9b01      	ldr	r3, [sp, #4]
     fe8:	f3bf 8f5b 	dmb	ish
     fec:	e853 1f00 	ldrex	r1, [r3]
     ff0:	e843 2000 	strex	r0, r2, [r3]
     ff4:	2800      	cmp	r0, #0
     ff6:	d1f9      	bne.n	fec <log_strdup+0x28>
     ff8:	f3bf 8f5b 	dmb	ish
	strncpy(dup->buf, str, sizeof(dup->buf) - 2);
     ffc:	9801      	ldr	r0, [sp, #4]
     ffe:	4621      	mov	r1, r4
    1000:	221f      	movs	r2, #31
    1002:	3004      	adds	r0, #4
    1004:	f004 fc4a 	bl	589c <strncpy>
	dup->buf[sizeof(dup->buf) - 2] = '~';
    1008:	9c01      	ldr	r4, [sp, #4]
    100a:	237e      	movs	r3, #126	; 0x7e
    100c:	f884 3023 	strb.w	r3, [r4, #35]	; 0x23
	dup->buf[sizeof(dup->buf) - 1] = '\0';
    1010:	f884 5024 	strb.w	r5, [r4, #36]	; 0x24
	return dup->buf;
    1014:	3404      	adds	r4, #4
}
    1016:	4620      	mov	r0, r4
    1018:	b003      	add	sp, #12
    101a:	bd30      	pop	{r4, r5, pc}
		return (char *)log_strdup_fail_msg;
    101c:	4c03      	ldr	r4, [pc, #12]	; (102c <CONFIG_FPROTECT_BLOCK_SIZE+0x2c>)
    101e:	e7fa      	b.n	1016 <CONFIG_FPROTECT_BLOCK_SIZE+0x16>
    1020:	00005e94 	.word	0x00005e94
    1024:	00006a5c 	.word	0x00006a5c
    1028:	20000284 	.word	0x20000284
    102c:	000062d2 	.word	0x000062d2

00001030 <log_is_strdup>:
	return PART_OF_ARRAY(log_strdup_pool_buf, (uint8_t *)buf);
    1030:	b148      	cbz	r0, 1046 <log_is_strdup+0x16>
    1032:	4b05      	ldr	r3, [pc, #20]	; (1048 <log_is_strdup+0x18>)
    1034:	4298      	cmp	r0, r3
    1036:	d305      	bcc.n	1044 <log_is_strdup+0x14>
    1038:	33a0      	adds	r3, #160	; 0xa0
    103a:	4298      	cmp	r0, r3
    103c:	bf2c      	ite	cs
    103e:	2000      	movcs	r0, #0
    1040:	2001      	movcc	r0, #1
    1042:	4770      	bx	lr
    1044:	2000      	movs	r0, #0
}
    1046:	4770      	bx	lr
    1048:	20001980 	.word	0x20001980

0000104c <z_impl_log_process>:
{
    104c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (!backend_attached && !bypass) {
    1050:	4b4c      	ldr	r3, [pc, #304]	; (1184 <z_impl_log_process+0x138>)
    1052:	781b      	ldrb	r3, [r3, #0]
{
    1054:	b085      	sub	sp, #20
    1056:	4604      	mov	r4, r0
	if (!backend_attached && !bypass) {
    1058:	b903      	cbnz	r3, 105c <z_impl_log_process+0x10>
    105a:	b360      	cbz	r0, 10b6 <z_impl_log_process+0x6a>
    105c:	f04f 0320 	mov.w	r3, #32
    1060:	f3ef 8611 	mrs	r6, BASEPRI
    1064:	f383 8811 	msr	BASEPRI, r3
    1068:	f3bf 8f6f 	isb	sy
	msg = log_list_head_get(&list);
    106c:	4846      	ldr	r0, [pc, #280]	; (1188 <z_impl_log_process+0x13c>)
    106e:	f004 f8a7 	bl	51c0 <log_list_head_get>
    1072:	4605      	mov	r5, r0
	__asm__ volatile(
    1074:	f386 8811 	msr	BASEPRI, r6
    1078:	f3bf 8f6f 	isb	sy
	if (msg != NULL) {
    107c:	b178      	cbz	r0, 109e <z_impl_log_process+0x52>
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
    107e:	f3bf 8f5b 	dmb	ish
    1082:	4b42      	ldr	r3, [pc, #264]	; (118c <z_impl_log_process+0x140>)
    1084:	e853 2f00 	ldrex	r2, [r3]
    1088:	3a01      	subs	r2, #1
    108a:	e843 2100 	strex	r1, r2, [r3]
    108e:	2900      	cmp	r1, #0
    1090:	d1f8      	bne.n	1084 <z_impl_log_process+0x38>
    1092:	f3bf 8f5b 	dmb	ish
	if (!bypass) {
    1096:	b194      	cbz	r4, 10be <z_impl_log_process+0x72>
	log_msg_put(msg);
    1098:	4628      	mov	r0, r5
    109a:	f004 f99f 	bl	53dc <log_msg_put>
	if (!bypass && dropped_cnt) {
    109e:	b924      	cbnz	r4, 10aa <z_impl_log_process+0x5e>
    10a0:	4b3b      	ldr	r3, [pc, #236]	; (1190 <z_impl_log_process+0x144>)
    10a2:	681b      	ldr	r3, [r3, #0]
    10a4:	b10b      	cbz	r3, 10aa <z_impl_log_process+0x5e>
		dropped_notify();
    10a6:	f7ff ff05 	bl	eb4 <dropped_notify>
	return (log_list_head_peek(&list) != NULL);
    10aa:	4837      	ldr	r0, [pc, #220]	; (1188 <z_impl_log_process+0x13c>)
    10ac:	f004 f886 	bl	51bc <log_list_head_peek>
    10b0:	1e04      	subs	r4, r0, #0
    10b2:	bf18      	it	ne
    10b4:	2401      	movne	r4, #1
}
    10b6:	4620      	mov	r0, r4
    10b8:	b005      	add	sp, #20
    10ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		    !panic_mode) {
    10be:	4b35      	ldr	r3, [pc, #212]	; (1194 <z_impl_log_process+0x148>)
		if (IS_ENABLED(CONFIG_LOG_DETECT_MISSED_STRDUP) &&
    10c0:	781b      	ldrb	r3, [r3, #0]
    10c2:	b9cb      	cbnz	r3, 10f8 <z_impl_log_process+0xac>
 * @retval true  Standard message.
 * @retval false Hexdump message.
 */
static inline bool log_msg_is_std(struct log_msg *msg)
{
	return  (msg->hdr.params.generic.type == LOG_MSG_TYPE_STD);
    10c4:	7a2b      	ldrb	r3, [r5, #8]
	if (!log_msg_is_std(msg)) {
    10c6:	07db      	lsls	r3, r3, #31
    10c8:	d416      	bmi.n	10f8 <z_impl_log_process+0xac>
	msg_str = log_msg_str_get(msg);
    10ca:	f004 f99a 	bl	5402 <log_msg_str_get>
    10ce:	4680      	mov	r8, r0
	mask = z_log_get_s_mask(msg_str, log_msg_nargs_get(msg));
    10d0:	4628      	mov	r0, r5
    10d2:	f004 f961 	bl	5398 <log_msg_nargs_get>
    10d6:	4601      	mov	r1, r0
    10d8:	4640      	mov	r0, r8
    10da:	f004 f884 	bl	51e6 <z_log_get_s_mask>
	return ((uint8_t *)data - (uint8_t *)__log_const_start)/
    10de:	4f2e      	ldr	r7, [pc, #184]	; (1198 <z_impl_log_process+0x14c>)
    10e0:	4b2e      	ldr	r3, [pc, #184]	; (119c <z_impl_log_process+0x150>)
				LOG_ERR(ERR_MSG, idx, src_name, msg_str);
    10e2:	f8df b0d4 	ldr.w	fp, [pc, #212]	; 11b8 <z_impl_log_process+0x16c>
    10e6:	1bdb      	subs	r3, r3, r7
    10e8:	08db      	lsrs	r3, r3, #3
    10ea:	9303      	str	r3, [sp, #12]
    10ec:	4b2c      	ldr	r3, [pc, #176]	; (11a0 <z_impl_log_process+0x154>)
    10ee:	1bdb      	subs	r3, r3, r7
	mask = z_log_get_s_mask(msg_str, log_msg_nargs_get(msg));
    10f0:	4606      	mov	r6, r0
    10f2:	ea4f 0ad3 	mov.w	sl, r3, lsr #3
	while (mask) {
    10f6:	b936      	cbnz	r6, 1106 <z_impl_log_process+0xba>
    10f8:	4e2a      	ldr	r6, [pc, #168]	; (11a4 <z_impl_log_process+0x158>)
    10fa:	4f2b      	ldr	r7, [pc, #172]	; (11a8 <z_impl_log_process+0x15c>)
    10fc:	1bbf      	subs	r7, r7, r6
    10fe:	113f      	asrs	r7, r7, #4
    1100:	f04f 0800 	mov.w	r8, #0
    1104:	e03a      	b.n	117c <z_impl_log_process+0x130>
		idx = 31 - __builtin_clz(mask);
    1106:	fab6 f186 	clz	r1, r6
    110a:	f1c1 091f 	rsb	r9, r1, #31
		str = (const char *)log_msg_arg_get(msg, idx);
    110e:	4649      	mov	r1, r9
    1110:	4628      	mov	r0, r5
    1112:	f004 f944 	bl	539e <log_msg_arg_get>
	return (((const char *)addr >= (const char *)RO_START) &&
    1116:	4b25      	ldr	r3, [pc, #148]	; (11ac <z_impl_log_process+0x160>)
    1118:	4298      	cmp	r0, r3
		str = (const char *)log_msg_arg_get(msg, idx);
    111a:	4601      	mov	r1, r0
	return (((const char *)addr >= (const char *)RO_START) &&
    111c:	d302      	bcc.n	1124 <z_impl_log_process+0xd8>
		if (!is_rodata(str) && !log_is_strdup(str) &&
    111e:	4b24      	ldr	r3, [pc, #144]	; (11b0 <z_impl_log_process+0x164>)
    1120:	4298      	cmp	r0, r3
    1122:	d31a      	bcc.n	115a <z_impl_log_process+0x10e>
    1124:	4608      	mov	r0, r1
    1126:	f7ff ff83 	bl	1030 <log_is_strdup>
    112a:	4602      	mov	r2, r0
    112c:	b9a8      	cbnz	r0, 115a <z_impl_log_process+0x10e>
    112e:	4b21      	ldr	r3, [pc, #132]	; (11b4 <z_impl_log_process+0x168>)
    1130:	4299      	cmp	r1, r3
    1132:	d012      	beq.n	115a <z_impl_log_process+0x10e>
	return msg->hdr.ids.source_id;
    1134:	896b      	ldrh	r3, [r5, #10]
	return src_id < log_sources_count() ? log_name_get(src_id) : NULL;
    1136:	9903      	ldr	r1, [sp, #12]
    1138:	f3c3 1389 	ubfx	r3, r3, #6, #10
    113c:	428b      	cmp	r3, r1
	return __log_const_start[source_id].name;
    113e:	bf38      	it	cc
    1140:	f857 2033 	ldrcc.w	r2, [r7, r3, lsl #3]
				LOG_ERR(ERR_MSG, idx, src_name, msg_str);
    1144:	ea4f 138a 	mov.w	r3, sl, lsl #6
    1148:	f043 0301 	orr.w	r3, r3, #1
    114c:	f8ad 3000 	strh.w	r3, [sp]
    1150:	4649      	mov	r1, r9
    1152:	4643      	mov	r3, r8
    1154:	4658      	mov	r0, fp
    1156:	f004 f8a0 	bl	529a <log_3>
		mask &= ~BIT(idx);
    115a:	2101      	movs	r1, #1
    115c:	fa01 f109 	lsl.w	r1, r1, r9
    1160:	ea26 0601 	bic.w	r6, r6, r1
    1164:	e7c7      	b.n	10f6 <z_impl_log_process+0xaa>
	return backend->cb->active;
    1166:	6873      	ldr	r3, [r6, #4]
			if (log_backend_is_active(backend) &&
    1168:	795b      	ldrb	r3, [r3, #5]
    116a:	b123      	cbz	r3, 1176 <z_impl_log_process+0x12a>
	backend->api->put(backend, msg);
    116c:	6833      	ldr	r3, [r6, #0]
    116e:	4629      	mov	r1, r5
    1170:	681b      	ldr	r3, [r3, #0]
    1172:	4630      	mov	r0, r6
    1174:	4798      	blx	r3
		for (int i = 0; i < log_backend_count_get(); i++) {
    1176:	f108 0801 	add.w	r8, r8, #1
    117a:	3610      	adds	r6, #16
    117c:	45b8      	cmp	r8, r7
    117e:	dbf2      	blt.n	1166 <z_impl_log_process+0x11a>
    1180:	e78a      	b.n	1098 <z_impl_log_process+0x4c>
    1182:	bf00      	nop
    1184:	20000488 	.word	0x20000488
    1188:	2000027c 	.word	0x2000027c
    118c:	20000270 	.word	0x20000270
    1190:	20000274 	.word	0x20000274
    1194:	20000489 	.word	0x20000489
    1198:	0000602c 	.word	0x0000602c
    119c:	00006074 	.word	0x00006074
    11a0:	0000603c 	.word	0x0000603c
    11a4:	00006074 	.word	0x00006074
    11a8:	00006094 	.word	0x00006094
    11ac:	00005e94 	.word	0x00005e94
    11b0:	00006a5c 	.word	0x00006a5c
    11b4:	000062d2 	.word	0x000062d2
    11b8:	000062ec 	.word	0x000062ec

000011bc <msg_finalize>:
	msg->hdr.timestamp = timestamp_func();
    11bc:	4b29      	ldr	r3, [pc, #164]	; (1264 <msg_finalize+0xa8>)
{
    11be:	b573      	push	{r0, r1, r4, r5, r6, lr}
	msg->hdr.timestamp = timestamp_func();
    11c0:	681b      	ldr	r3, [r3, #0]
	msg->hdr.ids = src_level;
    11c2:	8141      	strh	r1, [r0, #10]
{
    11c4:	4604      	mov	r4, r0
	msg->hdr.timestamp = timestamp_func();
    11c6:	4798      	blx	r3
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
    11c8:	4d27      	ldr	r5, [pc, #156]	; (1268 <msg_finalize+0xac>)
    11ca:	60e0      	str	r0, [r4, #12]
    11cc:	f3bf 8f5b 	dmb	ish
    11d0:	e855 3f00 	ldrex	r3, [r5]
    11d4:	3301      	adds	r3, #1
    11d6:	e845 3200 	strex	r2, r3, [r5]
    11da:	2a00      	cmp	r2, #0
    11dc:	d1f8      	bne.n	11d0 <msg_finalize+0x14>
    11de:	f3bf 8f5b 	dmb	ish
	__asm__ volatile(
    11e2:	f04f 0320 	mov.w	r3, #32
    11e6:	f3ef 8611 	mrs	r6, BASEPRI
    11ea:	f383 8811 	msr	BASEPRI, r3
    11ee:	f3bf 8f6f 	isb	sy
	log_list_add_tail(&list, msg);
    11f2:	481e      	ldr	r0, [pc, #120]	; (126c <msg_finalize+0xb0>)
    11f4:	4621      	mov	r1, r4
    11f6:	f003 ffd7 	bl	51a8 <log_list_add_tail>
	__asm__ volatile(
    11fa:	f386 8811 	msr	BASEPRI, r6
    11fe:	f3bf 8f6f 	isb	sy
	if (panic_mode) {
    1202:	4b1b      	ldr	r3, [pc, #108]	; (1270 <msg_finalize+0xb4>)
    1204:	781b      	ldrb	r3, [r3, #0]
    1206:	b183      	cbz	r3, 122a <msg_finalize+0x6e>
	__asm__ volatile(
    1208:	f04f 0320 	mov.w	r3, #32
    120c:	f3ef 8411 	mrs	r4, BASEPRI
    1210:	f383 8811 	msr	BASEPRI, r3
    1214:	f3bf 8f6f 	isb	sy
	if (z_syscall_trap()) {
		return (bool) arch_syscall_invoke1(*(uintptr_t *)&bypass, K_SYSCALL_LOG_PROCESS);
	}
#endif
	compiler_barrier();
	return z_impl_log_process(bypass);
    1218:	2000      	movs	r0, #0
    121a:	f7ff ff17 	bl	104c <z_impl_log_process>
	__asm__ volatile(
    121e:	f384 8811 	msr	BASEPRI, r4
    1222:	f3bf 8f6f 	isb	sy
}
    1226:	b002      	add	sp, #8
    1228:	bd70      	pop	{r4, r5, r6, pc}
	} else if (proc_tid != NULL && buffered_cnt == 1) {
    122a:	4a12      	ldr	r2, [pc, #72]	; (1274 <msg_finalize+0xb8>)
    122c:	682b      	ldr	r3, [r5, #0]
    122e:	6812      	ldr	r2, [r2, #0]
    1230:	2a00      	cmp	r2, #0
    1232:	d0f8      	beq.n	1226 <msg_finalize+0x6a>
    1234:	2b01      	cmp	r3, #1
    1236:	d10a      	bne.n	124e <msg_finalize+0x92>
	z_impl_k_timer_start(timer, duration, period);
    1238:	2200      	movs	r2, #0
    123a:	2300      	movs	r3, #0
    123c:	e9cd 2300 	strd	r2, r3, [sp]
    1240:	480d      	ldr	r0, [pc, #52]	; (1278 <msg_finalize+0xbc>)
    1242:	f44f 4200 	mov.w	r2, #32768	; 0x8000
    1246:	2300      	movs	r3, #0
    1248:	f003 fcfc 	bl	4c44 <z_impl_k_timer_start>
    124c:	e7eb      	b.n	1226 <msg_finalize+0x6a>
		if ((buffered_cnt == CONFIG_LOG_PROCESS_TRIGGER_THRESHOLD) &&
    124e:	2b0a      	cmp	r3, #10
    1250:	d1e9      	bne.n	1226 <msg_finalize+0x6a>
	z_impl_k_timer_stop(timer);
    1252:	4809      	ldr	r0, [pc, #36]	; (1278 <msg_finalize+0xbc>)
    1254:	f004 fdef 	bl	5e36 <z_impl_k_timer_stop>
	z_impl_k_sem_give(sem);
    1258:	4808      	ldr	r0, [pc, #32]	; (127c <msg_finalize+0xc0>)
}
    125a:	b002      	add	sp, #8
    125c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    1260:	f003 ba52 	b.w	4708 <z_impl_k_sem_give>
    1264:	20000004 	.word	0x20000004
    1268:	20000270 	.word	0x20000270
    126c:	2000027c 	.word	0x2000027c
    1270:	20000489 	.word	0x20000489
    1274:	200002a0 	.word	0x200002a0
    1278:	200000b0 	.word	0x200000b0
    127c:	200000a0 	.word	0x200000a0

00001280 <log_process_thread_func>:
{
    1280:	b510      	push	{r4, lr}
	log_init();
    1282:	f7ff fe75 	bl	f70 <log_init>
	return z_impl_k_current_get();
    1286:	f003 fa39 	bl	46fc <z_impl_k_current_get>
	proc_tid = process_tid;
    128a:	4b0c      	ldr	r3, [pc, #48]	; (12bc <log_process_thread_func+0x3c>)
    128c:	6018      	str	r0, [r3, #0]
	if (CONFIG_LOG_PROCESS_TRIGGER_THRESHOLD &&
    128e:	b130      	cbz	r0, 129e <log_process_thread_func+0x1e>
	    buffered_cnt >= CONFIG_LOG_PROCESS_TRIGGER_THRESHOLD) {
    1290:	4b0b      	ldr	r3, [pc, #44]	; (12c0 <log_process_thread_func+0x40>)
	    process_tid &&
    1292:	681b      	ldr	r3, [r3, #0]
    1294:	2b09      	cmp	r3, #9
    1296:	dd02      	ble.n	129e <log_process_thread_func+0x1e>
	z_impl_k_sem_give(sem);
    1298:	480a      	ldr	r0, [pc, #40]	; (12c4 <log_process_thread_func+0x44>)
    129a:	f003 fa35 	bl	4708 <z_impl_k_sem_give>
	return z_impl_k_sem_take(sem, timeout);
    129e:	4c09      	ldr	r4, [pc, #36]	; (12c4 <log_process_thread_func+0x44>)
    12a0:	2000      	movs	r0, #0
    12a2:	f7ff fed3 	bl	104c <z_impl_log_process>
		if (log_process(false) == false) {
    12a6:	2800      	cmp	r0, #0
    12a8:	d1fa      	bne.n	12a0 <log_process_thread_func+0x20>
    12aa:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    12ae:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    12b2:	4620      	mov	r0, r4
    12b4:	f003 fa48 	bl	4748 <z_impl_k_sem_take>
    12b8:	e7f2      	b.n	12a0 <log_process_thread_func+0x20>
    12ba:	bf00      	nop
    12bc:	200002a0 	.word	0x200002a0
    12c0:	20000270 	.word	0x20000270
    12c4:	200000a0 	.word	0x200000a0

000012c8 <z_impl_log_panic>:
{
    12c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (panic_mode) {
    12ca:	4f0e      	ldr	r7, [pc, #56]	; (1304 <z_impl_log_panic+0x3c>)
    12cc:	783d      	ldrb	r5, [r7, #0]
    12ce:	b975      	cbnz	r5, 12ee <z_impl_log_panic+0x26>
	return __log_backends_end - __log_backends_start;
    12d0:	4c0d      	ldr	r4, [pc, #52]	; (1308 <z_impl_log_panic+0x40>)
    12d2:	4e0e      	ldr	r6, [pc, #56]	; (130c <z_impl_log_panic+0x44>)
	log_init();
    12d4:	f7ff fe4c 	bl	f70 <log_init>
    12d8:	1b36      	subs	r6, r6, r4
    12da:	1136      	asrs	r6, r6, #4
	for (int i = 0; i < log_backend_count_get(); i++) {
    12dc:	42b5      	cmp	r5, r6
    12de:	db07      	blt.n	12f0 <z_impl_log_panic+0x28>
    12e0:	2000      	movs	r0, #0
    12e2:	f7ff feb3 	bl	104c <z_impl_log_process>
		while (log_process(false) == true) {
    12e6:	2800      	cmp	r0, #0
    12e8:	d1fa      	bne.n	12e0 <z_impl_log_panic+0x18>
	panic_mode = true;
    12ea:	2301      	movs	r3, #1
    12ec:	703b      	strb	r3, [r7, #0]
}
    12ee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return backend->cb->active;
    12f0:	6863      	ldr	r3, [r4, #4]
		if (log_backend_is_active(backend)) {
    12f2:	795b      	ldrb	r3, [r3, #5]
    12f4:	b11b      	cbz	r3, 12fe <z_impl_log_panic+0x36>
	backend->api->panic(backend);
    12f6:	6823      	ldr	r3, [r4, #0]
    12f8:	4620      	mov	r0, r4
    12fa:	691b      	ldr	r3, [r3, #16]
    12fc:	4798      	blx	r3
	for (int i = 0; i < log_backend_count_get(); i++) {
    12fe:	3501      	adds	r5, #1
    1300:	3410      	adds	r4, #16
    1302:	e7eb      	b.n	12dc <z_impl_log_panic+0x14>
    1304:	20000489 	.word	0x20000489
    1308:	00006074 	.word	0x00006074
    130c:	00006094 	.word	0x00006094

00001310 <log_free>:
{
    1310:	b507      	push	{r0, r1, r2, lr}
	struct log_strdup_buf *dup = CONTAINER_OF(str, struct log_strdup_buf,
    1312:	3804      	subs	r0, #4
    1314:	9001      	str	r0, [sp, #4]
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
    1316:	f3bf 8f5b 	dmb	ish
    131a:	e850 3f00 	ldrex	r3, [r0]
    131e:	1e5a      	subs	r2, r3, #1
    1320:	e840 2100 	strex	r1, r2, [r0]
    1324:	2900      	cmp	r1, #0
    1326:	d1f8      	bne.n	131a <log_free+0xa>
    1328:	f3bf 8f5b 	dmb	ish
	if (atomic_dec(&dup->refcount) == 1) {
    132c:	2b01      	cmp	r3, #1
    132e:	d103      	bne.n	1338 <log_free+0x28>
		k_mem_slab_free(&log_strdup_pool, (void **)&dup);
    1330:	4803      	ldr	r0, [pc, #12]	; (1340 <log_free+0x30>)
    1332:	a901      	add	r1, sp, #4
    1334:	f002 fd70 	bl	3e18 <k_mem_slab_free>
}
    1338:	b003      	add	sp, #12
    133a:	f85d fb04 	ldr.w	pc, [sp], #4
    133e:	bf00      	nop
    1340:	20000284 	.word	0x20000284

00001344 <log_msg_pool_init>:
static uint8_t __noinit __aligned(sizeof(void *))
		log_msg_pool_buf[CONFIG_LOG_BUFFER_SIZE];

void log_msg_pool_init(void)
{
	k_mem_slab_init(&log_msg_pool, log_msg_pool_buf, MSG_SIZE, NUM_OF_MSGS);
    1344:	2320      	movs	r3, #32
    1346:	4902      	ldr	r1, [pc, #8]	; (1350 <log_msg_pool_init+0xc>)
    1348:	4802      	ldr	r0, [pc, #8]	; (1354 <log_msg_pool_init+0x10>)
    134a:	461a      	mov	r2, r3
    134c:	f004 bc2d 	b.w	5baa <k_mem_slab_init>
    1350:	20001a20 	.word	0x20001a20
    1354:	200002a4 	.word	0x200002a4

00001358 <log_msg_no_space_handle>:

	k_mem_slab_free(&log_msg_pool, (void **)&msg);
}

union log_msg_chunk *log_msg_no_space_handle(void)
{
    1358:	b537      	push	{r0, r1, r2, r4, r5, lr}
	union log_msg_chunk *msg = NULL;
    135a:	2300      	movs	r3, #0

	if (IS_ENABLED(CONFIG_LOG_MODE_OVERFLOW)) {
		do {
			more = log_process(true);
			log_dropped();
			err = k_mem_slab_alloc(&log_msg_pool,
    135c:	4d09      	ldr	r5, [pc, #36]	; (1384 <log_msg_no_space_handle+0x2c>)
	union log_msg_chunk *msg = NULL;
    135e:	9301      	str	r3, [sp, #4]
    1360:	2001      	movs	r0, #1
    1362:	f7ff fe73 	bl	104c <z_impl_log_process>
    1366:	4604      	mov	r4, r0
			log_dropped();
    1368:	f7ff fdca 	bl	f00 <log_dropped>
			err = k_mem_slab_alloc(&log_msg_pool,
    136c:	2200      	movs	r2, #0
    136e:	2300      	movs	r3, #0
    1370:	a901      	add	r1, sp, #4
    1372:	4628      	mov	r0, r5
    1374:	f002 fd1e 	bl	3db4 <k_mem_slab_alloc>
					       (void **)&msg,
					       K_NO_WAIT);
		} while ((err != 0) && more);
    1378:	b108      	cbz	r0, 137e <log_msg_no_space_handle+0x26>
    137a:	2c00      	cmp	r4, #0
    137c:	d1f0      	bne.n	1360 <log_msg_no_space_handle+0x8>
	} else {
		log_dropped();
	}
	return msg;

}
    137e:	9801      	ldr	r0, [sp, #4]
    1380:	b003      	add	sp, #12
    1382:	bd30      	pop	{r4, r5, pc}
    1384:	200002a4 	.word	0x200002a4

00001388 <log_msg_chunk_alloc>:
{
    1388:	b507      	push	{r0, r1, r2, lr}
	union log_msg_chunk *msg = NULL;
    138a:	2300      	movs	r3, #0
    138c:	9301      	str	r3, [sp, #4]
	int err = k_mem_slab_alloc(&log_msg_pool, (void **)&msg,
    138e:	4807      	ldr	r0, [pc, #28]	; (13ac <log_msg_chunk_alloc+0x24>)
    1390:	2200      	movs	r2, #0
    1392:	2300      	movs	r3, #0
    1394:	a901      	add	r1, sp, #4
    1396:	f002 fd0d 	bl	3db4 <k_mem_slab_alloc>
	if (err != 0) {
    139a:	b110      	cbz	r0, 13a2 <log_msg_chunk_alloc+0x1a>
		msg = log_msg_no_space_handle();
    139c:	f7ff ffdc 	bl	1358 <log_msg_no_space_handle>
    13a0:	9001      	str	r0, [sp, #4]
}
    13a2:	9801      	ldr	r0, [sp, #4]
    13a4:	b003      	add	sp, #12
    13a6:	f85d fb04 	ldr.w	pc, [sp], #4
    13aa:	bf00      	nop
    13ac:	200002a4 	.word	0x200002a4

000013b0 <msg_free>:
{
    13b0:	b5f0      	push	{r4, r5, r6, r7, lr}
	return  (msg->hdr.params.generic.type == LOG_MSG_TYPE_STD);
    13b2:	7a03      	ldrb	r3, [r0, #8]
	}
}

uint32_t log_msg_nargs_get(struct log_msg *msg)
{
	return msg->hdr.params.std.nargs;
    13b4:	7a45      	ldrb	r5, [r0, #9]
{
    13b6:	b085      	sub	sp, #20
	return msg->hdr.params.std.nargs;
    13b8:	092d      	lsrs	r5, r5, #4
{
    13ba:	9001      	str	r0, [sp, #4]
	if (log_msg_is_std(msg) && nargs) {
    13bc:	07d8      	lsls	r0, r3, #31
    13be:	d41c      	bmi.n	13fa <msg_free+0x4a>
    13c0:	b1dd      	cbz	r5, 13fa <msg_free+0x4a>
		uint32_t smask = 0;
    13c2:	2400      	movs	r4, #0
		for (i = 0; i < nargs; i++) {
    13c4:	4626      	mov	r6, r4
			void *buf = (void *)log_msg_arg_get(msg, i);
    13c6:	9801      	ldr	r0, [sp, #4]
    13c8:	4631      	mov	r1, r6
    13ca:	f003 ffe8 	bl	539e <log_msg_arg_get>
    13ce:	4607      	mov	r7, r0
			if (log_is_strdup(buf)) {
    13d0:	f7ff fe2e 	bl	1030 <log_is_strdup>
    13d4:	b170      	cbz	r0, 13f4 <msg_free+0x44>
				if (smask == 0) {
    13d6:	b934      	cbnz	r4, 13e6 <msg_free+0x36>
					smask = z_log_get_s_mask(
    13d8:	9b01      	ldr	r3, [sp, #4]
    13da:	4629      	mov	r1, r5
    13dc:	6918      	ldr	r0, [r3, #16]
    13de:	f003 ff02 	bl	51e6 <z_log_get_s_mask>
					if (smask == 0) {
    13e2:	4604      	mov	r4, r0
    13e4:	b148      	cbz	r0, 13fa <msg_free+0x4a>
				if (smask & BIT(i)) {
    13e6:	fa24 f306 	lsr.w	r3, r4, r6
    13ea:	07d9      	lsls	r1, r3, #31
    13ec:	d502      	bpl.n	13f4 <msg_free+0x44>
					log_free(buf);
    13ee:	4638      	mov	r0, r7
    13f0:	f7ff ff8e 	bl	1310 <log_free>
		for (i = 0; i < nargs; i++) {
    13f4:	3601      	adds	r6, #1
    13f6:	42ae      	cmp	r6, r5
    13f8:	d3e5      	bcc.n	13c6 <msg_free+0x16>
	if (msg->hdr.params.generic.ext == 1) {
    13fa:	9b01      	ldr	r3, [sp, #4]
    13fc:	7a1a      	ldrb	r2, [r3, #8]
    13fe:	0792      	lsls	r2, r2, #30
    1400:	d504      	bpl.n	140c <msg_free+0x5c>
		cont_free(msg->payload.ext.next);
    1402:	695b      	ldr	r3, [r3, #20]
		k_mem_slab_free(&log_msg_pool, (void **)&cont);
    1404:	4c08      	ldr	r4, [pc, #32]	; (1428 <msg_free+0x78>)
    1406:	9303      	str	r3, [sp, #12]
	while (cont != NULL) {
    1408:	9b03      	ldr	r3, [sp, #12]
    140a:	b92b      	cbnz	r3, 1418 <msg_free+0x68>
	k_mem_slab_free(&log_msg_pool, (void **)&msg);
    140c:	4806      	ldr	r0, [pc, #24]	; (1428 <msg_free+0x78>)
    140e:	a901      	add	r1, sp, #4
    1410:	f002 fd02 	bl	3e18 <k_mem_slab_free>
}
    1414:	b005      	add	sp, #20
    1416:	bdf0      	pop	{r4, r5, r6, r7, pc}
		next = cont->next;
    1418:	681d      	ldr	r5, [r3, #0]
		k_mem_slab_free(&log_msg_pool, (void **)&cont);
    141a:	a903      	add	r1, sp, #12
    141c:	4620      	mov	r0, r4
    141e:	f002 fcfb 	bl	3e18 <k_mem_slab_free>
		cont = next;
    1422:	9503      	str	r5, [sp, #12]
    1424:	e7f0      	b.n	1408 <msg_free+0x58>
    1426:	bf00      	nop
    1428:	200002a4 	.word	0x200002a4

0000142c <print_formatted>:
	return 0;
}

static int print_formatted(const struct log_output *log_output,
			   const char *fmt, ...)
{
    142c:	b40e      	push	{r1, r2, r3}
    142e:	b503      	push	{r0, r1, lr}
    1430:	ab03      	add	r3, sp, #12
    1432:	4601      	mov	r1, r0
    1434:	f853 2b04 	ldr.w	r2, [r3], #4
	va_list args;
	int length = 0;

	va_start(args, fmt);
	length = cbvprintf(out_func, (void *)log_output, fmt, args);
    1438:	4804      	ldr	r0, [pc, #16]	; (144c <print_formatted+0x20>)
	va_start(args, fmt);
    143a:	9301      	str	r3, [sp, #4]
	length = cbvprintf(out_func, (void *)log_output, fmt, args);
    143c:	f7ff fae2 	bl	a04 <cbvprintf>
	va_end(args);

	return length;
}
    1440:	b002      	add	sp, #8
    1442:	f85d eb04 	ldr.w	lr, [sp], #4
    1446:	b003      	add	sp, #12
    1448:	4770      	bx	lr
    144a:	bf00      	nop
    144c:	00005703 	.word	0x00005703

00001450 <prefix_print>:
}

static uint32_t prefix_print(const struct log_output *log_output,
			 uint32_t flags, bool func_on, uint32_t timestamp, uint8_t level,
			 uint8_t domain_id, uint16_t source_id)
{
    1450:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    1454:	b085      	sub	sp, #20
			"<%d>1 ",
			facility * 8 +
			level_to_rfc5424_severity(level));
	}

	if (stamp) {
    1456:	f011 0402 	ands.w	r4, r1, #2
{
    145a:	4690      	mov	r8, r2
    145c:	f89d 7038 	ldrb.w	r7, [sp, #56]	; 0x38
    1460:	4606      	mov	r6, r0
    1462:	461a      	mov	r2, r3
	bool colors_on = flags & LOG_OUTPUT_FLAG_COLORS;
    1464:	f001 0901 	and.w	r9, r1, #1
	bool level_on = flags & LOG_OUTPUT_FLAG_LEVEL;
    1468:	f001 0508 	and.w	r5, r1, #8
	if (stamp) {
    146c:	d007      	beq.n	147e <prefix_print+0x2e>
	if (!format) {
    146e:	f011 0f44 	tst.w	r1, #68	; 0x44
    1472:	d137      	bne.n	14e4 <prefix_print+0x94>
		length = print_formatted(log_output, "[%08lu] ", timestamp);
    1474:	4932      	ldr	r1, [pc, #200]	; (1540 <prefix_print+0xf0>)
    1476:	f7ff ffd9 	bl	142c <print_formatted>
			length = print_formatted(log_output,
    147a:	4601      	mov	r1, r0
		length += timestamp_print(log_output, flags, timestamp);
    147c:	460c      	mov	r4, r1
	if (color) {
    147e:	f1b9 0f00 	cmp.w	r9, #0
    1482:	d00a      	beq.n	149a <prefix_print+0x4a>
		const char *log_color = start && (colors[level] != NULL) ?
    1484:	4b2f      	ldr	r3, [pc, #188]	; (1544 <prefix_print+0xf4>)
		print_formatted(log_output, "%s", log_color);
    1486:	4930      	ldr	r1, [pc, #192]	; (1548 <prefix_print+0xf8>)
		const char *log_color = start && (colors[level] != NULL) ?
    1488:	f853 2027 	ldr.w	r2, [r3, r7, lsl #2]
		print_formatted(log_output, "%s", log_color);
    148c:	4b2f      	ldr	r3, [pc, #188]	; (154c <prefix_print+0xfc>)
    148e:	4630      	mov	r0, r6
    1490:	2a00      	cmp	r2, #0
    1492:	bf08      	it	eq
    1494:	461a      	moveq	r2, r3
    1496:	f7ff ffc9 	bl	142c <print_formatted>
	if (level_on) {
    149a:	b13d      	cbz	r5, 14ac <prefix_print+0x5c>
		total += print_formatted(log_output, "<%s> ", severity[level]);
    149c:	4b2c      	ldr	r3, [pc, #176]	; (1550 <prefix_print+0x100>)
    149e:	492d      	ldr	r1, [pc, #180]	; (1554 <prefix_print+0x104>)
    14a0:	f853 2027 	ldr.w	r2, [r3, r7, lsl #2]
    14a4:	4630      	mov	r0, r6
    14a6:	f7ff ffc1 	bl	142c <print_formatted>
    14aa:	4605      	mov	r5, r0
	total += print_formatted(log_output,
    14ac:	f1b8 0f00 	cmp.w	r8, #0
    14b0:	d043      	beq.n	153a <prefix_print+0xea>
				((1 << level) & LOG_FUNCTION_PREFIX_MASK)) ?
    14b2:	2301      	movs	r3, #1
    14b4:	fa03 f707 	lsl.w	r7, r3, r7
	total += print_formatted(log_output,
    14b8:	4b27      	ldr	r3, [pc, #156]	; (1558 <prefix_print+0x108>)
    14ba:	f017 0f10 	tst.w	r7, #16
    14be:	4f27      	ldr	r7, [pc, #156]	; (155c <prefix_print+0x10c>)
    14c0:	bf18      	it	ne
    14c2:	461f      	movne	r7, r3
    14c4:	f8bd 1040 	ldrh.w	r1, [sp, #64]	; 0x40
    14c8:	f89d 003c 	ldrb.w	r0, [sp, #60]	; 0x3c
    14cc:	f7ff fd28 	bl	f20 <log_source_name_get>
    14d0:	4639      	mov	r1, r7
    14d2:	4602      	mov	r2, r0
    14d4:	4630      	mov	r0, r6
    14d6:	f7ff ffa9 	bl	142c <print_formatted>
    14da:	4428      	add	r0, r5

	length += ids_print(log_output, level_on, func_on,
			domain_id, source_id, level);

	return length;
}
    14dc:	4420      	add	r0, r4
    14de:	b005      	add	sp, #20
    14e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	} else if (freq != 0U) {
    14e4:	4b1e      	ldr	r3, [pc, #120]	; (1560 <prefix_print+0x110>)
    14e6:	6819      	ldr	r1, [r3, #0]
    14e8:	2900      	cmp	r1, #0
    14ea:	d0c7      	beq.n	147c <prefix_print+0x2c>
		timestamp /= timestamp_div;
    14ec:	4b1d      	ldr	r3, [pc, #116]	; (1564 <prefix_print+0x114>)
    14ee:	f44f 6e61 	mov.w	lr, #3600	; 0xe10
    14f2:	681b      	ldr	r3, [r3, #0]
    14f4:	fbb2 f3f3 	udiv	r3, r2, r3
		ms = (remainder * 1000U) / freq;
    14f8:	f44f 7c7a 	mov.w	ip, #1000	; 0x3e8
		total_seconds = timestamp / freq;
    14fc:	fbb3 f4f1 	udiv	r4, r3, r1
		seconds -= hours * 3600U;
    1500:	fbb4 f2fe 	udiv	r2, r4, lr
    1504:	fb0e 4e12 	mls	lr, lr, r2, r4
		remainder = timestamp % freq;
    1508:	fb01 3414 	mls	r4, r1, r4, r3
		ms = (remainder * 1000U) / freq;
    150c:	fb0c f404 	mul.w	r4, ip, r4
		mins = seconds / 60U;
    1510:	f04f 0a3c 	mov.w	sl, #60	; 0x3c
		us = (1000 * (remainder * 1000U - (ms * freq))) / freq;
    1514:	fbb4 fbf1 	udiv	fp, r4, r1
    1518:	fb01 441b 	mls	r4, r1, fp, r4
    151c:	fb0c f404 	mul.w	r4, ip, r4
		mins = seconds / 60U;
    1520:	fbbe f3fa 	udiv	r3, lr, sl
		us = (1000 * (remainder * 1000U - (ms * freq))) / freq;
    1524:	fbb4 f1f1 	udiv	r1, r4, r1
			length = print_formatted(log_output,
    1528:	e9cd b101 	strd	fp, r1, [sp, #4]
    152c:	fb0a e113 	mls	r1, sl, r3, lr
    1530:	9100      	str	r1, [sp, #0]
    1532:	490d      	ldr	r1, [pc, #52]	; (1568 <prefix_print+0x118>)
    1534:	f7ff ff7a 	bl	142c <print_formatted>
    1538:	e79f      	b.n	147a <prefix_print+0x2a>
	total += print_formatted(log_output,
    153a:	4f08      	ldr	r7, [pc, #32]	; (155c <prefix_print+0x10c>)
    153c:	e7c2      	b.n	14c4 <prefix_print+0x74>
    153e:	bf00      	nop
    1540:	0000633d 	.word	0x0000633d
    1544:	000060a8 	.word	0x000060a8
    1548:	00006875 	.word	0x00006875
    154c:	0000632f 	.word	0x0000632f
    1550:	000060bc 	.word	0x000060bc
    1554:	00006362 	.word	0x00006362
    1558:	00006339 	.word	0x00006339
    155c:	00006334 	.word	0x00006334
    1560:	200002c0 	.word	0x200002c0
    1564:	200002c4 	.word	0x200002c4
    1568:	00006346 	.word	0x00006346

0000156c <postfix_print>:

static void postfix_print(const struct log_output *log_output,
			  uint32_t flags, uint8_t level)
{
    156c:	b538      	push	{r3, r4, r5, lr}
    156e:	460c      	mov	r4, r1
	if (color) {
    1570:	07e1      	lsls	r1, r4, #31
{
    1572:	4605      	mov	r5, r0
	if (color) {
    1574:	d503      	bpl.n	157e <postfix_print+0x12>
		print_formatted(log_output, "%s", log_color);
    1576:	4a08      	ldr	r2, [pc, #32]	; (1598 <postfix_print+0x2c>)
    1578:	4908      	ldr	r1, [pc, #32]	; (159c <postfix_print+0x30>)
    157a:	f7ff ff57 	bl	142c <print_formatted>
	if ((flags & LOG_OUTPUT_FLAG_CRLF_NONE) != 0U) {
    157e:	06e2      	lsls	r2, r4, #27
    1580:	d408      	bmi.n	1594 <postfix_print+0x28>
	if ((flags & LOG_OUTPUT_FLAG_CRLF_LFONLY) != 0U) {
    1582:	06a3      	lsls	r3, r4, #26
		print_formatted(ctx, "\r\n");
    1584:	4628      	mov	r0, r5
		print_formatted(ctx, "\n");
    1586:	bf4c      	ite	mi
    1588:	4905      	ldrmi	r1, [pc, #20]	; (15a0 <postfix_print+0x34>)
		print_formatted(ctx, "\r\n");
    158a:	4906      	ldrpl	r1, [pc, #24]	; (15a4 <postfix_print+0x38>)
	color_postfix(log_output, (flags & LOG_OUTPUT_FLAG_COLORS),
			      level);
	newline_print(log_output, flags);
}
    158c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		print_formatted(ctx, "\r\n");
    1590:	f7ff bf4c 	b.w	142c <print_formatted>
}
    1594:	bd38      	pop	{r3, r4, r5, pc}
    1596:	bf00      	nop
    1598:	0000632f 	.word	0x0000632f
    159c:	00006875 	.word	0x00006875
    15a0:	00006369 	.word	0x00006369
    15a4:	00006368 	.word	0x00006368

000015a8 <hexdump_line_print>:
{
    15a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    15ac:	461d      	mov	r5, r3
    15ae:	9b08      	ldr	r3, [sp, #32]
    15b0:	4617      	mov	r7, r2
	if ((flags & LOG_OUTPUT_FLAG_CRLF_NONE) != 0U) {
    15b2:	06da      	lsls	r2, r3, #27
{
    15b4:	4604      	mov	r4, r0
    15b6:	460e      	mov	r6, r1
	if ((flags & LOG_OUTPUT_FLAG_CRLF_NONE) != 0U) {
    15b8:	d405      	bmi.n	15c6 <hexdump_line_print+0x1e>
	if ((flags & LOG_OUTPUT_FLAG_CRLF_LFONLY) != 0U) {
    15ba:	0699      	lsls	r1, r3, #26
		print_formatted(ctx, "\n");
    15bc:	bf4c      	ite	mi
    15be:	492a      	ldrmi	r1, [pc, #168]	; (1668 <hexdump_line_print+0xc0>)
		print_formatted(ctx, "\r\n");
    15c0:	492a      	ldrpl	r1, [pc, #168]	; (166c <hexdump_line_print+0xc4>)
    15c2:	f7ff ff33 	bl	142c <print_formatted>
		print_formatted(log_output, " ");
    15c6:	f8df 90ac 	ldr.w	r9, [pc, #172]	; 1674 <hexdump_line_print+0xcc>
{
    15ca:	f04f 0800 	mov.w	r8, #0
	for (int i = 0; i < prefix_offset; i++) {
    15ce:	45a8      	cmp	r8, r5
    15d0:	db2a      	blt.n	1628 <hexdump_line_print+0x80>
			print_formatted(log_output, "   ");
    15d2:	f8df 80a4 	ldr.w	r8, [pc, #164]	; 1678 <hexdump_line_print+0xd0>
			print_formatted(log_output, "%02x ", data[i]);
    15d6:	f8df 90a4 	ldr.w	r9, [pc, #164]	; 167c <hexdump_line_print+0xd4>
			print_formatted(log_output, " ");
    15da:	f8df a098 	ldr.w	sl, [pc, #152]	; 1674 <hexdump_line_print+0xcc>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
    15de:	2500      	movs	r5, #0
		if (i < length) {
    15e0:	42bd      	cmp	r5, r7
    15e2:	d22f      	bcs.n	1644 <hexdump_line_print+0x9c>
			print_formatted(log_output, "%02x ", data[i]);
    15e4:	5d72      	ldrb	r2, [r6, r5]
    15e6:	4649      	mov	r1, r9
    15e8:	4620      	mov	r0, r4
    15ea:	f7ff ff1f 	bl	142c <print_formatted>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
    15ee:	3501      	adds	r5, #1
    15f0:	2d10      	cmp	r5, #16
    15f2:	d120      	bne.n	1636 <hexdump_line_print+0x8e>
	print_formatted(log_output, "|");
    15f4:	491e      	ldr	r1, [pc, #120]	; (1670 <hexdump_line_print+0xc8>)
			print_formatted(log_output, " ");
    15f6:	f8df 807c 	ldr.w	r8, [pc, #124]	; 1674 <hexdump_line_print+0xcc>
			print_formatted(log_output, "%c",
    15fa:	f8df 9084 	ldr.w	r9, [pc, #132]	; 1680 <hexdump_line_print+0xd8>
	print_formatted(log_output, "|");
    15fe:	4620      	mov	r0, r4
    1600:	f7ff ff14 	bl	142c <print_formatted>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
    1604:	2500      	movs	r5, #0
		if (i < length) {
    1606:	42af      	cmp	r7, r5
    1608:	d928      	bls.n	165c <hexdump_line_print+0xb4>
			char c = (char)data[i];
    160a:	5d72      	ldrb	r2, [r6, r5]
	return (int)((((unsigned)c) >= ' ') &&
    160c:	f1a2 0320 	sub.w	r3, r2, #32
    1610:	2b5f      	cmp	r3, #95	; 0x5f
			print_formatted(log_output, "%c",
    1612:	bf28      	it	cs
    1614:	222e      	movcs	r2, #46	; 0x2e
    1616:	4649      	mov	r1, r9
    1618:	4620      	mov	r0, r4
    161a:	f7ff ff07 	bl	142c <print_formatted>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
    161e:	3501      	adds	r5, #1
    1620:	2d10      	cmp	r5, #16
    1622:	d114      	bne.n	164e <hexdump_line_print+0xa6>
}
    1624:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		print_formatted(log_output, " ");
    1628:	4649      	mov	r1, r9
    162a:	4620      	mov	r0, r4
    162c:	f7ff fefe 	bl	142c <print_formatted>
	for (int i = 0; i < prefix_offset; i++) {
    1630:	f108 0801 	add.w	r8, r8, #1
    1634:	e7cb      	b.n	15ce <hexdump_line_print+0x26>
		if (i > 0 && !(i % 8)) {
    1636:	076a      	lsls	r2, r5, #29
    1638:	d1d2      	bne.n	15e0 <hexdump_line_print+0x38>
			print_formatted(log_output, " ");
    163a:	4651      	mov	r1, sl
    163c:	4620      	mov	r0, r4
    163e:	f7ff fef5 	bl	142c <print_formatted>
    1642:	e7cd      	b.n	15e0 <hexdump_line_print+0x38>
			print_formatted(log_output, "   ");
    1644:	4641      	mov	r1, r8
    1646:	4620      	mov	r0, r4
    1648:	f7ff fef0 	bl	142c <print_formatted>
    164c:	e7cf      	b.n	15ee <hexdump_line_print+0x46>
		if (i > 0 && !(i % 8)) {
    164e:	076b      	lsls	r3, r5, #29
    1650:	d1d9      	bne.n	1606 <hexdump_line_print+0x5e>
			print_formatted(log_output, " ");
    1652:	4641      	mov	r1, r8
    1654:	4620      	mov	r0, r4
    1656:	f7ff fee9 	bl	142c <print_formatted>
    165a:	e7d4      	b.n	1606 <hexdump_line_print+0x5e>
			print_formatted(log_output, " ");
    165c:	4641      	mov	r1, r8
    165e:	4620      	mov	r0, r4
    1660:	f7ff fee4 	bl	142c <print_formatted>
    1664:	e7db      	b.n	161e <hexdump_line_print+0x76>
    1666:	bf00      	nop
    1668:	00006369 	.word	0x00006369
    166c:	00006368 	.word	0x00006368
    1670:	00006375 	.word	0x00006375
    1674:	00006373 	.word	0x00006373
    1678:	00006371 	.word	0x00006371
    167c:	0000636b 	.word	0x0000636b
    1680:	00006377 	.word	0x00006377

00001684 <log_output_msg_process>:

void log_output_msg_process(const struct log_output *log_output,
			    struct log_msg *msg,
			    uint32_t flags)
{
    1684:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	return msg->hdr.ids.level;
    1688:	7a8b      	ldrb	r3, [r1, #10]
		log_output_msg_syst_process(log_output, msg, flags);
		return;
	}

	prefix_offset = raw_string ?
			0 : prefix_print(log_output, flags, std_msg, timestamp,
    168a:	f013 0807 	ands.w	r8, r3, #7
{
    168e:	4617      	mov	r7, r2
    1690:	b08a      	sub	sp, #40	; 0x28
	return  (msg->hdr.params.generic.type == LOG_MSG_TYPE_STD);
    1692:	7a0a      	ldrb	r2, [r1, #8]
    1694:	4605      	mov	r5, r0
    1696:	460e      	mov	r6, r1
			0 : prefix_print(log_output, flags, std_msg, timestamp,
    1698:	d021      	beq.n	16de <log_output_msg_process+0x5a>
	return msg->hdr.ids.source_id;
    169a:	8949      	ldrh	r1, [r1, #10]
    169c:	f3c3 03c2 	ubfx	r3, r3, #3, #3
    16a0:	f3c1 1189 	ubfx	r1, r1, #6, #10
	return  (msg->hdr.params.generic.type == LOG_MSG_TYPE_STD);
    16a4:	43d2      	mvns	r2, r2
    16a6:	e9cd 8300 	strd	r8, r3, [sp]
    16aa:	9102      	str	r1, [sp, #8]
    16ac:	68f3      	ldr	r3, [r6, #12]
    16ae:	f002 0201 	and.w	r2, r2, #1
    16b2:	4639      	mov	r1, r7
    16b4:	f7ff fecc 	bl	1450 <prefix_print>
    16b8:	4681      	mov	r9, r0
    16ba:	7a34      	ldrb	r4, [r6, #8]
    16bc:	43e4      	mvns	r4, r4
					 level, domain_id, source_id);

	if (log_msg_is_std(msg)) {
    16be:	f014 0401 	ands.w	r4, r4, #1
    16c2:	d00e      	beq.n	16e2 <log_output_msg_process+0x5e>
		std_print(msg, log_output);
    16c4:	4629      	mov	r1, r5
    16c6:	4630      	mov	r0, r6
    16c8:	f003 feb1 	bl	542e <std_print>
		raw_string_print(msg, log_output);
	} else {
		hexdump_print(msg, log_output, prefix_offset, flags);
	}

	if (!raw_string) {
    16cc:	f1b8 0f00 	cmp.w	r8, #0
    16d0:	d02b      	beq.n	172a <log_output_msg_process+0xa6>
		postfix_print(log_output, flags, level);
    16d2:	4642      	mov	r2, r8
    16d4:	4639      	mov	r1, r7
    16d6:	4628      	mov	r0, r5
    16d8:	f7ff ff48 	bl	156c <postfix_print>
    16dc:	e025      	b.n	172a <log_output_msg_process+0xa6>
			0 : prefix_print(log_output, flags, std_msg, timestamp,
    16de:	46c1      	mov	r9, r8
    16e0:	e7eb      	b.n	16ba <log_output_msg_process+0x36>
	} else if (raw_string) {
    16e2:	f1b8 0f00 	cmp.w	r8, #0
    16e6:	d126      	bne.n	1736 <log_output_msg_process+0xb2>
	size_t offset = 0;
    16e8:	4627      	mov	r7, r4
		length = log_output->size;
    16ea:	68eb      	ldr	r3, [r5, #12]
    16ec:	9306      	str	r3, [sp, #24]
		log_msg_hexdump_data_get(msg, log_output->buf, &length, offset);
    16ee:	aa06      	add	r2, sp, #24
    16f0:	463b      	mov	r3, r7
    16f2:	68a9      	ldr	r1, [r5, #8]
    16f4:	4630      	mov	r0, r6
    16f6:	f003 fe86 	bl	5406 <log_msg_hexdump_data_get>
		log_output->control_block->offset = length;
    16fa:	9a06      	ldr	r2, [sp, #24]
    16fc:	686b      	ldr	r3, [r5, #4]
    16fe:	601a      	str	r2, [r3, #0]
		if (length != 0) {
    1700:	b13a      	cbz	r2, 1712 <log_output_msg_process+0x8e>
			eol = (log_output->buf[length - 1] == '\n');
    1702:	68ab      	ldr	r3, [r5, #8]
    1704:	4413      	add	r3, r2
    1706:	f813 4c01 	ldrb.w	r4, [r3, #-1]
    170a:	f1a4 030a 	sub.w	r3, r4, #10
    170e:	425c      	negs	r4, r3
    1710:	415c      	adcs	r4, r3
		log_output_flush(log_output);
    1712:	4628      	mov	r0, r5
    1714:	f003 ffe8 	bl	56e8 <log_output_flush>
		offset += length;
    1718:	9b06      	ldr	r3, [sp, #24]
    171a:	441f      	add	r7, r3
	} while (length > 0);
    171c:	2b00      	cmp	r3, #0
    171e:	d1e4      	bne.n	16ea <log_output_msg_process+0x66>
	if (eol) {
    1720:	b11c      	cbz	r4, 172a <log_output_msg_process+0xa6>
		print_formatted(log_output, "\r");
    1722:	4914      	ldr	r1, [pc, #80]	; (1774 <log_output_msg_process+0xf0>)
    1724:	4628      	mov	r0, r5
    1726:	f7ff fe81 	bl	142c <print_formatted>
	}

	log_output_flush(log_output);
    172a:	4628      	mov	r0, r5
    172c:	f003 ffdc 	bl	56e8 <log_output_flush>
}
    1730:	b00a      	add	sp, #40	; 0x28
    1732:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	print_formatted(log_output, "%s", log_msg_str_get(msg));
    1736:	4630      	mov	r0, r6
    1738:	f003 fe63 	bl	5402 <log_msg_str_get>
    173c:	490e      	ldr	r1, [pc, #56]	; (1778 <log_output_msg_process+0xf4>)
    173e:	4602      	mov	r2, r0
    1740:	4628      	mov	r0, r5
    1742:	f7ff fe73 	bl	142c <print_formatted>
		length = sizeof(buf);
    1746:	f04f 0a10 	mov.w	sl, #16
		log_msg_hexdump_data_get(msg, buf, &length, offset);
    174a:	aa05      	add	r2, sp, #20
    174c:	4623      	mov	r3, r4
    174e:	a906      	add	r1, sp, #24
    1750:	4630      	mov	r0, r6
		length = sizeof(buf);
    1752:	f8cd a014 	str.w	sl, [sp, #20]
		log_msg_hexdump_data_get(msg, buf, &length, offset);
    1756:	f003 fe56 	bl	5406 <log_msg_hexdump_data_get>
		if (length) {
    175a:	9a05      	ldr	r2, [sp, #20]
    175c:	2a00      	cmp	r2, #0
    175e:	d0b8      	beq.n	16d2 <log_output_msg_process+0x4e>
			hexdump_line_print(log_output, buf, length,
    1760:	464b      	mov	r3, r9
    1762:	9700      	str	r7, [sp, #0]
    1764:	a906      	add	r1, sp, #24
    1766:	4628      	mov	r0, r5
    1768:	f7ff ff1e 	bl	15a8 <hexdump_line_print>
			offset += length;
    176c:	9b05      	ldr	r3, [sp, #20]
    176e:	441c      	add	r4, r3
		length = sizeof(buf);
    1770:	e7eb      	b.n	174a <log_output_msg_process+0xc6>
    1772:	bf00      	nop
    1774:	0000637a 	.word	0x0000637a
    1778:	00006875 	.word	0x00006875

0000177c <log_output_dropped_process>:
	postfix_print(log_output, flags, level);
	log_output_flush(log_output);
}

void log_output_dropped_process(const struct log_output *log_output, uint32_t cnt)
{
    177c:	b573      	push	{r0, r1, r4, r5, r6, lr}
	static const char postfix[] =
			" messages dropped ---\r\n" DROPPED_COLOR_POSTFIX;
	log_output_func_t outf = log_output->func;

	cnt = MIN(cnt, 9999);
	len = snprintk(buf, sizeof(buf), "%d", cnt);
    177e:	f242 730f 	movw	r3, #9999	; 0x270f
    1782:	428b      	cmp	r3, r1
    1784:	bf28      	it	cs
    1786:	460b      	movcs	r3, r1
	log_output_func_t outf = log_output->func;
    1788:	6805      	ldr	r5, [r0, #0]
	len = snprintk(buf, sizeof(buf), "%d", cnt);
    178a:	4a0f      	ldr	r2, [pc, #60]	; (17c8 <log_output_dropped_process+0x4c>)
{
    178c:	4604      	mov	r4, r0
	len = snprintk(buf, sizeof(buf), "%d", cnt);
    178e:	2105      	movs	r1, #5
    1790:	4668      	mov	r0, sp
    1792:	f003 fb05 	bl	4da0 <snprintk>

	buffer_write(outf, (uint8_t *)prefix, sizeof(prefix) - 1,
    1796:	6863      	ldr	r3, [r4, #4]
    1798:	490c      	ldr	r1, [pc, #48]	; (17cc <log_output_dropped_process+0x50>)
    179a:	685b      	ldr	r3, [r3, #4]
	len = snprintk(buf, sizeof(buf), "%d", cnt);
    179c:	4606      	mov	r6, r0
	buffer_write(outf, (uint8_t *)prefix, sizeof(prefix) - 1,
    179e:	220b      	movs	r2, #11
    17a0:	4628      	mov	r0, r5
    17a2:	f003 fe37 	bl	5414 <buffer_write>
		     log_output->control_block->ctx);
	buffer_write(outf, buf, len, log_output->control_block->ctx);
    17a6:	6863      	ldr	r3, [r4, #4]
    17a8:	4632      	mov	r2, r6
    17aa:	4669      	mov	r1, sp
    17ac:	4628      	mov	r0, r5
    17ae:	685b      	ldr	r3, [r3, #4]
    17b0:	f003 fe30 	bl	5414 <buffer_write>
	buffer_write(outf, (uint8_t *)postfix, sizeof(postfix) - 1,
    17b4:	6863      	ldr	r3, [r4, #4]
    17b6:	4906      	ldr	r1, [pc, #24]	; (17d0 <log_output_dropped_process+0x54>)
    17b8:	685b      	ldr	r3, [r3, #4]
    17ba:	221b      	movs	r2, #27
    17bc:	4628      	mov	r0, r5
    17be:	f003 fe29 	bl	5414 <buffer_write>
		     log_output->control_block->ctx);
}
    17c2:	b002      	add	sp, #8
    17c4:	bd70      	pop	{r4, r5, r6, pc}
    17c6:	bf00      	nop
    17c8:	00006985 	.word	0x00006985
    17cc:	000063b8 	.word	0x000063b8
    17d0:	0000639c 	.word	0x0000639c

000017d4 <log_output_timestamp_freq_set>:

void log_output_timestamp_freq_set(uint32_t frequency)
{
	timestamp_div = 1U;
    17d4:	4a08      	ldr	r2, [pc, #32]	; (17f8 <log_output_timestamp_freq_set+0x24>)
{
    17d6:	b510      	push	{r4, lr}
	timestamp_div = 1U;
    17d8:	2301      	movs	r3, #1
	/* There is no point to have frequency higher than 1MHz (ns are not
	 * printed) and too high frequency leads to overflows in calculations.
	 */
	while (frequency > 1000000) {
    17da:	4c08      	ldr	r4, [pc, #32]	; (17fc <log_output_timestamp_freq_set+0x28>)
	timestamp_div = 1U;
    17dc:	6013      	str	r3, [r2, #0]
	while (frequency > 1000000) {
    17de:	2100      	movs	r1, #0
    17e0:	42a0      	cmp	r0, r4
    17e2:	d804      	bhi.n	17ee <log_output_timestamp_freq_set+0x1a>
    17e4:	b101      	cbz	r1, 17e8 <log_output_timestamp_freq_set+0x14>
    17e6:	6013      	str	r3, [r2, #0]
		frequency /= 2U;
		timestamp_div *= 2U;
	}

	freq = frequency;
    17e8:	4b05      	ldr	r3, [pc, #20]	; (1800 <log_output_timestamp_freq_set+0x2c>)
    17ea:	6018      	str	r0, [r3, #0]
}
    17ec:	bd10      	pop	{r4, pc}
		frequency /= 2U;
    17ee:	0840      	lsrs	r0, r0, #1
		timestamp_div *= 2U;
    17f0:	005b      	lsls	r3, r3, #1
    17f2:	2101      	movs	r1, #1
    17f4:	e7f4      	b.n	17e0 <log_output_timestamp_freq_set+0xc>
    17f6:	bf00      	nop
    17f8:	200002c4 	.word	0x200002c4
    17fc:	000f4240 	.word	0x000f4240
    1800:	200002c0 	.word	0x200002c0

00001804 <char_out>:
#include <sys/__assert.h>

static const struct device *uart_dev;

static int char_out(uint8_t *data, size_t length, void *ctx)
{
    1804:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	ARG_UNUSED(ctx);

	for (size_t i = 0; i < length; i++) {
		uart_poll_out(uart_dev, data[i]);
    1806:	4f07      	ldr	r7, [pc, #28]	; (1824 <char_out+0x20>)
{
    1808:	460d      	mov	r5, r1
    180a:	4604      	mov	r4, r0
    180c:	1846      	adds	r6, r0, r1
	for (size_t i = 0; i < length; i++) {
    180e:	42b4      	cmp	r4, r6
    1810:	d101      	bne.n	1816 <char_out+0x12>
	}

	return length;
}
    1812:	4628      	mov	r0, r5
    1814:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		uart_poll_out(uart_dev, data[i]);
    1816:	6838      	ldr	r0, [r7, #0]
    1818:	f814 1b01 	ldrb.w	r1, [r4], #1
						unsigned char out_char)
{
	const struct uart_driver_api *api =
		(const struct uart_driver_api *)dev->api;

	api->poll_out(dev, out_char);
    181c:	6883      	ldr	r3, [r0, #8]
    181e:	685b      	ldr	r3, [r3, #4]
    1820:	4798      	blx	r3
	for (size_t i = 0; i < length; i++) {
    1822:	e7f4      	b.n	180e <char_out+0xa>
    1824:	200002dc 	.word	0x200002dc

00001828 <panic>:
 * @param log_output	Log output instance.
 */
static inline void
log_backend_std_panic(const struct log_output *const log_output)
{
	log_output_flush(log_output);
    1828:	4801      	ldr	r0, [pc, #4]	; (1830 <panic+0x8>)
    182a:	f003 bf5d 	b.w	56e8 <log_output_flush>
    182e:	bf00      	nop
    1830:	000060e8 	.word	0x000060e8

00001834 <dropped>:
 * @param cnt		Number of dropped messages.
 */
static inline void
log_backend_std_dropped(const struct log_output *const log_output, uint32_t cnt)
{
	log_output_dropped_process(log_output, cnt);
    1834:	4801      	ldr	r0, [pc, #4]	; (183c <dropped+0x8>)
    1836:	f7ff bfa1 	b.w	177c <log_output_dropped_process>
    183a:	bf00      	nop
    183c:	000060e8 	.word	0x000060e8

00001840 <log_backend_uart_init>:

	log_backend_std_put(&log_output_uart, flag, msg);
}

static void log_backend_uart_init(void)
{
    1840:	b508      	push	{r3, lr}
    1842:	4803      	ldr	r0, [pc, #12]	; (1850 <log_backend_uart_init+0x10>)
    1844:	f002 f906 	bl	3a54 <z_impl_device_get_binding>
	uart_dev = device_get_binding(CONFIG_UART_CONSOLE_ON_DEV_NAME);
    1848:	4b02      	ldr	r3, [pc, #8]	; (1854 <log_backend_uart_init+0x14>)
    184a:	6018      	str	r0, [r3, #0]
	__ASSERT_NO_MSG((void *)uart_dev);
}
    184c:	bd08      	pop	{r3, pc}
    184e:	bf00      	nop
    1850:	000063c4 	.word	0x000063c4
    1854:	200002dc 	.word	0x200002dc

00001858 <put>:
{
    1858:	b510      	push	{r4, lr}
	log_msg_get(msg);
    185a:	4608      	mov	r0, r1
    185c:	460c      	mov	r4, r1
    185e:	f003 fd8e 	bl	537e <log_msg_get>
	log_output_msg_process(log_output, msg, flags);
    1862:	4805      	ldr	r0, [pc, #20]	; (1878 <put+0x20>)
    1864:	4621      	mov	r1, r4
    1866:	220f      	movs	r2, #15
    1868:	f7ff ff0c 	bl	1684 <log_output_msg_process>
	log_msg_put(msg);
    186c:	4620      	mov	r0, r4
}
    186e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    1872:	f003 bdb3 	b.w	53dc <log_msg_put>
    1876:	bf00      	nop
    1878:	000060e8 	.word	0x000060e8

0000187c <log_backend_rtt_init>:
{
	if (CONFIG_LOG_BACKEND_RTT_BUFFER > 0) {
		log_backend_rtt_cfg();
	}

	host_present = true;
    187c:	4b01      	ldr	r3, [pc, #4]	; (1884 <log_backend_rtt_init+0x8>)
    187e:	2201      	movs	r2, #1
    1880:	701a      	strb	r2, [r3, #0]
	line_pos = line_buf;
}
    1882:	4770      	bx	lr
    1884:	2000049b 	.word	0x2000049b

00001888 <panic>:

static void panic(struct log_backend const *const backend)
{
	panic_mode = true;
    1888:	4b02      	ldr	r3, [pc, #8]	; (1894 <panic+0xc>)
	log_output_flush(log_output);
    188a:	4803      	ldr	r0, [pc, #12]	; (1898 <panic+0x10>)
    188c:	2201      	movs	r2, #1
    188e:	701a      	strb	r2, [r3, #0]
    1890:	f003 bf2a 	b.w	56e8 <log_output_flush>
    1894:	2000049c 	.word	0x2000049c
    1898:	00006110 	.word	0x00006110

0000189c <dropped>:
	log_output_dropped_process(log_output, cnt);
    189c:	4801      	ldr	r0, [pc, #4]	; (18a4 <dropped+0x8>)
    189e:	f7ff bf6d 	b.w	177c <log_output_dropped_process>
    18a2:	bf00      	nop
    18a4:	00006110 	.word	0x00006110

000018a8 <put>:
{
    18a8:	b510      	push	{r4, lr}
	log_msg_get(msg);
    18aa:	4608      	mov	r0, r1
    18ac:	460c      	mov	r4, r1
    18ae:	f003 fd66 	bl	537e <log_msg_get>
	log_output_msg_process(log_output, msg, flags);
    18b2:	4805      	ldr	r0, [pc, #20]	; (18c8 <put+0x20>)
    18b4:	4621      	mov	r1, r4
    18b6:	220f      	movs	r2, #15
    18b8:	f7ff fee4 	bl	1684 <log_output_msg_process>
	log_msg_put(msg);
    18bc:	4620      	mov	r0, r4
}
    18be:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    18c2:	f003 bd8b 	b.w	53dc <log_msg_put>
    18c6:	bf00      	nop
    18c8:	00006110 	.word	0x00006110

000018cc <on_failed_write.part.0>:
	return IS_ENABLED(CONFIG_LOG_IMMEDIATE) || panic_mode;
    18cc:	4b05      	ldr	r3, [pc, #20]	; (18e4 <on_failed_write.part.0+0x18>)
	} else if (is_sync_mode()) {
    18ce:	781b      	ldrb	r3, [r3, #0]
    18d0:	b11b      	cbz	r3, 18da <on_failed_write.part.0+0xe>
	z_impl_k_busy_wait(usec_to_wait);
    18d2:	f241 3088 	movw	r0, #5000	; 0x1388
    18d6:	f004 ba55 	b.w	5d84 <z_impl_k_busy_wait>
	return z_impl_k_sleep(timeout);
    18da:	20a4      	movs	r0, #164	; 0xa4
    18dc:	2100      	movs	r1, #0
    18de:	f002 beed 	b.w	46bc <z_impl_k_sleep>
    18e2:	bf00      	nop
    18e4:	2000049c 	.word	0x2000049c

000018e8 <data_out_block_mode>:
{
    18e8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	return IS_ENABLED(CONFIG_LOG_IMMEDIATE) || panic_mode;
    18ec:	f8df 9090 	ldr.w	r9, [pc, #144]	; 1980 <data_out_block_mode+0x98>
	return z_impl_k_mutex_lock(mutex, timeout);
    18f0:	f8df b090 	ldr.w	fp, [pc, #144]	; 1984 <data_out_block_mode+0x9c>
{
    18f4:	4607      	mov	r7, r0
    18f6:	460e      	mov	r6, r1
	int retry_cnt = IS_ENABLED(CONFIG_LOG_BACKEND_RTT_MODE_BLOCK) ?
    18f8:	2404      	movs	r4, #4
    18fa:	46ca      	mov	sl, r9
		if (!is_sync_mode()) {
    18fc:	f899 3000 	ldrb.w	r3, [r9]
    1900:	b933      	cbnz	r3, 1910 <data_out_block_mode+0x28>
    1902:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    1906:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    190a:	4658      	mov	r0, fp
    190c:	f002 faae 	bl	3e6c <z_impl_k_mutex_lock>
		ret = SEGGER_RTT_WriteSkipNoLock(CONFIG_LOG_BACKEND_RTT_BUFFER,
    1910:	4632      	mov	r2, r6
    1912:	4639      	mov	r1, r7
    1914:	2000      	movs	r0, #0
    1916:	f000 fb1f 	bl	1f58 <SEGGER_RTT_WriteSkipNoLock>
		if (!is_sync_mode()) {
    191a:	f89a 3000 	ldrb.w	r3, [sl]
		ret = SEGGER_RTT_WriteSkipNoLock(CONFIG_LOG_BACKEND_RTT_BUFFER,
    191e:	4680      	mov	r8, r0
		if (!is_sync_mode()) {
    1920:	b913      	cbnz	r3, 1928 <data_out_block_mode+0x40>
	return z_impl_k_mutex_unlock(mutex);
    1922:	4658      	mov	r0, fp
    1924:	f002 fb1a 	bl	3f5c <z_impl_k_mutex_unlock>
		if (ret) {
    1928:	4d14      	ldr	r5, [pc, #80]	; (197c <data_out_block_mode+0x94>)
    192a:	f1b8 0f00 	cmp.w	r8, #0
    192e:	d018      	beq.n	1962 <data_out_block_mode+0x7a>
	host_present = true;
    1930:	2301      	movs	r3, #1
    1932:	702b      	strb	r3, [r5, #0]
	if (is_panic_mode()) {
    1934:	f89a 3000 	ldrb.w	r3, [sl]
    1938:	b933      	cbnz	r3, 1948 <data_out_block_mode+0x60>
}
    193a:	4630      	mov	r0, r6
    193c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (retry_cnt == 0) {
    1940:	b95c      	cbnz	r4, 195a <data_out_block_mode+0x72>
		host_present = false;
    1942:	702c      	strb	r4, [r5, #0]
    1944:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
		while (SEGGER_RTT_HasDataUp(CONFIG_LOG_BACKEND_RTT_BUFFER) &&
    1948:	2000      	movs	r0, #0
    194a:	f000 fb51 	bl	1ff0 <SEGGER_RTT_HasDataUp>
    194e:	2800      	cmp	r0, #0
    1950:	d0f3      	beq.n	193a <data_out_block_mode+0x52>
    1952:	782b      	ldrb	r3, [r5, #0]
    1954:	2b00      	cmp	r3, #0
    1956:	d1f3      	bne.n	1940 <data_out_block_mode+0x58>
    1958:	e7ef      	b.n	193a <data_out_block_mode+0x52>
			on_failed_write(retry_cnt--);
    195a:	3c01      	subs	r4, #1
    195c:	f7ff ffb6 	bl	18cc <on_failed_write.part.0>
    1960:	e7f2      	b.n	1948 <data_out_block_mode+0x60>
		} else if (host_present) {
    1962:	782b      	ldrb	r3, [r5, #0]
    1964:	b113      	cbz	r3, 196c <data_out_block_mode+0x84>
	if (retry_cnt == 0) {
    1966:	3c01      	subs	r4, #1
    1968:	d104      	bne.n	1974 <data_out_block_mode+0x8c>
		host_present = false;
    196a:	702c      	strb	r4, [r5, #0]
	} while ((ret == 0) && host_present);
    196c:	782b      	ldrb	r3, [r5, #0]
    196e:	2b00      	cmp	r3, #0
    1970:	d1c4      	bne.n	18fc <data_out_block_mode+0x14>
    1972:	e7e2      	b.n	193a <data_out_block_mode+0x52>
    1974:	f7ff ffaa 	bl	18cc <on_failed_write.part.0>
    1978:	e7f8      	b.n	196c <data_out_block_mode+0x84>
    197a:	bf00      	nop
    197c:	2000049b 	.word	0x2000049b
    1980:	2000049c 	.word	0x2000049c
    1984:	2000008c 	.word	0x2000008c

00001988 <uart_console_init>:
 * @brief Initialize one UART as the console/debug port
 *
 * @return 0 if successful, otherwise failed.
 */
static int uart_console_init(const struct device *arg)
{
    1988:	b510      	push	{r4, lr}
    198a:	4807      	ldr	r0, [pc, #28]	; (19a8 <uart_console_init+0x20>)
	__stdout_hook_install(console_out);
    198c:	4c07      	ldr	r4, [pc, #28]	; (19ac <uart_console_init+0x24>)
    198e:	f002 f861 	bl	3a54 <z_impl_device_get_binding>

	ARG_UNUSED(arg);

	/* Claim console device */
	uart_console_dev = device_get_binding(CONFIG_UART_CONSOLE_ON_DEV_NAME);
    1992:	4b07      	ldr	r3, [pc, #28]	; (19b0 <uart_console_init+0x28>)
    1994:	6018      	str	r0, [r3, #0]
	__stdout_hook_install(console_out);
    1996:	4620      	mov	r0, r4
    1998:	f001 f818 	bl	29cc <__stdout_hook_install>
	__printk_hook_install(console_out);
    199c:	4620      	mov	r0, r4
    199e:	f7fe fdcb 	bl	538 <__printk_hook_install>

	uart_console_hook_install();

	return 0;
}
    19a2:	2000      	movs	r0, #0
    19a4:	bd10      	pop	{r4, pc}
    19a6:	bf00      	nop
    19a8:	000063c4 	.word	0x000063c4
    19ac:	000019b5 	.word	0x000019b5
    19b0:	200002f4 	.word	0x200002f4

000019b4 <console_out>:
	if ('\n' == c) {
    19b4:	280a      	cmp	r0, #10
{
    19b6:	b538      	push	{r3, r4, r5, lr}
    19b8:	4d07      	ldr	r5, [pc, #28]	; (19d8 <console_out+0x24>)
    19ba:	4604      	mov	r4, r0
	if ('\n' == c) {
    19bc:	d104      	bne.n	19c8 <console_out+0x14>
    19be:	6828      	ldr	r0, [r5, #0]
    19c0:	6883      	ldr	r3, [r0, #8]
    19c2:	210d      	movs	r1, #13
    19c4:	685b      	ldr	r3, [r3, #4]
    19c6:	4798      	blx	r3
	uart_poll_out(uart_console_dev, c);
    19c8:	6828      	ldr	r0, [r5, #0]
    19ca:	6883      	ldr	r3, [r0, #8]
    19cc:	b2e1      	uxtb	r1, r4
    19ce:	685b      	ldr	r3, [r3, #4]
    19d0:	4798      	blx	r3
}
    19d2:	4620      	mov	r0, r4
    19d4:	bd38      	pop	{r3, r4, r5, pc}
    19d6:	bf00      	nop
    19d8:	200002f4 	.word	0x200002f4

000019dc <onoff_stop>:
	return (clock_control_subsys_t)offset;
}

static void onoff_stop(struct onoff_manager *mgr,
			onoff_notify_fn notify)
{
    19dc:	b570      	push	{r4, r5, r6, lr}
    19de:	4604      	mov	r4, r0
	size_t offset = (size_t)(mgr - data->mgr);
    19e0:	480d      	ldr	r0, [pc, #52]	; (1a18 <onoff_stop+0x3c>)
    19e2:	1a23      	subs	r3, r4, r0
    19e4:	109a      	asrs	r2, r3, #2
    19e6:	4b0d      	ldr	r3, [pc, #52]	; (1a1c <onoff_stop+0x40>)
    19e8:	4353      	muls	r3, r2
    19ea:	b2db      	uxtb	r3, r3
	err = set_off_state(&subdata->flags, ctx);
    19ec:	250c      	movs	r5, #12
    19ee:	435d      	muls	r5, r3
    19f0:	f105 0340 	add.w	r3, r5, #64	; 0x40
{
    19f4:	460e      	mov	r6, r1
	err = set_off_state(&subdata->flags, ctx);
    19f6:	4418      	add	r0, r3
    19f8:	2140      	movs	r1, #64	; 0x40
    19fa:	f003 fea6 	bl	574a <set_off_state>
	if (err < 0) {
    19fe:	1e01      	subs	r1, r0, #0
    1a00:	db04      	blt.n	1a0c <onoff_stop+0x30>
	get_sub_config(dev, type)->stop();
    1a02:	4b07      	ldr	r3, [pc, #28]	; (1a20 <onoff_stop+0x44>)
    1a04:	442b      	add	r3, r5
    1a06:	685b      	ldr	r3, [r3, #4]
    1a08:	4798      	blx	r3
	return 0;
    1a0a:	2100      	movs	r1, #0
	int res;

	res = stop(DEVICE_GET(clock_nrf), get_subsys(mgr), CTX_ONOFF);
	notify(mgr, res);
    1a0c:	4620      	mov	r0, r4
    1a0e:	4633      	mov	r3, r6
}
    1a10:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	notify(mgr, res);
    1a14:	4718      	bx	r3
    1a16:	bf00      	nop
    1a18:	20000308 	.word	0x20000308
    1a1c:	b6db6db7 	.word	0xb6db6db7
    1a20:	00006134 	.word	0x00006134

00001a24 <onoff_start>:
	notify(mgr, 0);
}

static void onoff_start(struct onoff_manager *mgr,
			onoff_notify_fn notify)
{
    1a24:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	size_t offset = (size_t)(mgr - data->mgr);
    1a28:	4c0f      	ldr	r4, [pc, #60]	; (1a68 <onoff_start+0x44>)
    1a2a:	4d10      	ldr	r5, [pc, #64]	; (1a6c <onoff_start+0x48>)
    1a2c:	1b03      	subs	r3, r0, r4
    1a2e:	109b      	asrs	r3, r3, #2
    1a30:	435d      	muls	r5, r3
    1a32:	b2eb      	uxtb	r3, r5
	err = set_starting_state(&subdata->flags, ctx);
    1a34:	250c      	movs	r5, #12
    1a36:	435d      	muls	r5, r3
{
    1a38:	4607      	mov	r7, r0
	err = set_starting_state(&subdata->flags, ctx);
    1a3a:	f105 0040 	add.w	r0, r5, #64	; 0x40
{
    1a3e:	460e      	mov	r6, r1
	err = set_starting_state(&subdata->flags, ctx);
    1a40:	4420      	add	r0, r4
    1a42:	2140      	movs	r1, #64	; 0x40
    1a44:	f003 fe9a 	bl	577c <set_starting_state>
	if (err < 0) {
    1a48:	1e01      	subs	r1, r0, #0
    1a4a:	db08      	blt.n	1a5e <onoff_start+0x3a>
	subdata->cb = cb;
    1a4c:	4b08      	ldr	r3, [pc, #32]	; (1a70 <onoff_start+0x4c>)
    1a4e:	442c      	add	r4, r5
	subdata->user_data = user_data;
    1a50:	e9c4 360e 	strd	r3, r6, [r4, #56]	; 0x38
	 get_sub_config(dev, type)->start();
    1a54:	4b07      	ldr	r3, [pc, #28]	; (1a74 <onoff_start+0x50>)
    1a56:	595b      	ldr	r3, [r3, r5]
	err = async_start(DEVICE_GET(clock_nrf), get_subsys(mgr),
			  onoff_started_callback, notify, CTX_ONOFF);
	if (err < 0) {
		notify(mgr, err);
	}
}
    1a58:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	 get_sub_config(dev, type)->start();
    1a5c:	4718      	bx	r3
		notify(mgr, err);
    1a5e:	4638      	mov	r0, r7
    1a60:	4633      	mov	r3, r6
}
    1a62:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		notify(mgr, err);
    1a66:	4718      	bx	r3
    1a68:	20000308 	.word	0x20000308
    1a6c:	b6db6db7 	.word	0xb6db6db7
    1a70:	000057df 	.word	0x000057df
    1a74:	00006134 	.word	0x00006134

00001a78 <clk_init>:
	static const struct onoff_transitions transitions = {
		.start = onoff_start,
		.stop = onoff_stop
	};

	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
    1a78:	2200      	movs	r2, #0
{
    1a7a:	b570      	push	{r4, r5, r6, lr}
	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
    1a7c:	2101      	movs	r1, #1
{
    1a7e:	4604      	mov	r4, r0
	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
    1a80:	4610      	mov	r0, r2
    1a82:	f000 faf7 	bl	2074 <z_arm_irq_priority_set>
		    nrfx_isr, nrfx_power_clock_irq_handler, 0);
	irq_enable(DT_INST_IRQN(0));
    1a86:	2000      	movs	r0, #0
    1a88:	f000 fad6 	bl	2038 <arch_irq_enable>

	nrfx_err = nrfx_clock_init(clock_event_handler);
    1a8c:	480f      	ldr	r0, [pc, #60]	; (1acc <clk_init+0x54>)
    1a8e:	f001 fdc7 	bl	3620 <nrfx_clock_init>
	if (nrfx_err != NRFX_SUCCESS) {
    1a92:	4b0f      	ldr	r3, [pc, #60]	; (1ad0 <clk_init+0x58>)
    1a94:	4298      	cmp	r0, r3
    1a96:	d115      	bne.n	1ac4 <clk_init+0x4c>
		struct nrf_clock_control_data *data = dev->data;

		z_nrf_clock_calibration_init(data->mgr);
	}

	nrfx_clock_enable();
    1a98:	f004 f842 	bl	5b20 <nrfx_clock_enable>

	for (enum clock_control_nrf_type i = 0;
		i < CLOCK_CONTROL_NRF_TYPE_COUNT; i++) {
		struct nrf_clock_control_sub_data *subdata =
						get_sub_data(dev, i);
    1a9c:	68e6      	ldr	r6, [r4, #12]

		err = onoff_manager_init(get_onoff_manager(dev, i),
    1a9e:	490d      	ldr	r1, [pc, #52]	; (1ad4 <clk_init+0x5c>)
    1aa0:	4630      	mov	r0, r6
    1aa2:	f003 f9d9 	bl	4e58 <onoff_manager_init>
					 &transitions);
		if (err < 0) {
    1aa6:	2800      	cmp	r0, #0
    1aa8:	db0b      	blt.n	1ac2 <clk_init+0x4a>
			return err;
		}

		subdata->flags = CLOCK_CONTROL_STATUS_OFF;
    1aaa:	2501      	movs	r5, #1
    1aac:	6435      	str	r5, [r6, #64]	; 0x40
						get_sub_data(dev, i);
    1aae:	68e4      	ldr	r4, [r4, #12]
		err = onoff_manager_init(get_onoff_manager(dev, i),
    1ab0:	4908      	ldr	r1, [pc, #32]	; (1ad4 <clk_init+0x5c>)
    1ab2:	f104 001c 	add.w	r0, r4, #28
    1ab6:	f003 f9cf 	bl	4e58 <onoff_manager_init>
		if (err < 0) {
    1aba:	2800      	cmp	r0, #0
    1abc:	db01      	blt.n	1ac2 <clk_init+0x4a>
		subdata->flags = CLOCK_CONTROL_STATUS_OFF;
    1abe:	64e5      	str	r5, [r4, #76]	; 0x4c
	}

	return 0;
    1ac0:	2000      	movs	r0, #0
}
    1ac2:	bd70      	pop	{r4, r5, r6, pc}
		return -EIO;
    1ac4:	f06f 0004 	mvn.w	r0, #4
    1ac8:	e7fb      	b.n	1ac2 <clk_init+0x4a>
    1aca:	bf00      	nop
    1acc:	00001b0d 	.word	0x00001b0d
    1ad0:	0bad0000 	.word	0x0bad0000
    1ad4:	0000614c 	.word	0x0000614c

00001ad8 <clkstarted_handle.constprop.0>:
static void clkstarted_handle(const struct device *dev,
    1ad8:	4601      	mov	r1, r0
	clock_control_cb_t callback = sub_data->cb;
    1ada:	230c      	movs	r3, #12
    1adc:	4809      	ldr	r0, [pc, #36]	; (1b04 <clkstarted_handle.constprop.0+0x2c>)
    1ade:	434b      	muls	r3, r1
static void clkstarted_handle(const struct device *dev,
    1ae0:	b570      	push	{r4, r5, r6, lr}
	clock_control_cb_t callback = sub_data->cb;
    1ae2:	18c4      	adds	r4, r0, r3
	void *user_data = sub_data->user_data;
    1ae4:	e9d4 560e 	ldrd	r5, r6, [r4, #56]	; 0x38
	sub_data->cb = NULL;
    1ae8:	2200      	movs	r2, #0
	set_on_state(&sub_data->flags);
    1aea:	3340      	adds	r3, #64	; 0x40
	sub_data->cb = NULL;
    1aec:	63a2      	str	r2, [r4, #56]	; 0x38
	set_on_state(&sub_data->flags);
    1aee:	4418      	add	r0, r3
    1af0:	f003 fe62 	bl	57b8 <set_on_state>
	if (callback) {
    1af4:	b12d      	cbz	r5, 1b02 <clkstarted_handle.constprop.0+0x2a>
		callback(dev, (clock_control_subsys_t)type, user_data);
    1af6:	4632      	mov	r2, r6
    1af8:	462b      	mov	r3, r5
    1afa:	4803      	ldr	r0, [pc, #12]	; (1b08 <clkstarted_handle.constprop.0+0x30>)
}
    1afc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		callback(dev, (clock_control_subsys_t)type, user_data);
    1b00:	4718      	bx	r3
}
    1b02:	bd70      	pop	{r4, r5, r6, pc}
    1b04:	20000308 	.word	0x20000308
    1b08:	20000038 	.word	0x20000038

00001b0c <clock_event_handler>:
	switch (event) {
    1b0c:	b110      	cbz	r0, 1b14 <clock_event_handler+0x8>
    1b0e:	2801      	cmp	r0, #1
    1b10:	d004      	beq.n	1b1c <clock_event_handler+0x10>
    1b12:	4770      	bx	lr
		if (GET_STATUS(data->flags) == CLOCK_CONTROL_STATUS_STARTING) {
    1b14:	4b03      	ldr	r3, [pc, #12]	; (1b24 <clock_event_handler+0x18>)
    1b16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    1b18:	075b      	lsls	r3, r3, #29
    1b1a:	d101      	bne.n	1b20 <clock_event_handler+0x14>
		clkstarted_handle(dev, CLOCK_CONTROL_NRF_TYPE_LFCLK);
    1b1c:	f7ff bfdc 	b.w	1ad8 <clkstarted_handle.constprop.0>
}
    1b20:	4770      	bx	lr
    1b22:	bf00      	nop
    1b24:	20000308 	.word	0x20000308

00001b28 <generic_hfclk_start>:
{
    1b28:	b508      	push	{r3, lr}
	__asm__ volatile(
    1b2a:	f04f 0320 	mov.w	r3, #32
    1b2e:	f3ef 8111 	mrs	r1, BASEPRI
    1b32:	f383 8811 	msr	BASEPRI, r3
    1b36:	f3bf 8f6f 	isb	sy
	hfclk_users |= HF_USER_GENERIC;
    1b3a:	4a12      	ldr	r2, [pc, #72]	; (1b84 <generic_hfclk_start+0x5c>)
    1b3c:	6813      	ldr	r3, [r2, #0]
    1b3e:	f043 0002 	orr.w	r0, r3, #2
	if (hfclk_users & HF_USER_BT) {
    1b42:	f013 0301 	ands.w	r3, r3, #1
	hfclk_users |= HF_USER_GENERIC;
    1b46:	6010      	str	r0, [r2, #0]
	if (hfclk_users & HF_USER_BT) {
    1b48:	d00c      	beq.n	1b64 <generic_hfclk_start+0x3c>
            break;
        case NRF_CLOCK_DOMAIN_HFCLK:
            if (p_clk_src != NULL)
            {
                (*(nrf_clock_hfclk_t *)p_clk_src) =
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
    1b4a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    1b4e:	f8d2 340c 	ldr.w	r3, [r2, #1036]	; 0x40c
                                        >> CLOCK_HFCLKSTAT_SRC_Pos);
            }
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
    1b52:	f8d2 240c 	ldr.w	r2, [r2, #1036]	; 0x40c
		if (type == NRF_CLOCK_HFCLK_HIGH_ACCURACY) {
    1b56:	f013 0301 	ands.w	r3, r3, #1
    1b5a:	d003      	beq.n	1b64 <generic_hfclk_start+0x3c>
			set_on_state(get_hf_flags());
    1b5c:	480a      	ldr	r0, [pc, #40]	; (1b88 <generic_hfclk_start+0x60>)
    1b5e:	f003 fe2b 	bl	57b8 <set_on_state>
			already_started = true;
    1b62:	2301      	movs	r3, #1
	__asm__ volatile(
    1b64:	f381 8811 	msr	BASEPRI, r1
    1b68:	f3bf 8f6f 	isb	sy
	if (already_started) {
    1b6c:	b123      	cbz	r3, 1b78 <generic_hfclk_start+0x50>
}
    1b6e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		clkstarted_handle(DEVICE_GET(clock_nrf),
    1b72:	2000      	movs	r0, #0
    1b74:	f7ff bfb0 	b.w	1ad8 <clkstarted_handle.constprop.0>
}
    1b78:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
}

NRFX_STATIC_INLINE void nrfx_clock_hfclk_start(void)
{
    nrfx_clock_start(NRF_CLOCK_DOMAIN_HFCLK);
    1b7c:	2001      	movs	r0, #1
    1b7e:	f001 bd5f 	b.w	3640 <nrfx_clock_start>
    1b82:	bf00      	nop
    1b84:	20000358 	.word	0x20000358
    1b88:	20000348 	.word	0x20000348

00001b8c <lfclk_start>:
{
    1b8c:	b510      	push	{r4, lr}
	if (!once) {
    1b8e:	4c07      	ldr	r4, [pc, #28]	; (1bac <lfclk_start+0x20>)
    1b90:	7823      	ldrb	r3, [r4, #0]
    1b92:	b92b      	cbnz	r3, 1ba0 <lfclk_start+0x14>
	z_impl_k_busy_wait(usec_to_wait);
    1b94:	f44f 70a5 	mov.w	r0, #330	; 0x14a
    1b98:	f004 f8f4 	bl	5d84 <z_impl_k_busy_wait>
		once = true;
    1b9c:	2301      	movs	r3, #1
    1b9e:	7023      	strb	r3, [r4, #0]
}
    1ba0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    nrfx_clock_start(NRF_CLOCK_DOMAIN_LFCLK);
    1ba4:	2000      	movs	r0, #0
    1ba6:	f001 bd4b 	b.w	3640 <nrfx_clock_start>
    1baa:	bf00      	nop
    1bac:	2000049d 	.word	0x2000049d

00001bb0 <generic_hfclk_stop>:
 * @return Previous value of @a target.
 */
#ifdef CONFIG_ATOMIC_OPERATIONS_BUILTIN
static inline atomic_val_t atomic_and(atomic_t *target, atomic_val_t value)
{
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    1bb0:	4b09      	ldr	r3, [pc, #36]	; (1bd8 <generic_hfclk_stop+0x28>)
    1bb2:	f3bf 8f5b 	dmb	ish
    1bb6:	e853 2f00 	ldrex	r2, [r3]
    1bba:	f022 0102 	bic.w	r1, r2, #2
    1bbe:	e843 1000 	strex	r0, r1, [r3]
    1bc2:	2800      	cmp	r0, #0
    1bc4:	d1f7      	bne.n	1bb6 <generic_hfclk_stop+0x6>
    1bc6:	f3bf 8f5b 	dmb	ish
	if (atomic_and(&hfclk_users, ~HF_USER_GENERIC) & HF_USER_BT) {
    1bca:	07d3      	lsls	r3, r2, #31
    1bcc:	d402      	bmi.n	1bd4 <generic_hfclk_stop+0x24>
}

NRFX_STATIC_INLINE void nrfx_clock_hfclk_stop(void)
{
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_HFCLK);
    1bce:	2001      	movs	r0, #1
    1bd0:	f001 bd82 	b.w	36d8 <nrfx_clock_stop>
}
    1bd4:	4770      	bx	lr
    1bd6:	bf00      	nop
    1bd8:	20000358 	.word	0x20000358

00001bdc <api_blocking_start>:
{
    1bdc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
    1bde:	2200      	movs	r2, #0
    1be0:	2301      	movs	r3, #1
    1be2:	e9cd 2302 	strd	r2, r3, [sp, #8]
	err = api_start(dev, subsys, blocking_start_callback, &sem);
    1be6:	4a09      	ldr	r2, [pc, #36]	; (1c0c <api_blocking_start+0x30>)
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
    1be8:	f8cd d000 	str.w	sp, [sp]
	err = api_start(dev, subsys, blocking_start_callback, &sem);
    1bec:	466b      	mov	r3, sp
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
    1bee:	f8cd d004 	str.w	sp, [sp, #4]
	err = api_start(dev, subsys, blocking_start_callback, &sem);
    1bf2:	f003 fe17 	bl	5824 <api_start>
	if (err < 0) {
    1bf6:	2800      	cmp	r0, #0
    1bf8:	db05      	blt.n	1c06 <api_blocking_start+0x2a>
	return z_impl_k_sem_take(sem, timeout);
    1bfa:	f44f 4280 	mov.w	r2, #16384	; 0x4000
    1bfe:	2300      	movs	r3, #0
    1c00:	4668      	mov	r0, sp
    1c02:	f002 fda1 	bl	4748 <z_impl_k_sem_take>
}
    1c06:	b005      	add	sp, #20
    1c08:	f85d fb04 	ldr.w	pc, [sp], #4
    1c0c:	000057f1 	.word	0x000057f1

00001c10 <z_nrf_clock_control_lf_on>:
{
    1c10:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
    1c14:	493a      	ldr	r1, [pc, #232]	; (1d00 <z_nrf_clock_control_lf_on+0xf0>)
    1c16:	f3bf 8f5b 	dmb	ish
    1c1a:	4606      	mov	r6, r0
    1c1c:	2201      	movs	r2, #1
    1c1e:	e851 3f00 	ldrex	r3, [r1]
    1c22:	e841 2000 	strex	r0, r2, [r1]
    1c26:	2800      	cmp	r0, #0
    1c28:	d1f9      	bne.n	1c1e <z_nrf_clock_control_lf_on+0xe>
    1c2a:	f3bf 8f5b 	dmb	ish
	if (atomic_set(&on, 1) == 0) {
    1c2e:	b933      	cbnz	r3, 1c3e <z_nrf_clock_control_lf_on+0x2e>
 */
static inline void sys_notify_init_spinwait(struct sys_notify *notify)
{
	__ASSERT_NO_MSG(notify != NULL);

	*notify = (struct sys_notify){
    1c30:	4934      	ldr	r1, [pc, #208]	; (1d04 <z_nrf_clock_control_lf_on+0xf4>)
		err = onoff_request(mgr, &cli);
    1c32:	4835      	ldr	r0, [pc, #212]	; (1d08 <z_nrf_clock_control_lf_on+0xf8>)
    1c34:	604b      	str	r3, [r1, #4]
    1c36:	60cb      	str	r3, [r1, #12]
    1c38:	608a      	str	r2, [r1, #8]
    1c3a:	f003 f920 	bl	4e7e <onoff_request>
	switch (start_mode) {
    1c3e:	1e73      	subs	r3, r6, #1
    1c40:	2b01      	cmp	r3, #1
    1c42:	d832      	bhi.n	1caa <z_nrf_clock_control_lf_on+0x9a>
	if ((mode == CLOCK_CONTROL_NRF_LF_START_AVAILABLE) &&
    1c44:	2e01      	cmp	r6, #1
    1c46:	d107      	bne.n	1c58 <z_nrf_clock_control_lf_on+0x48>
    return clk_src;
}

NRF_STATIC_INLINE nrf_clock_lfclk_t nrf_clock_lf_srccopy_get(NRF_CLOCK_Type const * p_reg)
{
    return (nrf_clock_lfclk_t)((p_reg->LFCLKSRCCOPY & CLOCK_LFCLKSRCCOPY_SRC_Msk)
    1c48:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    1c4c:	f8d3 341c 	ldr.w	r3, [r3, #1052]	; 0x41c
    1c50:	f003 0303 	and.w	r3, r3, #3
	    (target_type == NRF_CLOCK_LFCLK_Xtal) &&
    1c54:	2b01      	cmp	r3, #1
    1c56:	d028      	beq.n	1caa <z_nrf_clock_control_lf_on+0x9a>
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
    1c58:	f004 f88e 	bl	5d78 <k_is_in_isr>
    1c5c:	4604      	mov	r4, r0
    1c5e:	b918      	cbnz	r0, 1c68 <z_nrf_clock_control_lf_on+0x58>
 */
static inline bool k_is_pre_kernel(void)
{
	extern bool z_sys_post_kernel; /* in init.c */

	return !z_sys_post_kernel;
    1c60:	4b2a      	ldr	r3, [pc, #168]	; (1d0c <z_nrf_clock_control_lf_on+0xfc>)
	int key = isr_mode ? irq_lock() : 0;
    1c62:	781b      	ldrb	r3, [r3, #0]
    1c64:	2b00      	cmp	r3, #0
    1c66:	d144      	bne.n	1cf2 <z_nrf_clock_control_lf_on+0xe2>
	__asm__ volatile(
    1c68:	f04f 0320 	mov.w	r3, #32
    1c6c:	f3ef 8511 	mrs	r5, BASEPRI
    1c70:	f383 8811 	msr	BASEPRI, r3
    1c74:	f3bf 8f6f 	isb	sy
    1c78:	2401      	movs	r4, #1
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
    1c7a:	4f25      	ldr	r7, [pc, #148]	; (1d10 <z_nrf_clock_control_lf_on+0x100>)
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    1c7c:	f8df 8094 	ldr.w	r8, [pc, #148]	; 1d14 <z_nrf_clock_control_lf_on+0x104>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    1c80:	f8df 9094 	ldr.w	r9, [pc, #148]	; 1d18 <z_nrf_clock_control_lf_on+0x108>
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
    1c84:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    1c88:	f8d2 3418 	ldr.w	r3, [r2, #1048]	; 0x418
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
    1c8c:	f8d2 2418 	ldr.w	r2, [r2, #1048]	; 0x418
    1c90:	03d2      	lsls	r2, r2, #15
    1c92:	d50c      	bpl.n	1cae <z_nrf_clock_control_lf_on+0x9e>
                                        >> CLOCK_LFCLKSTAT_SRC_Pos);
    1c94:	f003 0303 	and.w	r3, r3, #3
	while (!(nrfx_clock_is_running(d, (void *)&type)
    1c98:	2b01      	cmp	r3, #1
    1c9a:	d001      	beq.n	1ca0 <z_nrf_clock_control_lf_on+0x90>
		     || (mode == CLOCK_CONTROL_NRF_LF_START_AVAILABLE)))) {
    1c9c:	2e01      	cmp	r6, #1
    1c9e:	d106      	bne.n	1cae <z_nrf_clock_control_lf_on+0x9e>
	if (isr_mode) {
    1ca0:	b30c      	cbz	r4, 1ce6 <z_nrf_clock_control_lf_on+0xd6>
	__asm__ volatile(
    1ca2:	f385 8811 	msr	BASEPRI, r5
    1ca6:	f3bf 8f6f 	isb	sy
}
    1caa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			if (isr_mode) {
    1cae:	b1ac      	cbz	r4, 1cdc <z_nrf_clock_control_lf_on+0xcc>
 *
 * @return N/A
 */
static inline void k_cpu_atomic_idle(unsigned int key)
{
	arch_cpu_atomic_idle(key);
    1cb0:	4628      	mov	r0, r5
    1cb2:	f000 faef 	bl	2294 <arch_cpu_atomic_idle>
    return (nrf_clock_lfclk_t)(p_reg->LFCLKSRC);
    1cb6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    1cba:	f8d2 3518 	ldr.w	r3, [r2, #1304]	; 0x518
		if ((target_type ==  NRF_CLOCK_LFCLK_Xtal)
    1cbe:	2b00      	cmp	r3, #0
    1cc0:	d1e0      	bne.n	1c84 <z_nrf_clock_control_lf_on+0x74>
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
    1cc2:	6839      	ldr	r1, [r7, #0]
		    && nrf_clock_event_check(NRF_CLOCK,
    1cc4:	2900      	cmp	r1, #0
    1cc6:	d0dd      	beq.n	1c84 <z_nrf_clock_control_lf_on+0x74>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    1cc8:	603b      	str	r3, [r7, #0]
#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE void nrf_event_readback(void * p_event_reg)
{
#if NRFX_CHECK(NRFX_EVENT_READBACK_ENABLED) && !defined(NRF51)
    (void)*((volatile uint32_t *)(p_event_reg));
    1cca:	683b      	ldr	r3, [r7, #0]
    p_reg->LFCLKSRC = (uint32_t)(source);
    1ccc:	2301      	movs	r3, #1
    1cce:	f8c2 3518 	str.w	r3, [r2, #1304]	; 0x518
    1cd2:	f8c8 3180 	str.w	r3, [r8, #384]	; 0x180
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    1cd6:	f8c9 3000 	str.w	r3, [r9]
}
    1cda:	e7d3      	b.n	1c84 <z_nrf_clock_control_lf_on+0x74>
	return z_impl_k_sleep(timeout);
    1cdc:	2100      	movs	r1, #0
    1cde:	2021      	movs	r0, #33	; 0x21
    1ce0:	f002 fcec 	bl	46bc <z_impl_k_sleep>
	return k_sleep(Z_TIMEOUT_MS(ms));
    1ce4:	e7e7      	b.n	1cb6 <z_nrf_clock_control_lf_on+0xa6>
    p_reg->INTENSET = mask;
    1ce6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    1cea:	2202      	movs	r2, #2
    1cec:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
}
    1cf0:	e7db      	b.n	1caa <z_nrf_clock_control_lf_on+0x9a>
    p_reg->INTENCLR = mask;
    1cf2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    1cf6:	2202      	movs	r2, #2
    1cf8:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
	int key = isr_mode ? irq_lock() : 0;
    1cfc:	4605      	mov	r5, r0
}
    1cfe:	e7bc      	b.n	1c7a <z_nrf_clock_control_lf_on+0x6a>
    1d00:	2000035c 	.word	0x2000035c
    1d04:	200002f8 	.word	0x200002f8
    1d08:	20000324 	.word	0x20000324
    1d0c:	200008b0 	.word	0x200008b0
    1d10:	40000104 	.word	0x40000104
    1d14:	e000e100 	.word	0xe000e100
    1d18:	40000008 	.word	0x40000008

00001d1c <handle_next_cycle_case>:
 * counter progresses during that time it means that 1 cycle elapsed and
 * interrupt is set pending.
 */
static void handle_next_cycle_case(uint32_t t)
{
	set_comparator(t + 2);
    1d1c:	1c82      	adds	r2, r0, #2

#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE  void nrf_rtc_cc_set(NRF_RTC_Type * p_reg, uint32_t ch, uint32_t cc_val)
{
    p_reg->CC[ch] = cc_val;
    1d1e:	4b08      	ldr	r3, [pc, #32]	; (1d40 <handle_next_cycle_case+0x24>)
	nrf_rtc_cc_set(RTC, 0, cyc & COUNTER_MAX);
    1d20:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
    1d24:	f8c3 2540 	str.w	r2, [r3, #1344]	; 0x540
    nrf_event_readback((uint8_t *)p_reg + (uint32_t)event);
}

NRF_STATIC_INLINE uint32_t nrf_rtc_counter_get(NRF_RTC_Type const * p_reg)
{
     return p_reg->COUNTER;
    1d28:	f8d3 2504 	ldr.w	r2, [r3, #1284]	; 0x504
	while (t != counter()) {
    1d2c:	4290      	cmp	r0, r2
    1d2e:	d100      	bne.n	1d32 <handle_next_cycle_case+0x16>
		 * generated. Trigger interrupt.
		 */
		t = counter();
		set_comparator(t + 2);
	}
}
    1d30:	4770      	bx	lr
    1d32:	f8d3 0504 	ldr.w	r0, [r3, #1284]	; 0x504
		set_comparator(t + 2);
    1d36:	1c82      	adds	r2, r0, #2
	nrf_rtc_cc_set(RTC, 0, cyc & COUNTER_MAX);
    1d38:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
    1d3c:	e7f2      	b.n	1d24 <handle_next_cycle_case+0x8>
    1d3e:	bf00      	nop
    1d40:	40011000 	.word	0x40011000

00001d44 <rtc_nrf_isr>:
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    1d44:	4b07      	ldr	r3, [pc, #28]	; (1d64 <rtc_nrf_isr+0x20>)
    1d46:	2200      	movs	r2, #0
    1d48:	601a      	str	r2, [r3, #0]
    1d4a:	681b      	ldr	r3, [r3, #0]
{
	ARG_UNUSED(arg);
	event_clear();

	uint32_t t = get_comparator();
	uint32_t dticks = counter_sub(t, last_count) / CYC_PER_TICK;
    1d4c:	4a06      	ldr	r2, [pc, #24]	; (1d68 <rtc_nrf_isr+0x24>)
    return p_reg->CC[ch];
    1d4e:	4b07      	ldr	r3, [pc, #28]	; (1d6c <rtc_nrf_isr+0x28>)
    1d50:	f8d3 0540 	ldr.w	r0, [r3, #1344]	; 0x540
    1d54:	6813      	ldr	r3, [r2, #0]
	return (a - b) & COUNTER_MAX;
    1d56:	1ac0      	subs	r0, r0, r3
    1d58:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000

	last_count += dticks * CYC_PER_TICK;
    1d5c:	4403      	add	r3, r0
    1d5e:	6013      	str	r3, [r2, #0]
		 * so it won't get preempted by the interrupt.
		 */
		set_absolute_alarm(last_count + CYC_PER_TICK);
	}

	z_clock_announce(IS_ENABLED(CONFIG_TICKLESS_KERNEL) ? dticks : (dticks > 0));
    1d60:	f002 bec4 	b.w	4aec <z_clock_announce>
    1d64:	40011140 	.word	0x40011140
    1d68:	20000360 	.word	0x20000360
    1d6c:	40011000 	.word	0x40011000

00001d70 <z_clock_driver_init>:
}

int z_clock_driver_init(const struct device *device)
{
    1d70:	b538      	push	{r3, r4, r5, lr}
}

NRF_STATIC_INLINE void nrf_rtc_prescaler_set(NRF_RTC_Type * p_reg, uint32_t val)
{
    NRFX_ASSERT(val <= (RTC_PRESCALER_PRESCALER_Msk >> RTC_PRESCALER_PRESCALER_Pos));
    p_reg->PRESCALER = val;
    1d72:	4d10      	ldr	r5, [pc, #64]	; (1db4 <z_clock_driver_init+0x44>)
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    1d74:	4b10      	ldr	r3, [pc, #64]	; (1db8 <z_clock_driver_init+0x48>)
    p_reg->PRESCALER = val;
    1d76:	2400      	movs	r4, #0
    1d78:	f8c5 4508 	str.w	r4, [r5, #1288]	; 0x508
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    1d7c:	601c      	str	r4, [r3, #0]
    1d7e:	681b      	ldr	r3, [r3, #0]
    1d80:	4b0e      	ldr	r3, [pc, #56]	; (1dbc <z_clock_driver_init+0x4c>)
    1d82:	f44f 3200 	mov.w	r2, #131072	; 0x20000
    1d86:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
    p_reg->INTENSET = mask;
    1d8a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    1d8e:	f8c5 3304 	str.w	r3, [r5, #772]	; 0x304
	nrf_rtc_prescaler_set(RTC, 0);
	event_clear();
	NVIC_ClearPendingIRQ(RTC_IRQn);
	int_enable();

	IRQ_CONNECT(RTC_IRQn, DT_IRQ(DT_NODELABEL(RTC_LABEL), priority),
    1d92:	4622      	mov	r2, r4
    1d94:	2101      	movs	r1, #1
    1d96:	2011      	movs	r0, #17
    1d98:	f000 f96c 	bl	2074 <z_arm_irq_priority_set>
		    rtc_nrf_isr, 0, 0);
	irq_enable(RTC_IRQn);
    1d9c:	2011      	movs	r0, #17
    1d9e:	f000 f94b 	bl	2038 <arch_irq_enable>
    return (uint32_t)p_reg + task;
}

NRF_STATIC_INLINE void nrf_rtc_task_trigger(NRF_RTC_Type * p_reg, nrf_rtc_task_t task)
{
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
    1da2:	4a07      	ldr	r2, [pc, #28]	; (1dc0 <z_clock_driver_init+0x50>)
    1da4:	2301      	movs	r3, #1
    1da6:	6013      	str	r3, [r2, #0]

	if (!IS_ENABLED(CONFIG_TICKLESS_KERNEL)) {
		set_comparator(counter() + CYC_PER_TICK);
	}

	z_nrf_clock_control_lf_on(mode);
    1da8:	2002      	movs	r0, #2
    1daa:	602b      	str	r3, [r5, #0]
    1dac:	f7ff ff30 	bl	1c10 <z_nrf_clock_control_lf_on>

	return 0;
}
    1db0:	4620      	mov	r0, r4
    1db2:	bd38      	pop	{r3, r4, r5, pc}
    1db4:	40011000 	.word	0x40011000
    1db8:	40011140 	.word	0x40011140
    1dbc:	e000e100 	.word	0xe000e100
    1dc0:	40011008 	.word	0x40011008

00001dc4 <z_clock_set_timeout>:

void z_clock_set_timeout(int32_t ticks, bool idle)
{
    1dc4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}

	if (!IS_ENABLED(CONFIG_TICKLESS_KERNEL)) {
		return;
	}

	ticks = (ticks == K_TICKS_FOREVER) ? MAX_TICKS : ticks;
    1dc6:	4b2d      	ldr	r3, [pc, #180]	; (1e7c <z_clock_set_timeout+0xb8>)
    1dc8:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
    1dcc:	bf08      	it	eq
    1dce:	4618      	moveq	r0, r3
	ticks = CLAMP(ticks - 1, 0, (int32_t)MAX_TICKS);
    1dd0:	3801      	subs	r0, #1
    1dd2:	2800      	cmp	r0, #0
    1dd4:	dd40      	ble.n	1e58 <z_clock_set_timeout+0x94>
    1dd6:	4298      	cmp	r0, r3
    1dd8:	bfa8      	it	ge
    1dda:	4618      	movge	r0, r3
     return p_reg->COUNTER;
    1ddc:	4c28      	ldr	r4, [pc, #160]	; (1e80 <z_clock_set_timeout+0xbc>)

	uint32_t unannounced = counter_sub(counter(), last_count);
    1dde:	4a29      	ldr	r2, [pc, #164]	; (1e84 <z_clock_set_timeout+0xc0>)
    1de0:	f8d4 3504 	ldr.w	r3, [r4, #1284]	; 0x504
    1de4:	6812      	ldr	r2, [r2, #0]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    1de6:	4e28      	ldr	r6, [pc, #160]	; (1e88 <z_clock_set_timeout+0xc4>)
	return (a - b) & COUNTER_MAX;
    1de8:	1a9b      	subs	r3, r3, r2
	 * duration, then force an announce to avoid loss of a wrap
	 * event.  This can happen if new timeouts keep being set
	 * before the existing one triggers the interrupt.
	 */
	if (unannounced >= COUNTER_HALF_SPAN) {
		ticks = 0;
    1dea:	f413 0f00 	tst.w	r3, #8388608	; 0x800000
	return (a - b) & COUNTER_MAX;
    1dee:	f023 457f 	bic.w	r5, r3, #4278190080	; 0xff000000
		ticks = 0;
    1df2:	bf18      	it	ne
    1df4:	2000      	movne	r0, #0
	}

	/* Get the cycles from last_count to the tick boundary after
	 * the requested ticks have passed starting now.
	 */
	cyc = ticks * CYC_PER_TICK + 1 + unannounced;
    1df6:	3501      	adds	r5, #1
    1df8:	4428      	add	r0, r5
    p_reg->INTENCLR = mask;
    1dfa:	f44f 3180 	mov.w	r1, #65536	; 0x10000
	 */
	if (cyc > MAX_CYCLES) {
		cyc = MAX_CYCLES;
	}

	cyc += last_count;
    1dfe:	4d1f      	ldr	r5, [pc, #124]	; (1e7c <z_clock_set_timeout+0xb8>)
    1e00:	f8c4 1308 	str.w	r1, [r4, #776]	; 0x308
    1e04:	42a8      	cmp	r0, r5
    1e06:	bf94      	ite	ls
    1e08:	1815      	addls	r5, r2, r0
    1e0a:	1955      	addhi	r5, r2, r5
     return p_reg->COUNTER;
    1e0c:	f8d4 2504 	ldr.w	r2, [r4, #1284]	; 0x504
    return p_reg->CC[ch];
    1e10:	f8d4 3540 	ldr.w	r3, [r4, #1344]	; 0x540
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    1e14:	2700      	movs	r7, #0
	return (a - b) & COUNTER_MAX;
    1e16:	1a9b      	subs	r3, r3, r2
    1e18:	6037      	str	r7, [r6, #0]
    1e1a:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
    1e1e:	6830      	ldr	r0, [r6, #0]
	if (counter_sub(prev_val, now) == 1) {
    1e20:	2b01      	cmp	r3, #1
	nrf_rtc_cc_set(RTC, 0, cyc & COUNTER_MAX);
    1e22:	f022 407f 	bic.w	r0, r2, #4278190080	; 0xff000000
    p_reg->CC[ch] = cc_val;
    1e26:	f8c4 0540 	str.w	r0, [r4, #1344]	; 0x540
}

NRF_STATIC_INLINE void nrf_rtc_event_enable(NRF_RTC_Type * p_reg, uint32_t mask)
{
    p_reg->EVTENSET = mask;
    1e2a:	f8c4 1344 	str.w	r1, [r4, #836]	; 0x344
	if (counter_sub(prev_val, now) == 1) {
    1e2e:	d104      	bne.n	1e3a <z_clock_set_timeout+0x76>
	z_impl_k_busy_wait(usec_to_wait);
    1e30:	200f      	movs	r0, #15
    1e32:	f003 ffa7 	bl	5d84 <z_impl_k_busy_wait>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    1e36:	6037      	str	r7, [r6, #0]
    1e38:	6833      	ldr	r3, [r6, #0]
    1e3a:	4b14      	ldr	r3, [pc, #80]	; (1e8c <z_clock_set_timeout+0xc8>)
    1e3c:	f44f 3200 	mov.w	r2, #131072	; 0x20000
    1e40:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
     return p_reg->COUNTER;
    1e44:	f8d4 0504 	ldr.w	r0, [r4, #1284]	; 0x504
	return (a - b) & COUNTER_MAX;
    1e48:	1a2b      	subs	r3, r5, r0
    1e4a:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
	if (diff == 1) {
    1e4e:	2b01      	cmp	r3, #1
    1e50:	d104      	bne.n	1e5c <z_clock_set_timeout+0x98>
		handle_next_cycle_case(t);
    1e52:	f7ff ff63 	bl	1d1c <handle_next_cycle_case>
    1e56:	e00b      	b.n	1e70 <z_clock_set_timeout+0xac>
	ticks = CLAMP(ticks - 1, 0, (int32_t)MAX_TICKS);
    1e58:	2000      	movs	r0, #0
    1e5a:	e7bf      	b.n	1ddc <z_clock_set_timeout+0x18>
	nrf_rtc_cc_set(RTC, 0, cyc & COUNTER_MAX);
    1e5c:	f025 437f 	bic.w	r3, r5, #4278190080	; 0xff000000
    p_reg->CC[ch] = cc_val;
    1e60:	f8c4 3540 	str.w	r3, [r4, #1344]	; 0x540
     return p_reg->COUNTER;
    1e64:	f8d4 0504 	ldr.w	r0, [r4, #1284]	; 0x504
	return (a - b) & COUNTER_MAX;
    1e68:	1a2d      	subs	r5, r5, r0
    1e6a:	3d02      	subs	r5, #2
	if (diff > MAX_CYCLES) {
    1e6c:	022b      	lsls	r3, r5, #8
    1e6e:	d4f0      	bmi.n	1e52 <z_clock_set_timeout+0x8e>
    p_reg->INTENSET = mask;
    1e70:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    1e74:	f8c4 3304 	str.w	r3, [r4, #772]	; 0x304
	set_protected_absolute_alarm(cyc);
}
    1e78:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    1e7a:	bf00      	nop
    1e7c:	007fffff 	.word	0x007fffff
    1e80:	40011000 	.word	0x40011000
    1e84:	20000360 	.word	0x20000360
    1e88:	40011140 	.word	0x40011140
    1e8c:	e000e100 	.word	0xe000e100

00001e90 <z_clock_elapsed>:
	__asm__ volatile(
    1e90:	f04f 0220 	mov.w	r2, #32
    1e94:	f3ef 8311 	mrs	r3, BASEPRI
    1e98:	f382 8811 	msr	BASEPRI, r2
    1e9c:	f3bf 8f6f 	isb	sy
     return p_reg->COUNTER;
    1ea0:	4a06      	ldr	r2, [pc, #24]	; (1ebc <z_clock_elapsed+0x2c>)
    1ea2:	f8d2 0504 	ldr.w	r0, [r2, #1284]	; 0x504
	if (!IS_ENABLED(CONFIG_TICKLESS_KERNEL)) {
		return 0;
	}

	k_spinlock_key_t key = k_spin_lock(&lock);
	uint32_t ret = counter_sub(counter(), last_count) / CYC_PER_TICK;
    1ea6:	4a06      	ldr	r2, [pc, #24]	; (1ec0 <z_clock_elapsed+0x30>)
	return (a - b) & COUNTER_MAX;
    1ea8:	6812      	ldr	r2, [r2, #0]
    1eaa:	1a80      	subs	r0, r0, r2
    1eac:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
	__asm__ volatile(
    1eb0:	f383 8811 	msr	BASEPRI, r3
    1eb4:	f3bf 8f6f 	isb	sy

	k_spin_unlock(&lock, key);
	return ret;
}
    1eb8:	4770      	bx	lr
    1eba:	bf00      	nop
    1ebc:	40011000 	.word	0x40011000
    1ec0:	20000360 	.word	0x20000360

00001ec4 <z_timer_cycle_get_32>:
	__asm__ volatile(
    1ec4:	f04f 0320 	mov.w	r3, #32
    1ec8:	f3ef 8211 	mrs	r2, BASEPRI
    1ecc:	f383 8811 	msr	BASEPRI, r3
    1ed0:	f3bf 8f6f 	isb	sy

uint32_t z_timer_cycle_get_32(void)
{
	k_spinlock_key_t key = k_spin_lock(&lock);
	uint32_t ret = counter_sub(counter(), last_count) + last_count;
    1ed4:	4906      	ldr	r1, [pc, #24]	; (1ef0 <z_timer_cycle_get_32+0x2c>)
    1ed6:	4b07      	ldr	r3, [pc, #28]	; (1ef4 <z_timer_cycle_get_32+0x30>)
    1ed8:	6808      	ldr	r0, [r1, #0]
    1eda:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
	__asm__ volatile(
    1ede:	f382 8811 	msr	BASEPRI, r2
    1ee2:	f3bf 8f6f 	isb	sy
	return (a - b) & COUNTER_MAX;
    1ee6:	1a1b      	subs	r3, r3, r0
    1ee8:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000

	k_spin_unlock(&lock, key);
	return ret;
}
    1eec:	4418      	add	r0, r3
    1eee:	4770      	bx	lr
    1ef0:	20000360 	.word	0x20000360
    1ef4:	40011000 	.word	0x40011000

00001ef8 <_DoInit>:
*
*/
#define INIT()  do {                                            \
                  if (_SEGGER_RTT.acID[0] == '\0') { _DoInit(); }  \
                } while (0)
static void _DoInit(void) {
    1ef8:	b510      	push	{r4, lr}
  SEGGER_RTT_CB* p;
  //
  // Initialize control block
  //
  p = &_SEGGER_RTT;
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
    1efa:	4c11      	ldr	r4, [pc, #68]	; (1f40 <_DoInit+0x48>)
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
    1efc:	4a11      	ldr	r2, [pc, #68]	; (1f44 <_DoInit+0x4c>)
    1efe:	61a2      	str	r2, [r4, #24]
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
    1f00:	2303      	movs	r3, #3
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
    1f02:	e9c4 3304 	strd	r3, r3, [r4, #16]
  p->aUp[0].pBuffer       = _acUpBuffer;
    1f06:	4b10      	ldr	r3, [pc, #64]	; (1f48 <_DoInit+0x50>)
    1f08:	61e3      	str	r3, [r4, #28]
  p->aUp[0].WrOff         = 0u;
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
  //
  // Initialize down buffer 0
  //
  p->aDown[0].sName         = "Terminal";
    1f0a:	6622      	str	r2, [r4, #96]	; 0x60
  p->aUp[0].SizeOfBuffer  = sizeof(_acUpBuffer);
    1f0c:	f44f 6380 	mov.w	r3, #1024	; 0x400
  p->aDown[0].pBuffer       = _acDownBuffer;
    1f10:	4a0e      	ldr	r2, [pc, #56]	; (1f4c <_DoInit+0x54>)
  //
  // Finish initialization of the control block.
  // Copy Id string in three steps to make sure "SEGGER RTT" is not found
  // in initializer memory (usually flash) by J-Link
  //
  strcpy(&p->acID[7], "RTT");
    1f12:	490f      	ldr	r1, [pc, #60]	; (1f50 <_DoInit+0x58>)
  p->aUp[0].SizeOfBuffer  = sizeof(_acUpBuffer);
    1f14:	6223      	str	r3, [r4, #32]
  p->aDown[0].pBuffer       = _acDownBuffer;
    1f16:	6662      	str	r2, [r4, #100]	; 0x64
  p->aUp[0].RdOff         = 0u;
    1f18:	2300      	movs	r3, #0
  p->aDown[0].SizeOfBuffer  = sizeof(_acDownBuffer);
    1f1a:	2210      	movs	r2, #16
  strcpy(&p->acID[7], "RTT");
    1f1c:	1de0      	adds	r0, r4, #7
  p->aUp[0].RdOff         = 0u;
    1f1e:	62a3      	str	r3, [r4, #40]	; 0x28
  p->aUp[0].WrOff         = 0u;
    1f20:	6263      	str	r3, [r4, #36]	; 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
    1f22:	62e3      	str	r3, [r4, #44]	; 0x2c
  p->aDown[0].RdOff         = 0u;
    1f24:	6723      	str	r3, [r4, #112]	; 0x70
  p->aDown[0].WrOff         = 0u;
    1f26:	66e3      	str	r3, [r4, #108]	; 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
    1f28:	6763      	str	r3, [r4, #116]	; 0x74
  p->aDown[0].SizeOfBuffer  = sizeof(_acDownBuffer);
    1f2a:	66a2      	str	r2, [r4, #104]	; 0x68
  strcpy(&p->acID[7], "RTT");
    1f2c:	f003 fcac 	bl	5888 <strcpy>
  strcpy(&p->acID[0], "SEGGER");
    1f30:	4908      	ldr	r1, [pc, #32]	; (1f54 <_DoInit+0x5c>)
    1f32:	4620      	mov	r0, r4
    1f34:	f003 fca8 	bl	5888 <strcpy>
  p->acID[6] = ' ';
    1f38:	2320      	movs	r3, #32
    1f3a:	71a3      	strb	r3, [r4, #6]
}
    1f3c:	bd10      	pop	{r4, pc}
    1f3e:	bf00      	nop
    1f40:	20000364 	.word	0x20000364
    1f44:	0000641c 	.word	0x0000641c
    1f48:	200004ae 	.word	0x200004ae
    1f4c:	2000049e 	.word	0x2000049e
    1f50:	00006425 	.word	0x00006425
    1f54:	00006429 	.word	0x00006429

00001f58 <SEGGER_RTT_WriteSkipNoLock>:
*    (2) For performance reasons this function does not call Init()
*        and may only be called after RTT has been initialized.
*        Either by calling SEGGER_RTT_Init() or calling another RTT API function first.
*/
#if (RTT_USE_ASM == 0)
unsigned SEGGER_RTT_WriteSkipNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
    1f58:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  //
  // 1) is the most common case for large buffers and assuming that J-Link reads the data fast enough
  //
  pData = (const char *)pBuffer;
  pRing = &_SEGGER_RTT.aUp[BufferIndex];
  RdOff = pRing->RdOff;
    1f5c:	4f23      	ldr	r7, [pc, #140]	; (1fec <SEGGER_RTT_WriteSkipNoLock+0x94>)
    1f5e:	f04f 0b18 	mov.w	fp, #24
unsigned SEGGER_RTT_WriteSkipNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
    1f62:	4614      	mov	r4, r2
  RdOff = pRing->RdOff;
    1f64:	fb0b 7200 	mla	r2, fp, r0, r7
unsigned SEGGER_RTT_WriteSkipNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
    1f68:	4606      	mov	r6, r0
  RdOff = pRing->RdOff;
    1f6a:	6a93      	ldr	r3, [r2, #40]	; 0x28
  WrOff = pRing->WrOff;
    1f6c:	6a55      	ldr	r5, [r2, #36]	; 0x24
  if (RdOff <= WrOff) {                                 // Case 1), 2) or 3)
    1f6e:	42ab      	cmp	r3, r5
unsigned SEGGER_RTT_WriteSkipNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
    1f70:	4688      	mov	r8, r1
  if (RdOff <= WrOff) {                                 // Case 1), 2) or 3)
    1f72:	d834      	bhi.n	1fde <SEGGER_RTT_WriteSkipNoLock+0x86>
    Avail = pRing->SizeOfBuffer - WrOff - 1u;           // Space until wrap-around (assume 1 byte not usable for case that RdOff == 0)
    1f74:	f8d2 a020 	ldr.w	sl, [r2, #32]
    1f78:	ebaa 0905 	sub.w	r9, sl, r5
    1f7c:	f109 32ff 	add.w	r2, r9, #4294967295	; 0xffffffff
    if (Avail >= NumBytes) {                            // Case 1)?
    1f80:	4294      	cmp	r4, r2
    1f82:	d811      	bhi.n	1fa8 <SEGGER_RTT_WriteSkipNoLock+0x50>
CopyStraight:
      memcpy(pRing->pBuffer + WrOff, pData, NumBytes);
    1f84:	f04f 0918 	mov.w	r9, #24
    1f88:	fb06 9309 	mla	r3, r6, r9, r9
    1f8c:	443b      	add	r3, r7
    1f8e:	4622      	mov	r2, r4
    1f90:	6858      	ldr	r0, [r3, #4]
    1f92:	4641      	mov	r1, r8
    1f94:	4428      	add	r0, r5
    1f96:	f003 fca7 	bl	58e8 <memcpy>
      pRing->WrOff = WrOff + NumBytes;
    1f9a:	fb09 7606 	mla	r6, r9, r6, r7
    1f9e:	442c      	add	r4, r5
      // Therefore, check if 2nd memcpy is necessary at all
      //
      if (NumBytes) {
        memcpy(pRing->pBuffer, pData + Rem, NumBytes);
      }
      pRing->WrOff = NumBytes;
    1fa0:	6274      	str	r4, [r6, #36]	; 0x24
      return 1;
    1fa2:	2001      	movs	r0, #1
    if (Avail >= NumBytes) {                           // Case 4)? => If not, we have case 5) (does not fit)
      goto CopyStraight;
    }
  }
  return 0;     // No space in buffer
}
    1fa4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    Avail += RdOff;                                     // Space incl. wrap-around
    1fa8:	4413      	add	r3, r2
    if (Avail >= NumBytes) {                            // Case 2? => If not, we have case 3) (does not fit)
    1faa:	429c      	cmp	r4, r3
    1fac:	d81b      	bhi.n	1fe6 <SEGGER_RTT_WriteSkipNoLock+0x8e>
      memcpy(pRing->pBuffer + WrOff, pData, Rem);       // Copy 1st chunk
    1fae:	fb00 bb0b 	mla	fp, r0, fp, fp
    1fb2:	44bb      	add	fp, r7
    1fb4:	464a      	mov	r2, r9
    1fb6:	f8db 0004 	ldr.w	r0, [fp, #4]
    1fba:	442c      	add	r4, r5
    1fbc:	4428      	add	r0, r5
    1fbe:	f003 fc93 	bl	58e8 <memcpy>
      if (NumBytes) {
    1fc2:	ebb4 040a 	subs.w	r4, r4, sl
    1fc6:	d006      	beq.n	1fd6 <SEGGER_RTT_WriteSkipNoLock+0x7e>
        memcpy(pRing->pBuffer, pData + Rem, NumBytes);
    1fc8:	f8db 0004 	ldr.w	r0, [fp, #4]
    1fcc:	4622      	mov	r2, r4
    1fce:	eb08 0109 	add.w	r1, r8, r9
    1fd2:	f003 fc89 	bl	58e8 <memcpy>
      pRing->WrOff = NumBytes;
    1fd6:	2018      	movs	r0, #24
    1fd8:	fb00 7606 	mla	r6, r0, r6, r7
    1fdc:	e7e0      	b.n	1fa0 <SEGGER_RTT_WriteSkipNoLock+0x48>
    Avail = RdOff - WrOff - 1u;
    1fde:	3b01      	subs	r3, #1
    1fe0:	1b5b      	subs	r3, r3, r5
    if (Avail >= NumBytes) {                           // Case 4)? => If not, we have case 5) (does not fit)
    1fe2:	42a3      	cmp	r3, r4
    1fe4:	d2ce      	bcs.n	1f84 <SEGGER_RTT_WriteSkipNoLock+0x2c>
  return 0;     // No space in buffer
    1fe6:	2000      	movs	r0, #0
    1fe8:	e7dc      	b.n	1fa4 <SEGGER_RTT_WriteSkipNoLock+0x4c>
    1fea:	bf00      	nop
    1fec:	20000364 	.word	0x20000364

00001ff0 <SEGGER_RTT_HasDataUp>:
unsigned SEGGER_RTT_HasDataUp(unsigned BufferIndex) {
  SEGGER_RTT_BUFFER_UP* pRing;
  unsigned                v;

  pRing = &_SEGGER_RTT.aUp[BufferIndex];
  v = pRing->RdOff;
    1ff0:	4b03      	ldr	r3, [pc, #12]	; (2000 <SEGGER_RTT_HasDataUp+0x10>)
    1ff2:	2218      	movs	r2, #24
    1ff4:	fb02 3300 	mla	r3, r2, r0, r3
    1ff8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
  return pRing->WrOff - v;
    1ffa:	6a58      	ldr	r0, [r3, #36]	; 0x24
}
    1ffc:	1a80      	subs	r0, r0, r2
    1ffe:	4770      	bx	lr
    2000:	20000364 	.word	0x20000364

00002004 <arch_swap>:
 * as BASEPRI is not available.
 */
int arch_swap(unsigned int key)
{
	/* store off key and return value */
	_current->arch.basepri = key;
    2004:	4a09      	ldr	r2, [pc, #36]	; (202c <arch_swap+0x28>)
	_current->arch.swap_return_value = _k_neg_eagain;
    2006:	490a      	ldr	r1, [pc, #40]	; (2030 <arch_swap+0x2c>)
	_current->arch.basepri = key;
    2008:	6893      	ldr	r3, [r2, #8]
	_current->arch.swap_return_value = _k_neg_eagain;
    200a:	6809      	ldr	r1, [r1, #0]
    200c:	67d9      	str	r1, [r3, #124]	; 0x7c

#if defined(CONFIG_CPU_CORTEX_M)
	/* set pending bit to make sure we will take a PendSV exception */
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
    200e:	4909      	ldr	r1, [pc, #36]	; (2034 <arch_swap+0x30>)
	_current->arch.basepri = key;
    2010:	6798      	str	r0, [r3, #120]	; 0x78
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
    2012:	684b      	ldr	r3, [r1, #4]
    2014:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
    2018:	604b      	str	r3, [r1, #4]
    201a:	2300      	movs	r3, #0
    201c:	f383 8811 	msr	BASEPRI, r3
    2020:	f3bf 8f6f 	isb	sy
#endif

	/* Context switch is performed here. Returning implies the
	 * thread has been context-switched-in again.
	 */
	return _current->arch.swap_return_value;
    2024:	6893      	ldr	r3, [r2, #8]
}
    2026:	6fd8      	ldr	r0, [r3, #124]	; 0x7c
    2028:	4770      	bx	lr
    202a:	bf00      	nop
    202c:	20000444 	.word	0x20000444
    2030:	00006208 	.word	0x00006208
    2034:	e000ed00 	.word	0xe000ed00

00002038 <arch_irq_enable>:
#define REG_FROM_IRQ(irq) (irq / NUM_IRQS_PER_REG)
#define BIT_FROM_IRQ(irq) (irq % NUM_IRQS_PER_REG)

void arch_irq_enable(unsigned int irq)
{
	NVIC_EnableIRQ((IRQn_Type)irq);
    2038:	b243      	sxtb	r3, r0
  if ((int32_t)(IRQn) >= 0)
    203a:	2b00      	cmp	r3, #0
    203c:	db08      	blt.n	2050 <arch_irq_enable+0x18>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    203e:	2201      	movs	r2, #1
    2040:	f000 001f 	and.w	r0, r0, #31
    2044:	fa02 f000 	lsl.w	r0, r2, r0
    2048:	095b      	lsrs	r3, r3, #5
    204a:	4a02      	ldr	r2, [pc, #8]	; (2054 <arch_irq_enable+0x1c>)
    204c:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
}
    2050:	4770      	bx	lr
    2052:	bf00      	nop
    2054:	e000e100 	.word	0xe000e100

00002058 <arch_irq_is_enabled>:
	NVIC_DisableIRQ((IRQn_Type)irq);
}

int arch_irq_is_enabled(unsigned int irq)
{
	return NVIC->ISER[REG_FROM_IRQ(irq)] & BIT(BIT_FROM_IRQ(irq));
    2058:	4b05      	ldr	r3, [pc, #20]	; (2070 <arch_irq_is_enabled+0x18>)
    205a:	0942      	lsrs	r2, r0, #5
    205c:	f000 001f 	and.w	r0, r0, #31
    2060:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
    2064:	2301      	movs	r3, #1
    2066:	fa03 f000 	lsl.w	r0, r3, r0
}
    206a:	4010      	ands	r0, r2
    206c:	4770      	bx	lr
    206e:	bf00      	nop
    2070:	e000e100 	.word	0xe000e100

00002074 <z_arm_irq_priority_set>:
	 */
	__ASSERT(prio <= (BIT(NUM_IRQ_PRIO_BITS) - 1),
		 "invalid priority %d! values must be less than %lu\n",
		 prio - _IRQ_PRIO_OFFSET,
		 BIT(NUM_IRQ_PRIO_BITS) - (_IRQ_PRIO_OFFSET));
	NVIC_SetPriority((IRQn_Type)irq, prio);
    2074:	b243      	sxtb	r3, r0
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
    2076:	2b00      	cmp	r3, #0
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    2078:	bfa8      	it	ge
    207a:	f103 4360 	addge.w	r3, r3, #3758096384	; 0xe0000000
	prio += _IRQ_PRIO_OFFSET;
    207e:	f101 0101 	add.w	r1, r1, #1
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    2082:	bfb8      	it	lt
    2084:	4b06      	ldrlt	r3, [pc, #24]	; (20a0 <z_arm_irq_priority_set+0x2c>)
    2086:	ea4f 1141 	mov.w	r1, r1, lsl #5
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    208a:	bfac      	ite	ge
    208c:	f503 4361 	addge.w	r3, r3, #57600	; 0xe100
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    2090:	f000 000f 	andlt.w	r0, r0, #15
    2094:	b2c9      	uxtb	r1, r1
    2096:	bfb4      	ite	lt
    2098:	5419      	strblt	r1, [r3, r0]
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    209a:	f883 1300 	strbge.w	r1, [r3, #768]	; 0x300
}
    209e:	4770      	bx	lr
    20a0:	e000ed14 	.word	0xe000ed14

000020a4 <arch_new_thread>:

#if defined(CONFIG_CPU_CORTEX_M)
	/* force ARM mode by clearing LSB of address */
	iframe->pc &= 0xfffffffe;
#endif
	iframe->a1 = (uint32_t)entry;
    20a4:	f842 3c20 	str.w	r3, [r2, #-32]
	iframe->a2 = (uint32_t)p1;
    20a8:	9b00      	ldr	r3, [sp, #0]
    20aa:	f842 3c1c 	str.w	r3, [r2, #-28]
	iframe->pc &= 0xfffffffe;
    20ae:	490a      	ldr	r1, [pc, #40]	; (20d8 <arch_new_thread+0x34>)
	iframe->a3 = (uint32_t)p2;
    20b0:	9b01      	ldr	r3, [sp, #4]
    20b2:	f842 3c18 	str.w	r3, [r2, #-24]
	iframe->a4 = (uint32_t)p3;
    20b6:	9b02      	ldr	r3, [sp, #8]
    20b8:	f842 3c14 	str.w	r3, [r2, #-20]
	iframe->pc &= 0xfffffffe;
    20bc:	f021 0101 	bic.w	r1, r1, #1

#if defined(CONFIG_CPU_CORTEX_M)
	iframe->xpsr =
    20c0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
    20c4:	f842 3c04 	str.w	r3, [r2, #-4]
	iframe->pc &= 0xfffffffe;
    20c8:	f842 1c08 	str.w	r1, [r2, #-8]
	iframe->xpsr |= T_BIT;
#endif /* CONFIG_COMPILER_ISA_THUMB2 */
#endif /* CONFIG_CPU_CORTEX_M */

	thread->callee_saved.psp = (uint32_t)iframe;
	thread->arch.basepri = 0;
    20cc:	2300      	movs	r3, #0
	iframe = Z_STACK_PTR_TO_FRAME(struct __basic_sf, stack_ptr);
    20ce:	3a20      	subs	r2, #32
	thread->callee_saved.psp = (uint32_t)iframe;
    20d0:	6582      	str	r2, [r0, #88]	; 0x58
	thread->arch.basepri = 0;
    20d2:	6783      	str	r3, [r0, #120]	; 0x78
#endif
	/*
	 * initial values in all other registers/thread entries are
	 * irrelevant.
	 */
}
    20d4:	4770      	bx	lr
    20d6:	bf00      	nop
    20d8:	00004f11 	.word	0x00004f11

000020dc <z_check_thread_stack_fail>:
 *         thread stack corruption, otherwise return 0.
 */
uint32_t z_check_thread_stack_fail(const uint32_t fault_addr, const uint32_t psp)
{
#if defined(CONFIG_MULTITHREADING)
	const struct k_thread *thread = _current;
    20dc:	4a0b      	ldr	r2, [pc, #44]	; (210c <z_check_thread_stack_fail+0x30>)
{
    20de:	4603      	mov	r3, r0
	const struct k_thread *thread = _current;
    20e0:	6890      	ldr	r0, [r2, #8]

	if (!thread) {
    20e2:	b190      	cbz	r0, 210a <z_check_thread_stack_fail+0x2e>
			return thread->stack_info.start;
		}
	}
#else /* CONFIG_USERSPACE */
#if defined(CONFIG_MULTITHREADING)
	if (IS_MPU_GUARD_VIOLATION(thread->stack_info.start - guard_len,
    20e4:	f113 0f16 	cmn.w	r3, #22
    20e8:	6e80      	ldr	r0, [r0, #104]	; 0x68
    20ea:	d005      	beq.n	20f8 <z_check_thread_stack_fail+0x1c>
    20ec:	f1a0 0220 	sub.w	r2, r0, #32
    20f0:	429a      	cmp	r2, r3
    20f2:	d806      	bhi.n	2102 <z_check_thread_stack_fail+0x26>
    20f4:	4283      	cmp	r3, r0
    20f6:	d204      	bcs.n	2102 <z_check_thread_stack_fail+0x26>
    20f8:	4281      	cmp	r1, r0
    20fa:	bf2c      	ite	cs
    20fc:	2100      	movcs	r1, #0
    20fe:	2101      	movcc	r1, #1
    2100:	e000      	b.n	2104 <z_check_thread_stack_fail+0x28>
    2102:	2100      	movs	r1, #0
    2104:	2900      	cmp	r1, #0
		return (uint32_t)Z_THREAD_STACK_BUFFER(z_main_stack);
	}
#endif
#endif /* CONFIG_USERSPACE */

	return 0;
    2106:	bf08      	it	eq
    2108:	2000      	moveq	r0, #0
}
    210a:	4770      	bx	lr
    210c:	20000444 	.word	0x20000444

00002110 <arch_switch_to_main_thread>:
#endif
}

void arch_switch_to_main_thread(struct k_thread *main_thread, char *stack_ptr,
				k_thread_entry_t _main)
{
    2110:	b508      	push	{r3, lr}
    2112:	4604      	mov	r4, r0
    2114:	460e      	mov	r6, r1
    2116:	4615      	mov	r5, r2
	z_arm_configure_static_mpu_regions();
    2118:	f000 fb66 	bl	27e8 <z_arm_configure_static_mpu_regions>
	z_arm_prepare_switch_to_main();

	_current = main_thread;
    211c:	4b08      	ldr	r3, [pc, #32]	; (2140 <arch_switch_to_main_thread+0x30>)
#if defined(CONFIG_MPU_STACK_GUARD) || defined(CONFIG_USERSPACE)
	/*
	 * If stack protection is enabled, make sure to set it
	 * before jumping to thread entry function
	 */
	z_arm_configure_dynamic_mpu_regions(main_thread);
    211e:	4620      	mov	r0, r4
	_current = main_thread;
    2120:	609c      	str	r4, [r3, #8]
	z_arm_configure_dynamic_mpu_regions(main_thread);
    2122:	f000 fb7d 	bl	2820 <z_arm_configure_dynamic_mpu_regions>

	/*
	 * Set PSP to the highest address of the main stack
	 * before enabling interrupts and jumping to main.
	 */
	__asm__ volatile (
    2126:	4628      	mov	r0, r5
    2128:	f386 8809 	msr	PSP, r6
    212c:	2100      	movs	r1, #0
    212e:	b663      	cpsie	if
    2130:	f381 8811 	msr	BASEPRI, r1
    2134:	f3bf 8f6f 	isb	sy
    2138:	2200      	movs	r2, #0
    213a:	2300      	movs	r3, #0
    213c:	f002 fee8 	bl	4f10 <z_thread_entry>
	:
	: "r" (_main), "r" (stack_ptr)
	: "r0" /* not to be overwritten by msr PSP, %1 */
	);

	CODE_UNREACHABLE;
    2140:	20000444 	.word	0x20000444

00002144 <z_arm_fatal_error>:
	LOG_ERR("Faulting instruction address (r15/pc): 0x%08x",
		esf->basic.pc);
}

void z_arm_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
    2144:	b573      	push	{r0, r1, r4, r5, r6, lr}
    2146:	4606      	mov	r6, r0

	if (esf != NULL) {
    2148:	460c      	mov	r4, r1
    214a:	b301      	cbz	r1, 218e <z_arm_fatal_error+0x4a>
	return ((uint8_t *)data - (uint8_t *)__log_const_start)/
    214c:	4b13      	ldr	r3, [pc, #76]	; (219c <z_arm_fatal_error+0x58>)
    214e:	4d14      	ldr	r5, [pc, #80]	; (21a0 <z_arm_fatal_error+0x5c>)
	LOG_ERR("r0/a1:  0x%08x  r1/a2:  0x%08x  r2/a3:  0x%08x",
    2150:	4814      	ldr	r0, [pc, #80]	; (21a4 <z_arm_fatal_error+0x60>)
    2152:	1aed      	subs	r5, r5, r3
    2154:	08ed      	lsrs	r5, r5, #3
    2156:	01ad      	lsls	r5, r5, #6
    2158:	f045 0501 	orr.w	r5, r5, #1
    215c:	f8ad 5000 	strh.w	r5, [sp]
    2160:	e9d1 2301 	ldrd	r2, r3, [r1, #4]
    2164:	6809      	ldr	r1, [r1, #0]
    2166:	f003 f898 	bl	529a <log_3>
	LOG_ERR("r3/a4:  0x%08x r12/ip:  0x%08x r14/lr:  0x%08x",
    216a:	f8ad 5000 	strh.w	r5, [sp]
    216e:	e9d4 2304 	ldrd	r2, r3, [r4, #16]
    2172:	68e1      	ldr	r1, [r4, #12]
    2174:	480c      	ldr	r0, [pc, #48]	; (21a8 <z_arm_fatal_error+0x64>)
    2176:	f003 f890 	bl	529a <log_3>
	LOG_ERR(" xpsr:  0x%08x", esf->basic.xpsr);
    217a:	69e1      	ldr	r1, [r4, #28]
    217c:	480b      	ldr	r0, [pc, #44]	; (21ac <z_arm_fatal_error+0x68>)
    217e:	462a      	mov	r2, r5
    2180:	f003 f85e 	bl	5240 <log_1>
	LOG_ERR("Faulting instruction address (r15/pc): 0x%08x",
    2184:	69a1      	ldr	r1, [r4, #24]
    2186:	480a      	ldr	r0, [pc, #40]	; (21b0 <z_arm_fatal_error+0x6c>)
    2188:	462a      	mov	r2, r5
    218a:	f003 f859 	bl	5240 <log_1>
		esf_dump(esf);
	}
	z_fatal_error(reason, esf);
    218e:	4621      	mov	r1, r4
    2190:	4630      	mov	r0, r6
}
    2192:	b002      	add	sp, #8
    2194:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	z_fatal_error(reason, esf);
    2198:	f001 bc84 	b.w	3aa4 <z_fatal_error>
    219c:	0000602c 	.word	0x0000602c
    21a0:	0000604c 	.word	0x0000604c
    21a4:	00006430 	.word	0x00006430
    21a8:	0000645f 	.word	0x0000645f
    21ac:	0000648e 	.word	0x0000648e
    21b0:	0000649d 	.word	0x0000649d

000021b4 <z_arm_prep_c>:
#else
#define VECTOR_ADDRESS CONFIG_SRAM_BASE_ADDRESS
#endif
static inline void relocate_vector_table(void)
{
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
    21b4:	4a0e      	ldr	r2, [pc, #56]	; (21f0 <z_arm_prep_c+0x3c>)
 * This routine prepares for the execution of and runs C code.
 *
 * @return N/A
 */
void z_arm_prep_c(void)
{
    21b6:	b508      	push	{r3, lr}
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
    21b8:	4b0e      	ldr	r3, [pc, #56]	; (21f4 <z_arm_prep_c+0x40>)
    21ba:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
    21be:	609a      	str	r2, [r3, #8]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
    21c0:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    21c4:	f3bf 8f6f 	isb	sy
	SCB->CPACR &= (~(CPACR_CP10_Msk | CPACR_CP11_Msk));
    21c8:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
    21cc:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
    21d0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  __ASM volatile ("MRS %0, control" : "=r" (result) );
    21d4:	f3ef 8314 	mrs	r3, CONTROL
	__set_CONTROL(__get_CONTROL() & (~(CONTROL_FPCA_Msk)));
    21d8:	f023 0304 	bic.w	r3, r3, #4
  __ASM volatile ("MSR control, %0" : : "r" (control) : "memory");
    21dc:	f383 8814 	msr	CONTROL, r3
	relocate_vector_table();
#if defined(CONFIG_CPU_HAS_FPU)
	z_arm_floating_point_init();
#endif
	z_bss_zero();
    21e0:	f001 fcfa 	bl	3bd8 <z_bss_zero>
	z_data_copy();
    21e4:	f001 fd02 	bl	3bec <z_data_copy>
#if defined(CONFIG_ARMV7_R) && defined(CONFIG_INIT_STACKS)
	z_arm_init_stacks();
#endif
	z_arm_interrupt_init();
    21e8:	f000 fad0 	bl	278c <z_arm_interrupt_init>
	z_cstart();
    21ec:	f001 fd3c 	bl	3c68 <z_cstart>
    21f0:	00000000 	.word	0x00000000
    21f4:	e000ed00 	.word	0xe000ed00

000021f8 <z_arm_pendsv>:
    pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_TRACING */

    /* load _kernel into r1 and current k_thread into r2 */
    ldr r1, =_kernel
    21f8:	4912      	ldr	r1, [pc, #72]	; (2244 <z_arm_pendsv+0x4c>)
    ldr r2, [r1, #_kernel_offset_to_current]
    21fa:	688a      	ldr	r2, [r1, #8]

    /* addr of callee-saved regs in thread in r0 */
    ldr r0, =_thread_offset_to_callee_saved
    21fc:	f04f 0038 	mov.w	r0, #56	; 0x38
    add r0, r2
    2200:	4410      	add	r0, r2

    /* save callee-saved + psp in thread */
#if defined(CONFIG_CPU_CORTEX_M)
    mrs ip, PSP
    2202:	f3ef 8c09 	mrs	ip, PSP
    mov r6, r11
    mov r7, ip
    /* store r8-12 */
    stmea r0!, {r3-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    stmia r0, {v1-v8, ip}
    2206:	e880 1ff0 	stmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}

    /* Protect the kernel state while we play with the thread lists */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
    220a:	2020      	movs	r0, #32
    msr BASEPRI, r0
    220c:	f380 8811 	msr	BASEPRI, r0
    isb /* Make the effect of disabling interrupts be realized immediately */
    2210:	f3bf 8f6f 	isb	sy
     * the new thread is context-switched in since all decisions
     * to pend PendSV have been taken with the current kernel
     * state and this is what we're handling currently.
     */
#if defined(CONFIG_CPU_CORTEX_M)
    ldr v4, =_SCS_ICSR
    2214:	4f0c      	ldr	r7, [pc, #48]	; (2248 <z_arm_pendsv+0x50>)
    ldr v3, =_SCS_ICSR_UNPENDSV
    2216:	f04f 6600 	mov.w	r6, #134217728	; 0x8000000
#endif

    /* _kernel is still in r1 */

    /* fetch the thread to run from the ready queue cache */
    ldr r2, [r1, #_kernel_offset_to_ready_q_cache]
    221a:	6a8a      	ldr	r2, [r1, #40]	; 0x28

    str r2, [r1, #_kernel_offset_to_current]
    221c:	608a      	str	r2, [r1, #8]
     * has been handled.
     */

    /* _SCS_ICSR is still in v4 and _SCS_ICSR_UNPENDSV in v3 */
#if defined(CONFIG_CPU_CORTEX_M)
    str v3, [v4, #0]
    221e:	603e      	str	r6, [r7, #0]

    ldr r0, [r4]
    movs.n r3, #0
    str r3, [r4]
#else
    ldr r0, [r2, #_thread_offset_to_basepri]
    2220:	6f90      	ldr	r0, [r2, #120]	; 0x78
    movs r3, #0
    2222:	2300      	movs	r3, #0
    str r3, [r2, #_thread_offset_to_basepri]
    2224:	6793      	str	r3, [r2, #120]	; 0x78
    /* restore r4-r7, go back 9*4 bytes to the start of the stored block */
    subs r0, #36
    ldmia r0!, {r4-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    /* restore BASEPRI for the incoming thread */
    msr BASEPRI, r0
    2226:	f380 8811 	msr	BASEPRI, r0
    isb
#endif

#if defined(CONFIG_MPU_STACK_GUARD) || defined(CONFIG_USERSPACE)
    /* Re-program dynamic memory map */
    push {r2,lr}
    222a:	b504      	push	{r2, lr}
    mov r0, r2 /* _current thread */
    222c:	4610      	mov	r0, r2
    bl z_arm_configure_dynamic_mpu_regions
    222e:	f000 faf7 	bl	2820 <z_arm_configure_dynamic_mpu_regions>
    pop {r2,lr}
    2232:	e8bd 4004 	ldmia.w	sp!, {r2, lr}
    isb

#endif

    /* load callee-saved + psp from thread */
    add r0, r2, #_thread_offset_to_callee_saved
    2236:	f102 0038 	add.w	r0, r2, #56	; 0x38
    ldmia r0, {v1-v8, ip}
    223a:	e890 1ff0 	ldmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
    msr PSP, ip
    223e:	f38c 8809 	msr	PSP, ip

    /*
     * Cortex-M: return from PendSV exception
     * Cortex-R: return to the caller (_IntExit or z_arm_svc)
     */
    bx lr
    2242:	4770      	bx	lr
    ldr r1, =_kernel
    2244:	20000444 	.word	0x20000444
    ldr v4, =_SCS_ICSR
    2248:	e000ed04 	.word	0xe000ed04

0000224c <z_arm_svc>:
  bne _stack_frame_endif
_stack_frame_msp:
  mrs r0, MSP
_stack_frame_endif:
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    tst lr, #0x4    /* did we come from thread mode ? */
    224c:	f01e 0f04 	tst.w	lr, #4
    ite eq  /* if zero (equal), came from handler mode */
    2250:	bf0c      	ite	eq
        mrseq r0, MSP   /* handler mode, stack frame is on MSP */
    2252:	f3ef 8008 	mrseq	r0, MSP
        mrsne r0, PSP   /* thread mode, stack frame is on PSP */
    2256:	f3ef 8009 	mrsne	r0, PSP
#endif


    /* Figure out what SVC call number was invoked */

    ldr r1, [r0, #24]   /* grab address of PC from stack frame */
    225a:	6981      	ldr	r1, [r0, #24]
     */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    subs r1, r1, #2
    ldrb r1, [r1]
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    ldrb r1, [r1, #-2]
    225c:	f811 1c02 	ldrb.w	r1, [r1, #-2]
#endif
    bne _oops

#endif /* CONFIG_USERSPACE */

    cmp r1, #2
    2260:	2902      	cmp	r1, #2
    beq _oops
    2262:	d0ff      	beq.n	2264 <_oops>

00002264 <_oops>:
    /* exception return is done in z_arm_int_exit() */
    b z_arm_int_exit
#endif

_oops:
    push {r0, lr}
    2264:	b501      	push	{r0, lr}
    bl z_do_kernel_oops
    2266:	f003 fb04 	bl	5872 <z_do_kernel_oops>
    /* return from SVC exception is done here */
    pop {r0, pc}
    226a:	bd01      	pop	{r0, pc}

0000226c <z_arm_cpu_idle_init>:
 * void z_arm_cpu_idle_init(void);
 */

SECTION_FUNC(TEXT, z_arm_cpu_idle_init)
#if defined(CONFIG_CPU_CORTEX_M)
	ldr	r1, =_SCB_SCR
    226c:	4901      	ldr	r1, [pc, #4]	; (2274 <z_arm_cpu_idle_init+0x8>)
	movs.n	r2, #_SCR_INIT_BITS
    226e:	2210      	movs	r2, #16
	str	r2, [r1]
    2270:	600a      	str	r2, [r1, #0]
#endif
	bx	lr
    2272:	4770      	bx	lr
	ldr	r1, =_SCB_SCR
    2274:	e000ed10 	.word	0xe000ed10

00002278 <arch_cpu_idle>:
	 * before entering low power state.
	 *
	 * Set PRIMASK before configuring BASEPRI to prevent interruption
	 * before wake-up.
	 */
	cpsid	i
    2278:	b672      	cpsid	i

	/*
	 * Set wake-up interrupt priority to the lowest and synchronise to
	 * ensure that this is visible to the WFI instruction.
	 */
	eors.n	r0, r0
    227a:	4040      	eors	r0, r0
	msr	BASEPRI, r0
    227c:	f380 8811 	msr	BASEPRI, r0
	isb
    2280:	f3bf 8f6f 	isb	sy

	/*
	 * Wait for all memory transactions to complete before entering low
	 * power state.
	 */
	dsb
    2284:	f3bf 8f4f 	dsb	sy

	/* Enter low power state */
	wfi
    2288:	bf30      	wfi

	/*
	 * Clear PRIMASK and flush instruction buffer to immediately service
	 * the wake-up interrupt.
	 */
	cpsie	i
    228a:	b662      	cpsie	i
	isb
    228c:	f3bf 8f6f 	isb	sy

	bx	lr
    2290:	4770      	bx	lr
    2292:	bf00      	nop

00002294 <arch_cpu_atomic_idle>:

	/*
	 * Lock PRIMASK while sleeping: wfe will still get interrupted by
	 * incoming interrupts but the CPU will not service them right away.
	 */
	cpsid	i
    2294:	b672      	cpsid	i
	cpsie	i
_irq_disabled:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* r1: zero, for setting BASEPRI (needs a register) */
	eors.n	r1, r1
    2296:	4049      	eors	r1, r1

	/* unlock BASEPRI so wfe gets interrupted by incoming interrupts */
	msr	BASEPRI, r1
    2298:	f381 8811 	msr	BASEPRI, r1

	wfe
    229c:	bf20      	wfe

	msr	BASEPRI, r0
    229e:	f380 8811 	msr	BASEPRI, r0
	cpsie	i
    22a2:	b662      	cpsie	i
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
	bx	lr
    22a4:	4770      	bx	lr
    22a6:	bf00      	nop

000022a8 <z_SysNmiOnReset>:
_ASM_FILE_PROLOGUE

GTEXT(z_SysNmiOnReset)

SECTION_FUNC(TEXT, z_SysNmiOnReset)
    wfi
    22a8:	bf30      	wfi
    b z_SysNmiOnReset
    22aa:	f7ff bffd 	b.w	22a8 <z_SysNmiOnReset>
    22ae:	bf00      	nop

000022b0 <_isr_wrapper>:
 * @return N/A
 */
SECTION_FUNC(TEXT, _isr_wrapper)

#if defined(CONFIG_CPU_CORTEX_M)
	push {r0,lr}		/* r0, lr are now the first items on the stack */
    22b0:	b501      	push	{r0, lr}
	 * Disable interrupts to prevent nesting while exiting idle state. This
	 * is only necessary for the Cortex-M because it is the only ARM
	 * architecture variant that automatically enables interrupts when
	 * entering an ISR.
	 */
	cpsid i  /* PRIMASK = 1 */
    22b2:	b672      	cpsid	i
#endif

	/* is this a wakeup from idle ? */
	ldr r2, =_kernel
    22b4:	4a0b      	ldr	r2, [pc, #44]	; (22e4 <_isr_wrapper+0x34>)
	/* requested idle duration, in ticks */
	ldr r0, [r2, #_kernel_offset_to_idle]
    22b6:	6a50      	ldr	r0, [r2, #36]	; 0x24
	cmp r0, #0
    22b8:	2800      	cmp	r0, #0
	str r1, [r2, #_kernel_offset_to_idle]
	bl z_sys_power_save_idle_exit
_idle_state_cleared:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	ittt ne
    22ba:	bf1e      	ittt	ne
	movne	r1, #0
    22bc:	2100      	movne	r1, #0
		/* clear kernel idle state */
		strne	r1, [r2, #_kernel_offset_to_idle]
    22be:	6251      	strne	r1, [r2, #36]	; 0x24
		blne	z_sys_power_save_idle_exit
    22c0:	f003 fc71 	blne	5ba6 <z_sys_power_save_idle_exit>
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
	cpsie i		/* re-enable interrupts (PRIMASK = 0) */
    22c4:	b662      	cpsie	i
#endif

#endif /* CONFIG_SYS_POWER_MANAGEMENT */

#if defined(CONFIG_CPU_CORTEX_M)
	mrs r0, IPSR	/* get exception number */
    22c6:	f3ef 8005 	mrs	r0, IPSR
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r1, =16
	subs r0, r1	/* get IRQ number */
	lsls r0, #3	/* table is 8-byte wide */
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	sub r0, r0, #16	/* get IRQ number */
    22ca:	f1a0 0010 	sub.w	r0, r0, #16
	lsl r0, r0, #3	/* table is 8-byte wide */
    22ce:	ea4f 00c0 	mov.w	r0, r0, lsl #3
	 * interface function.
	 */
	cpsie i
#endif /* !CONFIG_CPU_CORTEX_M */

	ldr r1, =_sw_isr_table
    22d2:	4905      	ldr	r1, [pc, #20]	; (22e8 <_isr_wrapper+0x38>)
	add r1, r1, r0	/* table entry: ISRs must have their MSB set to stay
    22d4:	4401      	add	r1, r0
			 * in thumb mode */

	ldm r1!,{r0,r3}	/* arg in r0, ISR in r3 */
    22d6:	c909      	ldmia	r1!, {r0, r3}
	blx r3		/* call ISR */
    22d8:	4798      	blx	r3

#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	pop {r0, r3}
	mov lr, r3
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	pop {r0, lr}
    22da:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	/* Use 'bx' instead of 'b' because 'bx' can jump further, and use
	 * 'bx' instead of 'blx' because exception return is done in
	 * z_arm_int_exit() */
	ldr r1, =z_arm_int_exit
    22de:	4903      	ldr	r1, [pc, #12]	; (22ec <_isr_wrapper+0x3c>)
	bx r1
    22e0:	4708      	bx	r1
    22e2:	0000      	.short	0x0000
	ldr r2, =_kernel
    22e4:	20000444 	.word	0x20000444
	ldr r1, =_sw_isr_table
    22e8:	00005ef4 	.word	0x00005ef4
	ldr r1, =z_arm_int_exit
    22ec:	00002335 	.word	0x00002335

000022f0 <__start>:
#endif /* CONFIG_CPU_CORTEX_M_HAS_SPLIM */

#endif /* CONFIG_INIT_ARCH_HW_AT_BOOT */

#if defined(CONFIG_PLATFORM_SPECIFIC_INIT)
    bl z_platform_init
    22f0:	f003 fb4b 	bl	598a <z_platform_init>

    /* lock interrupts: will get unlocked when switch to main task */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
    22f4:	2020      	movs	r0, #32
    msr BASEPRI, r0
    22f6:	f380 8811 	msr	BASEPRI, r0

    /*
     * Set PSP and use it to boot without using MSP, so that it
     * gets set to z_interrupt_stacks during initialization.
     */
    ldr r0, =z_interrupt_stacks
    22fa:	4808      	ldr	r0, [pc, #32]	; (231c <__start+0x2c>)
    ldr r1, =CONFIG_ISR_STACK_SIZE + MPU_GUARD_ALIGN_AND_SIZE
    22fc:	f44f 6102 	mov.w	r1, #2080	; 0x820
    adds r0, r0, r1
    2300:	1840      	adds	r0, r0, r1
    msr PSP, r0
    2302:	f380 8809 	msr	PSP, r0
    mrs r0, CONTROL
    2306:	f3ef 8014 	mrs	r0, CONTROL
    movs r1, #2
    230a:	2102      	movs	r1, #2
    orrs r0, r1 /* CONTROL_SPSEL_Msk */
    230c:	4308      	orrs	r0, r1
    msr CONTROL, r0
    230e:	f380 8814 	msr	CONTROL, r0
    /*
     * When changing the stack pointer, software must use an ISB instruction
     * immediately after the MSR instruction. This ensures that instructions
     * after the ISB instruction execute using the new stack pointer.
     */
    isb
    2312:	f3bf 8f6f 	isb	sy
    /*
     * 'bl' jumps the furthest of the branch instructions that are
     * supported on all platforms. So it is used when jumping to z_arm_prep_c
     * (even though we do not intend to return).
     */
    bl z_arm_prep_c
    2316:	f7ff ff4d 	bl	21b4 <z_arm_prep_c>
    231a:	0000      	.short	0x0000
    ldr r0, =z_interrupt_stacks
    231c:	20001160 	.word	0x20001160

00002320 <z_arm_bus_fault>:
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
SECTION_SUBSEC_FUNC(TEXT,__fault,z_arm_exc_spurious)

	mrs r0, MSP
    2320:	f3ef 8008 	mrs	r0, MSP
	mrs r1, PSP
    2324:	f3ef 8109 	mrs	r1, PSP
	push {r0, lr}
    2328:	b501      	push	{r0, lr}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	push {r4-r11}
#endif
	mov  r3, sp /* pointer to _callee_saved_t */
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
	mov r2, lr /* EXC_RETURN */
    232a:	4672      	mov	r2, lr
	bl z_arm_fault
    232c:	f000 f958 	bl	25e0 <z_arm_fault>
	 * in this routine. Therefore, we can just reset
	 * the MSP to its value prior to entering the function
	 */
	add sp, #40
#endif
	pop {r0, pc}
    2330:	bd01      	pop	{r0, pc}
    2332:	bf00      	nop

00002334 <z_arm_exc_exit>:
 */

SECTION_SUBSEC_FUNC(TEXT, _HandlerModeExit, z_arm_exc_exit)

#ifdef CONFIG_PREEMPT_ENABLED
	ldr r3, =_kernel
    2334:	4b04      	ldr	r3, [pc, #16]	; (2348 <_EXIT_EXC+0x2>)

	ldr r1, [r3, #_kernel_offset_to_current]
    2336:	6899      	ldr	r1, [r3, #8]
	ldr r0, [r3, #_kernel_offset_to_ready_q_cache]
    2338:	6a98      	ldr	r0, [r3, #40]	; 0x28
	cmp r0, r1
    233a:	4288      	cmp	r0, r1
	beq _EXIT_EXC
    233c:	d003      	beq.n	2346 <_EXIT_EXC>

	/* context switch required, pend the PendSV exception */
	ldr r1, =_SCS_ICSR
    233e:	4903      	ldr	r1, [pc, #12]	; (234c <_EXIT_EXC+0x6>)
	ldr r2, =_SCS_ICSR_PENDSV
    2340:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
	str r2, [r1]
    2344:	600a      	str	r2, [r1, #0]

00002346 <_EXIT_EXC>:
#else
	pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_STACK_SENTINEL */

	bx lr
    2346:	4770      	bx	lr
	ldr r3, =_kernel
    2348:	20000444 	.word	0x20000444
	ldr r1, =_SCS_ICSR
    234c:	e000ed04 	.word	0xe000ed04

00002350 <mem_manage_fault>:
 *
 * @return error code to identify the fatal error reason
 */
static uint32_t mem_manage_fault(z_arch_esf_t *esf, int from_hard_fault,
			      bool *recoverable)
{
    2350:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    2354:	4b33      	ldr	r3, [pc, #204]	; (2424 <mem_manage_fault+0xd4>)
    2356:	4c34      	ldr	r4, [pc, #208]	; (2428 <mem_manage_fault+0xd8>)
	uint32_t reason = K_ERR_CPU_EXCEPTION;
	uint32_t mmfar = -EINVAL;

	PR_FAULT_INFO("***** MPU FAULT *****");

	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) != 0) {
    2358:	4d34      	ldr	r5, [pc, #208]	; (242c <mem_manage_fault+0xdc>)
    235a:	1ae4      	subs	r4, r4, r3
    235c:	08e4      	lsrs	r4, r4, #3
	PR_FAULT_INFO("***** MPU FAULT *****");
    235e:	01a4      	lsls	r4, r4, #6
    2360:	f044 0901 	orr.w	r9, r4, #1
{
    2364:	4607      	mov	r7, r0
    2366:	4688      	mov	r8, r1
	PR_FAULT_INFO("***** MPU FAULT *****");
    2368:	4831      	ldr	r0, [pc, #196]	; (2430 <mem_manage_fault+0xe0>)
    236a:	4649      	mov	r1, r9
{
    236c:	4616      	mov	r6, r2
	PR_FAULT_INFO("***** MPU FAULT *****");
    236e:	f002 ff5a 	bl	5226 <log_0>
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) != 0) {
    2372:	6aaa      	ldr	r2, [r5, #40]	; 0x28
    2374:	06d0      	lsls	r0, r2, #27
    2376:	d503      	bpl.n	2380 <mem_manage_fault+0x30>
		PR_FAULT_INFO("  Stacking error (context area might be"
    2378:	482e      	ldr	r0, [pc, #184]	; (2434 <mem_manage_fault+0xe4>)
    237a:	4649      	mov	r1, r9
    237c:	f002 ff53 	bl	5226 <log_0>
			" not valid)");
	}
	if ((SCB->CFSR & SCB_CFSR_MUNSTKERR_Msk) != 0) {
    2380:	6aab      	ldr	r3, [r5, #40]	; 0x28
    2382:	0719      	lsls	r1, r3, #28
    2384:	d504      	bpl.n	2390 <mem_manage_fault+0x40>
		PR_FAULT_INFO("  Unstacking error");
    2386:	482c      	ldr	r0, [pc, #176]	; (2438 <mem_manage_fault+0xe8>)
    2388:	f044 0101 	orr.w	r1, r4, #1
    238c:	f002 ff4b 	bl	5226 <log_0>
	}
	if ((SCB->CFSR & SCB_CFSR_DACCVIOL_Msk) != 0) {
    2390:	4d26      	ldr	r5, [pc, #152]	; (242c <mem_manage_fault+0xdc>)
    2392:	6aab      	ldr	r3, [r5, #40]	; 0x28
    2394:	079a      	lsls	r2, r3, #30
    2396:	d535      	bpl.n	2404 <mem_manage_fault+0xb4>
		PR_FAULT_INFO("  Data Access Violation");
    2398:	f044 0a01 	orr.w	sl, r4, #1
    239c:	4827      	ldr	r0, [pc, #156]	; (243c <mem_manage_fault+0xec>)
    239e:	4651      	mov	r1, sl
    23a0:	f002 ff41 	bl	5226 <log_0>
		 * The MMFAR address is valid only if this bit is 1.
		 *
		 * Software must follow this sequence because another higher
		 * priority exception might change the MMFAR value.
		 */
		mmfar = SCB->MMFAR;
    23a4:	f8d5 9034 	ldr.w	r9, [r5, #52]	; 0x34

		if ((SCB->CFSR & SCB_CFSR_MMARVALID_Msk) != 0) {
    23a8:	6aab      	ldr	r3, [r5, #40]	; 0x28
    23aa:	061b      	lsls	r3, r3, #24
    23ac:	d50b      	bpl.n	23c6 <mem_manage_fault+0x76>
			PR_EXC("  MMFAR Address: 0x%x", mmfar);
    23ae:	4824      	ldr	r0, [pc, #144]	; (2440 <mem_manage_fault+0xf0>)
    23b0:	4652      	mov	r2, sl
    23b2:	4649      	mov	r1, r9
    23b4:	f002 ff44 	bl	5240 <log_1>
			if (from_hard_fault) {
    23b8:	f1b8 0f00 	cmp.w	r8, #0
    23bc:	d003      	beq.n	23c6 <mem_manage_fault+0x76>
				/* clear SCB_MMAR[VALID] to reset */
				SCB->CFSR &= ~SCB_CFSR_MMARVALID_Msk;
    23be:	6aab      	ldr	r3, [r5, #40]	; 0x28
    23c0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    23c4:	62ab      	str	r3, [r5, #40]	; 0x28
			}
		}
	}
	if ((SCB->CFSR & SCB_CFSR_IACCVIOL_Msk) != 0) {
    23c6:	4d19      	ldr	r5, [pc, #100]	; (242c <mem_manage_fault+0xdc>)
    23c8:	6aaa      	ldr	r2, [r5, #40]	; 0x28
    23ca:	07d0      	lsls	r0, r2, #31
    23cc:	d504      	bpl.n	23d8 <mem_manage_fault+0x88>
		PR_FAULT_INFO("  Instruction Access Violation");
    23ce:	481d      	ldr	r0, [pc, #116]	; (2444 <mem_manage_fault+0xf4>)
    23d0:	f044 0101 	orr.w	r1, r4, #1
    23d4:	f002 ff27 	bl	5226 <log_0>
	}
#if defined(CONFIG_ARMV7_M_ARMV8_M_FP)
	if ((SCB->CFSR & SCB_CFSR_MLSPERR_Msk) != 0) {
    23d8:	6aab      	ldr	r3, [r5, #40]	; 0x28
    23da:	0699      	lsls	r1, r3, #26
    23dc:	d504      	bpl.n	23e8 <mem_manage_fault+0x98>
		PR_FAULT_INFO(
    23de:	481a      	ldr	r0, [pc, #104]	; (2448 <mem_manage_fault+0xf8>)
    23e0:	f044 0101 	orr.w	r1, r4, #1
    23e4:	f002 ff1f 	bl	5226 <log_0>
	 * if the memory violation error is a stack corruption.
	 *
	 * By design, being a Stacking MemManage fault is a necessary
	 * and sufficient condition for a thread stack corruption.
	 */
	if (SCB->CFSR & SCB_CFSR_MSTKERR_Msk) {
    23e8:	4b10      	ldr	r3, [pc, #64]	; (242c <mem_manage_fault+0xdc>)
    23ea:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    23ec:	06d2      	lsls	r2, r2, #27
    23ee:	d40c      	bmi.n	240a <mem_manage_fault+0xba>
	uint32_t reason = K_ERR_CPU_EXCEPTION;
    23f0:	2000      	movs	r0, #0
		"Stacking error without stack guard / User-mode support\n");
#endif /* CONFIG_MPU_STACK_GUARD || CONFIG_USERSPACE */
	}

	/* clear MMFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_MEMFAULTSR_Msk;
    23f2:	4a0e      	ldr	r2, [pc, #56]	; (242c <mem_manage_fault+0xdc>)
    23f4:	6a93      	ldr	r3, [r2, #40]	; 0x28
    23f6:	f043 03ff 	orr.w	r3, r3, #255	; 0xff
    23fa:	6293      	str	r3, [r2, #40]	; 0x28

	/* Assess whether system shall ignore/recover from this MPU fault. */
	*recoverable = memory_fault_recoverable(esf);
    23fc:	2300      	movs	r3, #0
    23fe:	7033      	strb	r3, [r6, #0]

	return reason;
}
    2400:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	uint32_t mmfar = -EINVAL;
    2404:	f06f 0915 	mvn.w	r9, #21
    2408:	e7dd      	b.n	23c6 <mem_manage_fault+0x76>
		if (SCB->ICSR & SCB_ICSR_RETTOBASE_Msk) {
    240a:	685b      	ldr	r3, [r3, #4]
    240c:	051b      	lsls	r3, r3, #20
    240e:	d5ef      	bpl.n	23f0 <mem_manage_fault+0xa0>
			uint32_t min_stack_ptr = z_check_thread_stack_fail(mmfar,
    2410:	4639      	mov	r1, r7
    2412:	4648      	mov	r0, r9
    2414:	f7ff fe62 	bl	20dc <z_check_thread_stack_fail>
			if (min_stack_ptr) {
    2418:	2800      	cmp	r0, #0
    241a:	d0e9      	beq.n	23f0 <mem_manage_fault+0xa0>
  __ASM volatile ("MSR psp, %0" : : "r" (topOfProcStack) : );
    241c:	f380 8809 	msr	PSP, r0
				reason = K_ERR_STACK_CHK_FAIL;
    2420:	2002      	movs	r0, #2
    2422:	e7e6      	b.n	23f2 <mem_manage_fault+0xa2>
    2424:	0000602c 	.word	0x0000602c
    2428:	0000604c 	.word	0x0000604c
    242c:	e000ed00 	.word	0xe000ed00
    2430:	000064cb 	.word	0x000064cb
    2434:	000064e1 	.word	0x000064e1
    2438:	00006514 	.word	0x00006514
    243c:	00006527 	.word	0x00006527
    2440:	0000653f 	.word	0x0000653f
    2444:	00006555 	.word	0x00006555
    2448:	00006574 	.word	0x00006574

0000244c <usage_fault.isra.0>:
 *
 * See z_arm_fault_dump() for example.
 *
 * @return error code to identify the fatal error reason
 */
static uint32_t usage_fault(const z_arch_esf_t *esf)
    244c:	b570      	push	{r4, r5, r6, lr}
    244e:	4b23      	ldr	r3, [pc, #140]	; (24dc <usage_fault.isra.0+0x90>)
    2450:	4c23      	ldr	r4, [pc, #140]	; (24e0 <usage_fault.isra.0+0x94>)
	uint32_t reason = K_ERR_CPU_EXCEPTION;

	PR_FAULT_INFO("***** USAGE FAULT *****");

	/* bits are sticky: they stack and must be reset */
	if ((SCB->CFSR & SCB_CFSR_DIVBYZERO_Msk) != 0) {
    2452:	4d24      	ldr	r5, [pc, #144]	; (24e4 <usage_fault.isra.0+0x98>)
	PR_FAULT_INFO("***** USAGE FAULT *****");
    2454:	4824      	ldr	r0, [pc, #144]	; (24e8 <usage_fault.isra.0+0x9c>)
    2456:	1ae4      	subs	r4, r4, r3
    2458:	08e4      	lsrs	r4, r4, #3
    245a:	01a4      	lsls	r4, r4, #6
    245c:	f044 0601 	orr.w	r6, r4, #1
    2460:	4631      	mov	r1, r6
    2462:	f002 fee0 	bl	5226 <log_0>
	if ((SCB->CFSR & SCB_CFSR_DIVBYZERO_Msk) != 0) {
    2466:	6aaa      	ldr	r2, [r5, #40]	; 0x28
    2468:	0193      	lsls	r3, r2, #6
    246a:	d503      	bpl.n	2474 <usage_fault.isra.0+0x28>
		PR_FAULT_INFO("  Division by zero");
    246c:	481f      	ldr	r0, [pc, #124]	; (24ec <usage_fault.isra.0+0xa0>)
    246e:	4631      	mov	r1, r6
    2470:	f002 fed9 	bl	5226 <log_0>
	}
	if ((SCB->CFSR & SCB_CFSR_UNALIGNED_Msk) != 0) {
    2474:	6aab      	ldr	r3, [r5, #40]	; 0x28
    2476:	01dd      	lsls	r5, r3, #7
    2478:	d504      	bpl.n	2484 <usage_fault.isra.0+0x38>
		PR_FAULT_INFO("  Unaligned memory access");
    247a:	481d      	ldr	r0, [pc, #116]	; (24f0 <usage_fault.isra.0+0xa4>)
    247c:	f044 0101 	orr.w	r1, r4, #1
    2480:	f002 fed1 	bl	5226 <log_0>
		 */
		reason = K_ERR_STACK_CHK_FAIL;
#endif /* CONFIG_BUILTIN_STACK_GUARD */
	}
#endif /* CONFIG_ARMV8_M_MAINLINE */
	if ((SCB->CFSR & SCB_CFSR_NOCP_Msk) != 0) {
    2484:	4d17      	ldr	r5, [pc, #92]	; (24e4 <usage_fault.isra.0+0x98>)
    2486:	6aaa      	ldr	r2, [r5, #40]	; 0x28
    2488:	0310      	lsls	r0, r2, #12
    248a:	d504      	bpl.n	2496 <usage_fault.isra.0+0x4a>
		PR_FAULT_INFO("  No coprocessor instructions");
    248c:	4819      	ldr	r0, [pc, #100]	; (24f4 <usage_fault.isra.0+0xa8>)
    248e:	f044 0101 	orr.w	r1, r4, #1
    2492:	f002 fec8 	bl	5226 <log_0>
	}
	if ((SCB->CFSR & SCB_CFSR_INVPC_Msk) != 0) {
    2496:	6aab      	ldr	r3, [r5, #40]	; 0x28
    2498:	0359      	lsls	r1, r3, #13
    249a:	d504      	bpl.n	24a6 <usage_fault.isra.0+0x5a>
		PR_FAULT_INFO("  Illegal load of EXC_RETURN into PC");
    249c:	4816      	ldr	r0, [pc, #88]	; (24f8 <usage_fault.isra.0+0xac>)
    249e:	f044 0101 	orr.w	r1, r4, #1
    24a2:	f002 fec0 	bl	5226 <log_0>
	}
	if ((SCB->CFSR & SCB_CFSR_INVSTATE_Msk) != 0) {
    24a6:	4d0f      	ldr	r5, [pc, #60]	; (24e4 <usage_fault.isra.0+0x98>)
    24a8:	6aaa      	ldr	r2, [r5, #40]	; 0x28
    24aa:	0392      	lsls	r2, r2, #14
    24ac:	d504      	bpl.n	24b8 <usage_fault.isra.0+0x6c>
		PR_FAULT_INFO("  Illegal use of the EPSR");
    24ae:	4813      	ldr	r0, [pc, #76]	; (24fc <usage_fault.isra.0+0xb0>)
    24b0:	f044 0101 	orr.w	r1, r4, #1
    24b4:	f002 feb7 	bl	5226 <log_0>
	}
	if ((SCB->CFSR & SCB_CFSR_UNDEFINSTR_Msk) != 0) {
    24b8:	6aab      	ldr	r3, [r5, #40]	; 0x28
    24ba:	03db      	lsls	r3, r3, #15
    24bc:	d504      	bpl.n	24c8 <usage_fault.isra.0+0x7c>
		PR_FAULT_INFO("  Attempt to execute undefined instruction");
    24be:	4810      	ldr	r0, [pc, #64]	; (2500 <usage_fault.isra.0+0xb4>)
    24c0:	f044 0101 	orr.w	r1, r4, #1
    24c4:	f002 feaf 	bl	5226 <log_0>
	}

	/* clear UFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_USGFAULTSR_Msk;
    24c8:	4a06      	ldr	r2, [pc, #24]	; (24e4 <usage_fault.isra.0+0x98>)
    24ca:	6a93      	ldr	r3, [r2, #40]	; 0x28
    24cc:	ea6f 4303 	mvn.w	r3, r3, lsl #16
    24d0:	ea6f 4313 	mvn.w	r3, r3, lsr #16
    24d4:	6293      	str	r3, [r2, #40]	; 0x28

	return reason;
}
    24d6:	2000      	movs	r0, #0
    24d8:	bd70      	pop	{r4, r5, r6, pc}
    24da:	bf00      	nop
    24dc:	0000602c 	.word	0x0000602c
    24e0:	0000604c 	.word	0x0000604c
    24e4:	e000ed00 	.word	0xe000ed00
    24e8:	000065a3 	.word	0x000065a3
    24ec:	000065bb 	.word	0x000065bb
    24f0:	000065ce 	.word	0x000065ce
    24f4:	000065e8 	.word	0x000065e8
    24f8:	00006606 	.word	0x00006606
    24fc:	0000662b 	.word	0x0000662b
    2500:	00006645 	.word	0x00006645

00002504 <bus_fault.isra.0>:
static int bus_fault(z_arch_esf_t *esf, int from_hard_fault, bool *recoverable)
    2504:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    2508:	4b2a      	ldr	r3, [pc, #168]	; (25b4 <bus_fault.isra.0+0xb0>)
    250a:	4c2b      	ldr	r4, [pc, #172]	; (25b8 <bus_fault.isra.0+0xb4>)
	if (SCB->CFSR & SCB_CFSR_STKERR_Msk) {
    250c:	4d2b      	ldr	r5, [pc, #172]	; (25bc <bus_fault.isra.0+0xb8>)
    250e:	1ae4      	subs	r4, r4, r3
    2510:	08e4      	lsrs	r4, r4, #3
	PR_FAULT_INFO("***** BUS FAULT *****");
    2512:	01a4      	lsls	r4, r4, #6
    2514:	f044 0801 	orr.w	r8, r4, #1
static int bus_fault(z_arch_esf_t *esf, int from_hard_fault, bool *recoverable)
    2518:	4607      	mov	r7, r0
    251a:	460e      	mov	r6, r1
	PR_FAULT_INFO("***** BUS FAULT *****");
    251c:	4828      	ldr	r0, [pc, #160]	; (25c0 <bus_fault.isra.0+0xbc>)
    251e:	4641      	mov	r1, r8
    2520:	f002 fe81 	bl	5226 <log_0>
	if (SCB->CFSR & SCB_CFSR_STKERR_Msk) {
    2524:	6aaa      	ldr	r2, [r5, #40]	; 0x28
    2526:	04d1      	lsls	r1, r2, #19
    2528:	d503      	bpl.n	2532 <bus_fault.isra.0+0x2e>
		PR_FAULT_INFO("  Stacking error");
    252a:	4826      	ldr	r0, [pc, #152]	; (25c4 <bus_fault.isra.0+0xc0>)
    252c:	4641      	mov	r1, r8
    252e:	f002 fe7a 	bl	5226 <log_0>
	if (SCB->CFSR & SCB_CFSR_UNSTKERR_Msk) {
    2532:	6aab      	ldr	r3, [r5, #40]	; 0x28
    2534:	051a      	lsls	r2, r3, #20
    2536:	d504      	bpl.n	2542 <bus_fault.isra.0+0x3e>
		PR_FAULT_INFO("  Unstacking error");
    2538:	4823      	ldr	r0, [pc, #140]	; (25c8 <bus_fault.isra.0+0xc4>)
    253a:	f044 0101 	orr.w	r1, r4, #1
    253e:	f002 fe72 	bl	5226 <log_0>
	if (SCB->CFSR & SCB_CFSR_PRECISERR_Msk) {
    2542:	4d1e      	ldr	r5, [pc, #120]	; (25bc <bus_fault.isra.0+0xb8>)
    2544:	6aab      	ldr	r3, [r5, #40]	; 0x28
    2546:	059b      	lsls	r3, r3, #22
    2548:	d512      	bpl.n	2570 <bus_fault.isra.0+0x6c>
		PR_FAULT_INFO("  Precise data bus error");
    254a:	f044 0801 	orr.w	r8, r4, #1
    254e:	481f      	ldr	r0, [pc, #124]	; (25cc <bus_fault.isra.0+0xc8>)
    2550:	4641      	mov	r1, r8
    2552:	f002 fe68 	bl	5226 <log_0>
		STORE_xFAR(bfar, SCB->BFAR);
    2556:	6ba9      	ldr	r1, [r5, #56]	; 0x38
		if ((SCB->CFSR & SCB_CFSR_BFARVALID_Msk) != 0) {
    2558:	6aab      	ldr	r3, [r5, #40]	; 0x28
    255a:	0418      	lsls	r0, r3, #16
    255c:	d508      	bpl.n	2570 <bus_fault.isra.0+0x6c>
			PR_EXC("  BFAR Address: 0x%x", bfar);
    255e:	481c      	ldr	r0, [pc, #112]	; (25d0 <bus_fault.isra.0+0xcc>)
    2560:	4642      	mov	r2, r8
    2562:	f002 fe6d 	bl	5240 <log_1>
			if (from_hard_fault) {
    2566:	b11f      	cbz	r7, 2570 <bus_fault.isra.0+0x6c>
				SCB->CFSR &= ~SCB_CFSR_BFARVALID_Msk;
    2568:	6aab      	ldr	r3, [r5, #40]	; 0x28
    256a:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
    256e:	62ab      	str	r3, [r5, #40]	; 0x28
	if (SCB->CFSR & SCB_CFSR_IMPRECISERR_Msk) {
    2570:	4d12      	ldr	r5, [pc, #72]	; (25bc <bus_fault.isra.0+0xb8>)
    2572:	6aab      	ldr	r3, [r5, #40]	; 0x28
    2574:	0559      	lsls	r1, r3, #21
    2576:	d504      	bpl.n	2582 <bus_fault.isra.0+0x7e>
		PR_FAULT_INFO("  Imprecise data bus error");
    2578:	4816      	ldr	r0, [pc, #88]	; (25d4 <bus_fault.isra.0+0xd0>)
    257a:	f044 0101 	orr.w	r1, r4, #1
    257e:	f002 fe52 	bl	5226 <log_0>
	if ((SCB->CFSR & SCB_CFSR_IBUSERR_Msk) != 0) {
    2582:	6aab      	ldr	r3, [r5, #40]	; 0x28
    2584:	05da      	lsls	r2, r3, #23
    2586:	d50d      	bpl.n	25a4 <bus_fault.isra.0+0xa0>
		PR_FAULT_INFO("  Instruction bus error");
    2588:	4813      	ldr	r0, [pc, #76]	; (25d8 <bus_fault.isra.0+0xd4>)
    258a:	f044 0101 	orr.w	r1, r4, #1
		PR_FAULT_INFO("  Floating-point lazy state preservation error");
    258e:	f002 fe4a 	bl	5226 <log_0>
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;
    2592:	4a0a      	ldr	r2, [pc, #40]	; (25bc <bus_fault.isra.0+0xb8>)
    2594:	6a93      	ldr	r3, [r2, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf);
    2596:	2000      	movs	r0, #0
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;
    2598:	f443 437f 	orr.w	r3, r3, #65280	; 0xff00
    259c:	6293      	str	r3, [r2, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf);
    259e:	7030      	strb	r0, [r6, #0]
}
    25a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	} else if (SCB->CFSR & SCB_CFSR_LSPERR_Msk) {
    25a4:	6aab      	ldr	r3, [r5, #40]	; 0x28
    25a6:	049b      	lsls	r3, r3, #18
    25a8:	d5f3      	bpl.n	2592 <bus_fault.isra.0+0x8e>
		PR_FAULT_INFO("  Floating-point lazy state preservation error");
    25aa:	480c      	ldr	r0, [pc, #48]	; (25dc <bus_fault.isra.0+0xd8>)
    25ac:	f044 0101 	orr.w	r1, r4, #1
    25b0:	e7ed      	b.n	258e <bus_fault.isra.0+0x8a>
    25b2:	bf00      	nop
    25b4:	0000602c 	.word	0x0000602c
    25b8:	0000604c 	.word	0x0000604c
    25bc:	e000ed00 	.word	0xe000ed00
    25c0:	00006670 	.word	0x00006670
    25c4:	00006686 	.word	0x00006686
    25c8:	00006514 	.word	0x00006514
    25cc:	00006697 	.word	0x00006697
    25d0:	000066b0 	.word	0x000066b0
    25d4:	000066c5 	.word	0x000066c5
    25d8:	000066e0 	.word	0x000066e0
    25dc:	00006574 	.word	0x00006574

000025e0 <z_arm_fault>:
 * @param callee_regs Callee-saved registers (R4-R11, PSP)
 *
 */
void z_arm_fault(uint32_t msp, uint32_t psp, uint32_t exc_return,
	_callee_saved_t *callee_regs)
{
    25e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	uint32_t reason = K_ERR_CPU_EXCEPTION;
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
    25e4:	4b57      	ldr	r3, [pc, #348]	; (2744 <z_arm_fault+0x164>)
    25e6:	685e      	ldr	r6, [r3, #4]
{
    25e8:	b08a      	sub	sp, #40	; 0x28
    25ea:	460f      	mov	r7, r1
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
    25ec:	f3c6 0408 	ubfx	r4, r6, #0, #9
    25f0:	2500      	movs	r5, #0
    25f2:	f385 8811 	msr	BASEPRI, r5
    25f6:	f3bf 8f6f 	isb	sy
	if ((exc_return & EXC_RETURN_INDICATOR_PREFIX) !=
    25fa:	f002 437f 	and.w	r3, r2, #4278190080	; 0xff000000
    25fe:	f1b3 4f7f 	cmp.w	r3, #4278190080	; 0xff000000
    2602:	d10d      	bne.n	2620 <z_arm_fault+0x40>
	if ((exc_return & EXC_RETURN_MODE_THREAD) &&
    2604:	f002 030c 	and.w	r3, r2, #12
    2608:	2b08      	cmp	r3, #8
    260a:	d10b      	bne.n	2624 <z_arm_fault+0x44>
    260c:	494e      	ldr	r1, [pc, #312]	; (2748 <z_arm_fault+0x168>)
    260e:	4b4f      	ldr	r3, [pc, #316]	; (274c <z_arm_fault+0x16c>)
		PR_EXC("SPSEL in thread mode does not indicate PSP");
    2610:	484f      	ldr	r0, [pc, #316]	; (2750 <z_arm_fault+0x170>)
    2612:	1ac9      	subs	r1, r1, r3
    2614:	08c9      	lsrs	r1, r1, #3
    2616:	0189      	lsls	r1, r1, #6
    2618:	f041 0101 	orr.w	r1, r1, #1
    261c:	f002 fe03 	bl	5226 <log_0>
		return NULL;
    2620:	462f      	mov	r7, r5
    2622:	e003      	b.n	262c <z_arm_fault+0x4c>
		if (exc_return & EXC_RETURN_MODE_THREAD) {
    2624:	0712      	lsls	r2, r2, #28
    2626:	d401      	bmi.n	262c <z_arm_fault+0x4c>
			ptr_esf = (z_arch_esf_t *)msp;
    2628:	4607      	mov	r7, r0
			*nested_exc = true;
    262a:	2501      	movs	r5, #1
	*recoverable = false;
    262c:	2300      	movs	r3, #0
    262e:	f88d 3007 	strb.w	r3, [sp, #7]
	switch (fault) {
    2632:	1ee3      	subs	r3, r4, #3
    2634:	2b09      	cmp	r3, #9
    2636:	d86b      	bhi.n	2710 <z_arm_fault+0x130>
    2638:	e8df f003 	tbb	[pc, r3]
    263c:	3d5d5905 	.word	0x3d5d5905
    2640:	6a6a6a6a 	.word	0x6a6a6a6a
    2644:	616a      	.short	0x616a
    2646:	4b41      	ldr	r3, [pc, #260]	; (274c <z_arm_fault+0x16c>)
    2648:	4e3f      	ldr	r6, [pc, #252]	; (2748 <z_arm_fault+0x168>)
	PR_FAULT_INFO("***** HARD FAULT *****");
    264a:	4842      	ldr	r0, [pc, #264]	; (2754 <z_arm_fault+0x174>)
    264c:	1af6      	subs	r6, r6, r3
    264e:	08f6      	lsrs	r6, r6, #3
    2650:	01b6      	lsls	r6, r6, #6
    2652:	f046 0601 	orr.w	r6, r6, #1
    2656:	4631      	mov	r1, r6
    2658:	f002 fde5 	bl	5226 <log_0>
	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
    265c:	4b39      	ldr	r3, [pc, #228]	; (2744 <z_arm_fault+0x164>)
    265e:	6adc      	ldr	r4, [r3, #44]	; 0x2c
	*recoverable = false;
    2660:	f04f 0800 	mov.w	r8, #0
	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
    2664:	f014 0402 	ands.w	r4, r4, #2
	*recoverable = false;
    2668:	f88d 8007 	strb.w	r8, [sp, #7]
	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
    266c:	d005      	beq.n	267a <z_arm_fault+0x9a>
		PR_EXC("  Bus fault on vector table read");
    266e:	483a      	ldr	r0, [pc, #232]	; (2758 <z_arm_fault+0x178>)
    2670:	4631      	mov	r1, r6
	PR_FAULT_INFO(
    2672:	f002 fdd8 	bl	5226 <log_0>
	uint32_t reason = K_ERR_CPU_EXCEPTION;
    2676:	2400      	movs	r4, #0
}
    2678:	e020      	b.n	26bc <z_arm_fault+0xdc>
	} else if ((SCB->HFSR & SCB_HFSR_FORCED_Msk) != 0) {
    267a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    267c:	005b      	lsls	r3, r3, #1
    267e:	d51d      	bpl.n	26bc <z_arm_fault+0xdc>
		PR_EXC("  Fault escalation (see below)");
    2680:	4836      	ldr	r0, [pc, #216]	; (275c <z_arm_fault+0x17c>)
    2682:	4631      	mov	r1, r6
    2684:	f002 fdcf 	bl	5226 <log_0>
		if (SCB_MMFSR != 0) {
    2688:	4b35      	ldr	r3, [pc, #212]	; (2760 <z_arm_fault+0x180>)
    268a:	781b      	ldrb	r3, [r3, #0]
    268c:	b133      	cbz	r3, 269c <z_arm_fault+0xbc>
			reason = mem_manage_fault(esf, 1, recoverable);
    268e:	f10d 0207 	add.w	r2, sp, #7
    2692:	2101      	movs	r1, #1
		reason = mem_manage_fault(esf, 0, recoverable);
    2694:	4638      	mov	r0, r7
    2696:	f7ff fe5b 	bl	2350 <mem_manage_fault>
    269a:	e00e      	b.n	26ba <z_arm_fault+0xda>
		} else if (SCB_BFSR != 0) {
    269c:	4b31      	ldr	r3, [pc, #196]	; (2764 <z_arm_fault+0x184>)
    269e:	781b      	ldrb	r3, [r3, #0]
    26a0:	b12b      	cbz	r3, 26ae <z_arm_fault+0xce>
			reason = bus_fault(esf, 1, recoverable);
    26a2:	f10d 0107 	add.w	r1, sp, #7
    26a6:	2001      	movs	r0, #1
		reason = bus_fault(esf, 0, recoverable);
    26a8:	f7ff ff2c 	bl	2504 <bus_fault.isra.0>
    26ac:	e005      	b.n	26ba <z_arm_fault+0xda>
		} else if (SCB_UFSR != 0) {
    26ae:	4b2e      	ldr	r3, [pc, #184]	; (2768 <z_arm_fault+0x188>)
    26b0:	881b      	ldrh	r3, [r3, #0]
    26b2:	b29b      	uxth	r3, r3
    26b4:	b113      	cbz	r3, 26bc <z_arm_fault+0xdc>
			reason = usage_fault(esf);
    26b6:	f7ff fec9 	bl	244c <usage_fault.isra.0>
    26ba:	4604      	mov	r4, r0
#ifdef CONFIG_DEBUG_COREDUMP
	z_arm_coredump_fault_sp = POINTER_TO_UINT(esf);
#endif

	reason = fault_handle(esf, fault, &recoverable);
	if (recoverable) {
    26bc:	f89d 3007 	ldrb.w	r3, [sp, #7]
    26c0:	b993      	cbnz	r3, 26e8 <z_arm_fault+0x108>
		return;
	}

	/* Copy ESF */
#if !defined(CONFIG_EXTRA_EXCEPTION_INFO)
	memcpy(&esf_copy, esf, sizeof(z_arch_esf_t));
    26c2:	2220      	movs	r2, #32
    26c4:	4639      	mov	r1, r7
    26c6:	a802      	add	r0, sp, #8
    26c8:	f003 f90e 	bl	58e8 <memcpy>
	/* Overwrite stacked IPSR to mark a nested exception,
	 * or a return to Thread mode. Note that this may be
	 * required, if the retrieved ESF contents are invalid
	 * due to, for instance, a stacking error.
	 */
	if (nested_exc) {
    26cc:	9b09      	ldr	r3, [sp, #36]	; 0x24
    26ce:	b39d      	cbz	r5, 2738 <z_arm_fault+0x158>
		if ((esf_copy.basic.xpsr & IPSR_ISR_Msk) == 0) {
    26d0:	f3c3 0208 	ubfx	r2, r3, #0, #9
    26d4:	b922      	cbnz	r2, 26e0 <z_arm_fault+0x100>
			esf_copy.basic.xpsr |= IPSR_ISR_Msk;
    26d6:	ea6f 2353 	mvn.w	r3, r3, lsr #9
    26da:	ea6f 2343 	mvn.w	r3, r3, lsl #9
		}
	} else {
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
    26de:	9309      	str	r3, [sp, #36]	; 0x24
	}

	z_arm_fatal_error(reason, &esf_copy);
    26e0:	a902      	add	r1, sp, #8
    26e2:	4620      	mov	r0, r4
    26e4:	f7ff fd2e 	bl	2144 <z_arm_fatal_error>
}
    26e8:	b00a      	add	sp, #40	; 0x28
    26ea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		reason = mem_manage_fault(esf, 0, recoverable);
    26ee:	f10d 0207 	add.w	r2, sp, #7
    26f2:	2100      	movs	r1, #0
    26f4:	e7ce      	b.n	2694 <z_arm_fault+0xb4>
		reason = bus_fault(esf, 0, recoverable);
    26f6:	f10d 0107 	add.w	r1, sp, #7
    26fa:	2000      	movs	r0, #0
    26fc:	e7d4      	b.n	26a8 <z_arm_fault+0xc8>
    26fe:	4912      	ldr	r1, [pc, #72]	; (2748 <z_arm_fault+0x168>)
    2700:	4b12      	ldr	r3, [pc, #72]	; (274c <z_arm_fault+0x16c>)
	PR_FAULT_INFO(
    2702:	481a      	ldr	r0, [pc, #104]	; (276c <z_arm_fault+0x18c>)
    2704:	1ac9      	subs	r1, r1, r3
    2706:	08c9      	lsrs	r1, r1, #3
    2708:	0189      	lsls	r1, r1, #6
    270a:	f041 0101 	orr.w	r1, r1, #1
    270e:	e7b0      	b.n	2672 <z_arm_fault+0x92>
    2710:	4a0e      	ldr	r2, [pc, #56]	; (274c <z_arm_fault+0x16c>)
    2712:	4b0d      	ldr	r3, [pc, #52]	; (2748 <z_arm_fault+0x168>)
	PR_FAULT_INFO("***** %s %d) *****",
    2714:	4816      	ldr	r0, [pc, #88]	; (2770 <z_arm_fault+0x190>)
    2716:	4917      	ldr	r1, [pc, #92]	; (2774 <z_arm_fault+0x194>)
    2718:	1a9b      	subs	r3, r3, r2
    271a:	08db      	lsrs	r3, r3, #3
    271c:	f416 7ff8 	tst.w	r6, #496	; 0x1f0
    2720:	ea4f 1383 	mov.w	r3, r3, lsl #6
    2724:	bf18      	it	ne
    2726:	4601      	movne	r1, r0
    2728:	f043 0301 	orr.w	r3, r3, #1
    272c:	4812      	ldr	r0, [pc, #72]	; (2778 <z_arm_fault+0x198>)
    272e:	f1a4 0210 	sub.w	r2, r4, #16
    2732:	f002 fd99 	bl	5268 <log_2>
    2736:	e79e      	b.n	2676 <z_arm_fault+0x96>
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
    2738:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
    273c:	f023 0301 	bic.w	r3, r3, #1
    2740:	e7cd      	b.n	26de <z_arm_fault+0xfe>
    2742:	bf00      	nop
    2744:	e000ed00 	.word	0xe000ed00
    2748:	0000604c 	.word	0x0000604c
    274c:	0000602c 	.word	0x0000602c
    2750:	000066f8 	.word	0x000066f8
    2754:	00006723 	.word	0x00006723
    2758:	0000673a 	.word	0x0000673a
    275c:	0000675b 	.word	0x0000675b
    2760:	e000ed28 	.word	0xe000ed28
    2764:	e000ed29 	.word	0xe000ed29
    2768:	e000ed2a 	.word	0xe000ed2a
    276c:	0000677a 	.word	0x0000677a
    2770:	000067c5 	.word	0x000067c5
    2774:	000067b0 	.word	0x000067b0
    2778:	000067de 	.word	0x000067de

0000277c <z_arm_fault_init>:
 */
void z_arm_fault_init(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	SCB->CCR |= SCB_CCR_DIV_0_TRP_Msk;
    277c:	4a02      	ldr	r2, [pc, #8]	; (2788 <z_arm_fault_init+0xc>)
    277e:	6953      	ldr	r3, [r2, #20]
    2780:	f043 0310 	orr.w	r3, r3, #16
    2784:	6153      	str	r3, [r2, #20]
	 * Stack to attempt to descend into secure region, in which case a
	 * Secure Hard Fault will occur and we can track the fault from there.
	 */
	SCB->CCR |= SCB_CCR_STKOFHFNMIGN_Msk;
#endif /* CONFIG_BUILTIN_STACK_GUARD */
}
    2786:	4770      	bx	lr
    2788:	e000ed00 	.word	0xe000ed00

0000278c <z_arm_interrupt_init>:
    278c:	4804      	ldr	r0, [pc, #16]	; (27a0 <z_arm_interrupt_init+0x14>)
 * @return N/A
 */

void z_arm_interrupt_init(void)
{
	int irq = 0;
    278e:	2300      	movs	r3, #0
    2790:	2120      	movs	r1, #32
    2792:	18c2      	adds	r2, r0, r3

	for (; irq < CONFIG_NUM_IRQS; irq++) {
    2794:	3301      	adds	r3, #1
    2796:	2b27      	cmp	r3, #39	; 0x27
    2798:	f882 1300 	strb.w	r1, [r2, #768]	; 0x300
    279c:	d1f9      	bne.n	2792 <z_arm_interrupt_init+0x6>
		NVIC_SetPriority((IRQn_Type)irq, _IRQ_PRIO_OFFSET);
	}
}
    279e:	4770      	bx	lr
    27a0:	e000e100 	.word	0xe000e100

000027a4 <z_impl_k_thread_abort>:
#include <kswap.h>
#include <wait_q.h>
#include <sys/__assert.h>

void z_impl_k_thread_abort(k_tid_t thread)
{
    27a4:	b508      	push	{r3, lr}
	if (_current == thread) {
    27a6:	4b0e      	ldr	r3, [pc, #56]	; (27e0 <z_impl_k_thread_abort+0x3c>)
    27a8:	689b      	ldr	r3, [r3, #8]
    27aa:	4283      	cmp	r3, r0
    27ac:	d107      	bne.n	27be <z_impl_k_thread_abort+0x1a>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
    27ae:	f3ef 8305 	mrs	r3, IPSR
		if (arch_is_in_isr()) {
    27b2:	b193      	cbz	r3, 27da <z_impl_k_thread_abort+0x36>
			 * should no longer run after we return, so
			 * Trigger PendSV, in case we are in one of the
			 * situations where the isr check is true but there
			 * is not an implicit scheduler invocation.
			 */
			SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
    27b4:	4a0b      	ldr	r2, [pc, #44]	; (27e4 <z_impl_k_thread_abort+0x40>)
    27b6:	6853      	ldr	r3, [r2, #4]
    27b8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
    27bc:	6053      	str	r3, [r2, #4]
		} else {
			z_self_abort(); /* Never returns */
		}
	}

	z_thread_single_abort(thread);
    27be:	f001 fddb 	bl	4378 <z_thread_single_abort>
	__asm__ volatile(
    27c2:	f04f 0320 	mov.w	r3, #32
    27c6:	f3ef 8011 	mrs	r0, BASEPRI
    27ca:	f383 8811 	msr	BASEPRI, r3
    27ce:	f3bf 8f6f 	isb	sy

	/* The abort handler might have altered the ready queue. */
	z_reschedule_unlocked();
}
    27d2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	(void) z_pend_curr_irqlock(arch_irq_lock(), wait_q, timeout);
}

static inline void z_reschedule_unlocked(void)
{
	(void) z_reschedule_irqlock(arch_irq_lock());
    27d6:	f003 ba23 	b.w	5c20 <z_reschedule_irqlock>
			z_self_abort(); /* Never returns */
    27da:	f002 f89b 	bl	4914 <z_self_abort>
    27de:	bf00      	nop
    27e0:	20000444 	.word	0x20000444
    27e4:	e000ed00 	.word	0xe000ed00

000027e8 <z_arm_configure_static_mpu_regions>:
 *
 * For some MPU architectures, such as the unmodified ARMv8-M MPU,
 * the function must execute with MPU enabled.
 */
void z_arm_configure_static_mpu_regions(void)
{
    27e8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
		.size = (uint32_t)&_nocache_ram_size,
		.attr = K_MEM_PARTITION_P_RW_U_NA_NOCACHE,
		};
#endif /* CONFIG_NOCACHE_MEMORY */
#if defined(CONFIG_ARCH_HAS_RAMFUNC_SUPPORT)
		const struct k_mem_partition ramfunc_region =
    27ea:	4b08      	ldr	r3, [pc, #32]	; (280c <z_arm_configure_static_mpu_regions+0x24>)
    27ec:	9301      	str	r3, [sp, #4]
    27ee:	4b08      	ldr	r3, [pc, #32]	; (2810 <z_arm_configure_static_mpu_regions+0x28>)
    27f0:	9302      	str	r3, [sp, #8]
    27f2:	4b08      	ldr	r3, [pc, #32]	; (2814 <z_arm_configure_static_mpu_regions+0x2c>)
    27f4:	9303      	str	r3, [sp, #12]
#endif /* !CONFIG_MULTITHREADING && CONFIG_MPU_STACK_GUARD */
	/* Define a constant array of k_mem_partition objects
	 * to hold the configuration of the respective static
	 * MPU regions.
	 */
	const struct k_mem_partition *static_regions[] = {
    27f6:	ab01      	add	r3, sp, #4
    27f8:	9300      	str	r3, [sp, #0]
	/* Configure the static MPU regions within firmware SRAM boundaries.
	 * Start address of the image is given by _image_ram_start. The end
	 * of the firmware SRAM area is marked by __kernel_ram_end, taking
	 * into account the unused SRAM area, as well.
	 */
	arm_core_mpu_configure_static_mpu_regions(static_regions,
    27fa:	4a07      	ldr	r2, [pc, #28]	; (2818 <z_arm_configure_static_mpu_regions+0x30>)
    27fc:	4b07      	ldr	r3, [pc, #28]	; (281c <z_arm_configure_static_mpu_regions+0x34>)
    27fe:	2101      	movs	r1, #1
    2800:	4668      	mov	r0, sp
    2802:	f000 f8c3 	bl	298c <arm_core_mpu_configure_static_mpu_regions>
	};

	arm_core_mpu_mark_areas_for_dynamic_regions(dyn_region_areas,
		ARRAY_SIZE(dyn_region_areas));
#endif /* CONFIG_MPU_REQUIRES_NON_OVERLAPPING_REGIONS */
}
    2806:	b005      	add	sp, #20
    2808:	f85d fb04 	ldr.w	pc, [sp], #4
    280c:	20000000 	.word	0x20000000
    2810:	00000000 	.word	0x00000000
    2814:	060b0000 	.word	0x060b0000
    2818:	20000000 	.word	0x20000000
    281c:	20010000 	.word	0x20010000

00002820 <z_arm_configure_dynamic_mpu_regions>:
 *
 * For some MPU architectures, such as the unmodified ARMv8-M MPU,
 * the function must execute with MPU enabled.
 */
void z_arm_configure_dynamic_mpu_regions(struct k_thread *thread)
{
    2820:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	__ASSERT((uint32_t)thread->stack_obj == guard_start,
		"Guard start (0x%x) not beginning at stack object (0x%x)\n",
		guard_start, (uint32_t)thread->stack_obj);
	}
#else
	guard_start = thread->stack_info.start - guard_size;
    2822:	6e83      	ldr	r3, [r0, #104]	; 0x68
    2824:	3b20      	subs	r3, #32
#endif /* CONFIG_USERSPACE */

	__ASSERT(region_num < _MAX_DYNAMIC_MPU_REGIONS_NUM,
		"Out-of-bounds error for dynamic region map.");
	guard = (const struct k_mem_partition)
    2826:	9301      	str	r3, [sp, #4]
    2828:	4b06      	ldr	r3, [pc, #24]	; (2844 <z_arm_configure_dynamic_mpu_regions+0x24>)
    282a:	2220      	movs	r2, #32
    282c:	e9cd 2302 	strd	r2, r3, [sp, #8]

	region_num++;
#endif /* CONFIG_MPU_STACK_GUARD */

	/* Configure the dynamic MPU regions */
	arm_core_mpu_configure_dynamic_mpu_regions(
    2830:	2101      	movs	r1, #1
	dynamic_regions[region_num] = &guard;
    2832:	ab01      	add	r3, sp, #4
	arm_core_mpu_configure_dynamic_mpu_regions(
    2834:	4668      	mov	r0, sp
	dynamic_regions[region_num] = &guard;
    2836:	9300      	str	r3, [sp, #0]
	arm_core_mpu_configure_dynamic_mpu_regions(
    2838:	f000 f8b2 	bl	29a0 <arm_core_mpu_configure_dynamic_mpu_regions>
		(const struct k_mem_partition **)dynamic_regions,
		region_num);
}
    283c:	b005      	add	sp, #20
    283e:	f85d fb04 	ldr.w	pc, [sp], #4
    2842:	bf00      	nop
    2844:	150b0000 	.word	0x150b0000

00002848 <mpu_configure_regions>:
 */
static void region_init(const uint32_t index,
	const struct arm_mpu_region *region_conf)
{
	/* Select the region you want to access */
	MPU->RNR = index;
    2848:	f8df c0bc 	ldr.w	ip, [pc, #188]	; 2908 <mpu_configure_regions+0xc0>
 * sanity check of the memory regions to be programmed.
 */
static int mpu_configure_regions(const struct k_mem_partition
	*regions[], uint8_t regions_num, uint8_t start_reg_index,
	bool do_sanity_check)
{
    284c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    284e:	4606      	mov	r6, r0
    2850:	460f      	mov	r7, r1
	int i;
	int reg_index = start_reg_index;
    2852:	4610      	mov	r0, r2

	for (i = 0; i < regions_num; i++) {
    2854:	2100      	movs	r1, #0
    2856:	42b9      	cmp	r1, r7
    2858:	da15      	bge.n	2886 <mpu_configure_regions+0x3e>
		if (regions[i]->size == 0U) {
    285a:	f856 e021 	ldr.w	lr, [r6, r1, lsl #2]
    285e:	f8de 4004 	ldr.w	r4, [lr, #4]
    2862:	2c00      	cmp	r4, #0
    2864:	d046      	beq.n	28f4 <mpu_configure_regions+0xac>
			continue;
		}
		/* Non-empty region. */

		if (do_sanity_check &&
    2866:	b1ab      	cbz	r3, 2894 <mpu_configure_regions+0x4c>
	 * and greater or equal to the minimum
	 * MPU region size. Start address of the
	 * partition must align with size.
	 */
	int partition_is_valid =
		((part->size & (part->size - 1U)) == 0U)
    2868:	1e65      	subs	r5, r4, #1
		&&
		(part->size >= CONFIG_ARM_MPU_REGION_MIN_ALIGN_AND_SIZE)
		&&
    286a:	422c      	tst	r4, r5
    286c:	d00c      	beq.n	2888 <mpu_configure_regions+0x40>
    286e:	4a22      	ldr	r2, [pc, #136]	; (28f8 <mpu_configure_regions+0xb0>)
    2870:	4b22      	ldr	r3, [pc, #136]	; (28fc <mpu_configure_regions+0xb4>)
				(!mpu_partition_is_valid(regions[i]))) {
			LOG_ERR("Partition %u: sanity check failed.", i);
    2872:	4823      	ldr	r0, [pc, #140]	; (2900 <mpu_configure_regions+0xb8>)
    2874:	1ad2      	subs	r2, r2, r3
    2876:	08d2      	lsrs	r2, r2, #3
    2878:	0192      	lsls	r2, r2, #6
    287a:	f042 0201 	orr.w	r2, r2, #1
		LOG_ERR("Failed to allocate new MPU region %u\n", index);
    287e:	f002 fcdf 	bl	5240 <log_1>
			return -EINVAL;
		}

		reg_index = mpu_configure_region(reg_index, regions[i]);
    2882:	f06f 0015 	mvn.w	r0, #21
		/* Increment number of programmed MPU indices. */
		reg_index++;
	}

	return reg_index;
}
    2886:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		&&
    2888:	2c1f      	cmp	r4, #31
    288a:	d9f0      	bls.n	286e <mpu_configure_regions+0x26>
		((part->start & (part->size - 1U)) == 0U);
    288c:	f8de 2000 	ldr.w	r2, [lr]
		&&
    2890:	4215      	tst	r5, r2
    2892:	d1ec      	bne.n	286e <mpu_configure_regions+0x26>
 * to that power-of-two value.
 */
static inline uint32_t size_to_mpu_rasr_size(uint32_t size)
{
	/* The minimal supported region size is 32 bytes */
	if (size <= 32U) {
    2894:	2c20      	cmp	r4, #32
		reg_index = mpu_configure_region(reg_index, regions[i]);
    2896:	b2c5      	uxtb	r5, r0
	region_conf.base = new_region->start;
    2898:	f8de 2000 	ldr.w	r2, [lr]
	get_region_attr_from_k_mem_partition_info(&region_conf.attr,
    289c:	f8de 0008 	ldr.w	r0, [lr, #8]
    28a0:	d916      	bls.n	28d0 <mpu_configure_regions+0x88>
	/*
	 * A size value greater than 2^31 could not be handled by
	 * round_up_to_next_power_of_two() properly. We handle
	 * it separately here.
	 */
	if (size > (1UL << 31)) {
    28a2:	f1b4 4f00 	cmp.w	r4, #2147483648	; 0x80000000
    28a6:	d815      	bhi.n	28d4 <mpu_configure_regions+0x8c>
		return REGION_4G;
	}

	return ((32 - __builtin_clz(size - 1U) - 2 + 1) << MPU_RASR_SIZE_Pos) &
    28a8:	3c01      	subs	r4, #1
    28aa:	fab4 f484 	clz	r4, r4
    28ae:	f1c4 041f 	rsb	r4, r4, #31
    28b2:	0064      	lsls	r4, r4, #1
	if (index > (get_num_regions() - 1U)) {
    28b4:	2d07      	cmp	r5, #7
	/* in ARMv7-M MPU the base address is not required
	 * to determine region attributes
	 */
	(void) base;

	p_attr->rasr = attr->rasr_attr | size_to_mpu_rasr_size(size);
    28b6:	ea44 0400 	orr.w	r4, r4, r0
    28ba:	d90d      	bls.n	28d8 <mpu_configure_regions+0x90>
    28bc:	4a0e      	ldr	r2, [pc, #56]	; (28f8 <mpu_configure_regions+0xb0>)
    28be:	4b0f      	ldr	r3, [pc, #60]	; (28fc <mpu_configure_regions+0xb4>)
		LOG_ERR("Failed to allocate new MPU region %u\n", index);
    28c0:	4810      	ldr	r0, [pc, #64]	; (2904 <mpu_configure_regions+0xbc>)
    28c2:	1ad2      	subs	r2, r2, r3
    28c4:	08d2      	lsrs	r2, r2, #3
    28c6:	0192      	lsls	r2, r2, #6
    28c8:	f042 0201 	orr.w	r2, r2, #1
    28cc:	4629      	mov	r1, r5
    28ce:	e7d6      	b.n	287e <mpu_configure_regions+0x36>
		return REGION_32B;
    28d0:	2408      	movs	r4, #8
    28d2:	e7ef      	b.n	28b4 <mpu_configure_regions+0x6c>
		return REGION_4G;
    28d4:	243e      	movs	r4, #62	; 0x3e
    28d6:	e7ed      	b.n	28b4 <mpu_configure_regions+0x6c>
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
    28d8:	f022 021f 	bic.w	r2, r2, #31
				| MPU_RBAR_VALID_Msk | index;
    28dc:	432a      	orrs	r2, r5
    28de:	f042 0210 	orr.w	r2, r2, #16
	MPU->RASR = region_conf->attr.rasr | MPU_RASR_ENABLE_Msk;
    28e2:	f044 0401 	orr.w	r4, r4, #1
	MPU->RNR = index;
    28e6:	f8cc 5008 	str.w	r5, [ip, #8]
		reg_index++;
    28ea:	1c68      	adds	r0, r5, #1
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
    28ec:	f8cc 200c 	str.w	r2, [ip, #12]
	MPU->RASR = region_conf->attr.rasr | MPU_RASR_ENABLE_Msk;
    28f0:	f8cc 4010 	str.w	r4, [ip, #16]
	for (i = 0; i < regions_num; i++) {
    28f4:	3101      	adds	r1, #1
    28f6:	e7ae      	b.n	2856 <mpu_configure_regions+0xe>
    28f8:	00006044 	.word	0x00006044
    28fc:	0000602c 	.word	0x0000602c
    2900:	000067f5 	.word	0x000067f5
    2904:	00006818 	.word	0x00006818
    2908:	e000ed90 	.word	0xe000ed90

0000290c <arm_core_mpu_enable>:
void arm_core_mpu_enable(void)
{
	/* Enable MPU and use the default memory map as a
	 * background region for privileged software access.
	 */
	MPU->CTRL = MPU_CTRL_ENABLE_Msk | MPU_CTRL_PRIVDEFENA_Msk;
    290c:	4b03      	ldr	r3, [pc, #12]	; (291c <arm_core_mpu_enable+0x10>)
    290e:	2205      	movs	r2, #5
    2910:	605a      	str	r2, [r3, #4]
  __ASM volatile ("dsb 0xF":::"memory");
    2912:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    2916:	f3bf 8f6f 	isb	sy

	/* Make sure that all the registers are set before proceeding */
	__DSB();
	__ISB();
}
    291a:	4770      	bx	lr
    291c:	e000ed90 	.word	0xe000ed90

00002920 <arm_core_mpu_disable>:
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
    2920:	f3bf 8f5f 	dmb	sy
{
	/* Force any outstanding transfers to complete before disabling MPU */
	__DMB();

	/* Disable MPU */
	MPU->CTRL = 0;
    2924:	4b01      	ldr	r3, [pc, #4]	; (292c <arm_core_mpu_disable+0xc>)
    2926:	2200      	movs	r2, #0
    2928:	605a      	str	r2, [r3, #4]
}
    292a:	4770      	bx	lr
    292c:	e000ed90 	.word	0xe000ed90

00002930 <arm_mpu_init>:
 */
static int arm_mpu_init(const struct device *arg)
{
	uint32_t r_index;

	if (mpu_config.num_regions > get_num_regions()) {
    2930:	4913      	ldr	r1, [pc, #76]	; (2980 <arm_mpu_init+0x50>)
    2932:	6808      	ldr	r0, [r1, #0]
    2934:	2808      	cmp	r0, #8
{
    2936:	b510      	push	{r4, lr}
	if (mpu_config.num_regions > get_num_regions()) {
    2938:	d81e      	bhi.n	2978 <arm_mpu_init+0x48>
		return -1;
	}

	LOG_DBG("total region count: %d", get_num_regions());

	arm_core_mpu_disable();
    293a:	f7ff fff1 	bl	2920 <arm_core_mpu_disable>
	MPU->RNR = index;
    293e:	4c11      	ldr	r4, [pc, #68]	; (2984 <arm_mpu_init+0x54>)
    2940:	6849      	ldr	r1, [r1, #4]

	/* Architecture-specific configuration */
	mpu_init();

	/* Program fixed regions configured at SOC definition. */
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
    2942:	2200      	movs	r2, #0
    2944:	4290      	cmp	r0, r2
    2946:	f101 010c 	add.w	r1, r1, #12
    294a:	d105      	bne.n	2958 <arm_mpu_init+0x28>
		region_init(r_index, &mpu_config.mpu_regions[r_index]);
	}

	/* Update the number of programmed MPU regions. */
	static_regions_num = mpu_config.num_regions;
    294c:	4b0e      	ldr	r3, [pc, #56]	; (2988 <arm_mpu_init+0x58>)
    294e:	7018      	strb	r0, [r3, #0]


	arm_core_mpu_enable();
    2950:	f7ff ffdc 	bl	290c <arm_core_mpu_enable>
	__ASSERT(
		(MPU->TYPE & MPU_TYPE_DREGION_Msk) >> MPU_TYPE_DREGION_Pos ==
		NUM_MPU_REGIONS,
		"Invalid number of MPU regions\n");
#endif /* CORTEX_M0PLUS || CPU_CORTEX_M3 || CPU_CORTEX_M4 */
	return 0;
    2954:	2000      	movs	r0, #0
}
    2956:	bd10      	pop	{r4, pc}
    2958:	60a2      	str	r2, [r4, #8]
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
    295a:	f851 3c0c 	ldr.w	r3, [r1, #-12]
    295e:	f023 031f 	bic.w	r3, r3, #31
				| MPU_RBAR_VALID_Msk | index;
    2962:	4313      	orrs	r3, r2
    2964:	f043 0310 	orr.w	r3, r3, #16
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
    2968:	60e3      	str	r3, [r4, #12]
	MPU->RASR = region_conf->attr.rasr | MPU_RASR_ENABLE_Msk;
    296a:	f851 3c04 	ldr.w	r3, [r1, #-4]
    296e:	f043 0301 	orr.w	r3, r3, #1
    2972:	6123      	str	r3, [r4, #16]
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
    2974:	3201      	adds	r2, #1
    2976:	e7e5      	b.n	2944 <arm_mpu_init+0x14>
		return -1;
    2978:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    297c:	e7eb      	b.n	2956 <arm_mpu_init+0x26>
    297e:	bf00      	nop
    2980:	00006158 	.word	0x00006158
    2984:	e000ed90 	.word	0xe000ed90
    2988:	200008ae 	.word	0x200008ae

0000298c <arm_core_mpu_configure_static_mpu_regions>:
{
    298c:	b510      	push	{r4, lr}
static int mpu_configure_static_mpu_regions(const struct k_mem_partition
	*static_regions[], const uint8_t regions_num,
	const uint32_t background_area_base,
	const uint32_t background_area_end)
{
	int mpu_reg_index = static_regions_num;
    298e:	4c03      	ldr	r4, [pc, #12]	; (299c <arm_core_mpu_configure_static_mpu_regions+0x10>)
	 * programmed on top of SRAM region configuration.
	 */
	ARG_UNUSED(background_area_base);
	ARG_UNUSED(background_area_end);

	mpu_reg_index = mpu_configure_regions(static_regions,
    2990:	2301      	movs	r3, #1
    2992:	7822      	ldrb	r2, [r4, #0]
    2994:	f7ff ff58 	bl	2848 <mpu_configure_regions>
		regions_num, mpu_reg_index, true);

	static_regions_num = mpu_reg_index;
    2998:	7020      	strb	r0, [r4, #0]
}
    299a:	bd10      	pop	{r4, pc}
    299c:	200008ae 	.word	0x200008ae

000029a0 <arm_core_mpu_configure_dynamic_mpu_regions>:
{
    29a0:	b508      	push	{r3, lr}

	/* In ARMv7-M architecture the dynamic regions are
	 * programmed on top of existing SRAM region configuration.
	 */

	mpu_reg_index = mpu_configure_regions(dynamic_regions,
    29a2:	4a08      	ldr	r2, [pc, #32]	; (29c4 <arm_core_mpu_configure_dynamic_mpu_regions+0x24>)
    29a4:	2300      	movs	r3, #0
    29a6:	7812      	ldrb	r2, [r2, #0]
    29a8:	f7ff ff4e 	bl	2848 <mpu_configure_regions>
		regions_num, mpu_reg_index, false);

	if (mpu_reg_index != -EINVAL) {
    29ac:	f110 0f16 	cmn.w	r0, #22
    29b0:	d003      	beq.n	29ba <arm_core_mpu_configure_dynamic_mpu_regions+0x1a>
/** Clear and disable the given MPU region.
* \param rnr Region number to be cleared.
*/
__STATIC_INLINE void ARM_MPU_ClrRegion(uint32_t rnr)
{
  MPU->RNR = rnr;
    29b2:	4b05      	ldr	r3, [pc, #20]	; (29c8 <arm_core_mpu_configure_dynamic_mpu_regions+0x28>)
  MPU->RASR = 0U;
    29b4:	2200      	movs	r2, #0

		/* Disable the non-programmed MPU regions. */
		for (int i = mpu_reg_index; i < get_num_regions(); i++) {
    29b6:	2807      	cmp	r0, #7
    29b8:	dd00      	ble.n	29bc <arm_core_mpu_configure_dynamic_mpu_regions+0x1c>
}
    29ba:	bd08      	pop	{r3, pc}
  MPU->RNR = rnr;
    29bc:	6098      	str	r0, [r3, #8]
  MPU->RASR = 0U;
    29be:	611a      	str	r2, [r3, #16]
    29c0:	3001      	adds	r0, #1
    29c2:	e7f8      	b.n	29b6 <arm_core_mpu_configure_dynamic_mpu_regions+0x16>
    29c4:	200008ae 	.word	0x200008ae
    29c8:	e000ed90 	.word	0xe000ed90

000029cc <__stdout_hook_install>:

static int (*_stdout_hook)(int) = _stdout_hook_default;

void __stdout_hook_install(int (*hook)(int))
{
	_stdout_hook = hook;
    29cc:	4b01      	ldr	r3, [pc, #4]	; (29d4 <__stdout_hook_install+0x8>)
    29ce:	6018      	str	r0, [r3, #0]
}
    29d0:	4770      	bx	lr
    29d2:	bf00      	nop
    29d4:	20000008 	.word	0x20000008

000029d8 <nordicsemi_nrf52_init>:
    29d8:	f04f 0320 	mov.w	r3, #32
    29dc:	f3ef 8211 	mrs	r2, BASEPRI
    29e0:	f383 8811 	msr	BASEPRI, r3
    29e4:	f3bf 8f6f 	isb	sy

	key = irq_lock();

#ifdef CONFIG_NRF_ENABLE_ICACHE
	/* Enable the instruction cache */
	NRF_NVMC->ICACHECNF = NVMC_ICACHECNF_CACHEEN_Msk;
    29e8:	4906      	ldr	r1, [pc, #24]	; (2a04 <nordicsemi_nrf52_init+0x2c>)
    29ea:	2301      	movs	r3, #1
    29ec:	f8c1 3540 	str.w	r3, [r1, #1344]	; 0x540
#endif

#if NRF_POWER_HAS_DCDCEN
NRF_STATIC_INLINE void nrf_power_dcdcen_set(NRF_POWER_Type * p_reg, bool enable)
{
    p_reg->DCDCEN = (enable ? POWER_DCDCEN_DCDCEN_Enabled : POWER_DCDCEN_DCDCEN_Disabled) <<
    29f0:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
    29f4:	f8c1 3578 	str.w	r3, [r1, #1400]	; 0x578
	__asm__ volatile(
    29f8:	f382 8811 	msr	BASEPRI, r2
    29fc:	f3bf 8f6f 	isb	sy
	NMI_INIT();

	irq_unlock(key);

	return 0;
}
    2a00:	2000      	movs	r0, #0
    2a02:	4770      	bx	lr
    2a04:	4001e000 	.word	0x4001e000

00002a08 <sys_arch_reboot>:
    *p_gpregret = val;
    2a08:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    2a0c:	b2c0      	uxtb	r0, r0
    2a0e:	f8c3 051c 	str.w	r0, [r3, #1308]	; 0x51c
  __ASM volatile ("dsb 0xF":::"memory");
    2a12:	f3bf 8f4f 	dsb	sy
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
    2a16:	4905      	ldr	r1, [pc, #20]	; (2a2c <sys_arch_reboot+0x24>)
    2a18:	4b05      	ldr	r3, [pc, #20]	; (2a30 <sys_arch_reboot+0x28>)
    2a1a:	68ca      	ldr	r2, [r1, #12]
    2a1c:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
    2a20:	4313      	orrs	r3, r2
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
    2a22:	60cb      	str	r3, [r1, #12]
    2a24:	f3bf 8f4f 	dsb	sy
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
    2a28:	bf00      	nop
  for(;;)                                                           /* wait until reset */
    2a2a:	e7fd      	b.n	2a28 <sys_arch_reboot+0x20>
    2a2c:	e000ed00 	.word	0xe000ed00
    2a30:	05fa0004 	.word	0x05fa0004

00002a34 <arch_busy_wait>:

#else // NRFX_CHECK(NRFX_DELAY_DWT_BASED)

NRF_STATIC_INLINE void nrfx_coredep_delay_us(uint32_t time_us)
{
    if (time_us == 0)
    2a34:	b120      	cbz	r0, 2a40 <arch_busy_wait+0xc>
    };

    typedef void (* delay_func_t)(uint32_t);
    const delay_func_t delay_cycles =
        // Set LSB to 1 to execute the code in the Thumb mode.
        (delay_func_t)((((uint32_t)delay_machine_code) | 1));
    2a36:	4b03      	ldr	r3, [pc, #12]	; (2a44 <arch_busy_wait+0x10>)
    uint32_t cycles = time_us * NRFX_DELAY_CPU_FREQ_MHZ;
    delay_cycles(cycles);
    2a38:	0180      	lsls	r0, r0, #6
    2a3a:	f043 0301 	orr.w	r3, r3, #1
    2a3e:	4718      	bx	r3

void arch_busy_wait(uint32_t time_us)
{
	nrfx_coredep_delay_us(time_us);
}
    2a40:	4770      	bx	lr
    2a42:	bf00      	nop
    2a44:	000060a0 	.word	0x000060a0

00002a48 <gpio_nrfx_init>:
}

#define GPIOTE_NODE DT_INST(0, nordic_nrf_gpiote)

static int gpio_nrfx_init(const struct device *port)
{
    2a48:	b508      	push	{r3, lr}
	static bool gpio_initialized;

	if (!gpio_initialized) {
    2a4a:	4b09      	ldr	r3, [pc, #36]	; (2a70 <gpio_nrfx_init+0x28>)
    2a4c:	781a      	ldrb	r2, [r3, #0]
    2a4e:	b96a      	cbnz	r2, 2a6c <gpio_nrfx_init+0x24>
		gpio_initialized = true;
    2a50:	2101      	movs	r1, #1
    2a52:	7019      	strb	r1, [r3, #0]
		IRQ_CONNECT(DT_IRQN(GPIOTE_NODE), DT_IRQ(GPIOTE_NODE, priority),
    2a54:	2006      	movs	r0, #6
    2a56:	2105      	movs	r1, #5
    2a58:	f7ff fb0c 	bl	2074 <z_arm_irq_priority_set>
			    gpiote_event_handler, NULL, 0);

		irq_enable(DT_IRQN(GPIOTE_NODE));
    2a5c:	2006      	movs	r0, #6
    2a5e:	f7ff faeb 	bl	2038 <arch_irq_enable>
    return ((uint32_t)p_reg + event);
}

NRF_STATIC_INLINE void nrf_gpiote_int_enable(NRF_GPIOTE_Type * p_reg, uint32_t mask)
{
    p_reg->INTENSET = mask;
    2a62:	4b04      	ldr	r3, [pc, #16]	; (2a74 <gpio_nrfx_init+0x2c>)
    2a64:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
    2a68:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
		nrf_gpiote_int_enable(NRF_GPIOTE, NRF_GPIOTE_INT_PORT_MASK);
	}

	return 0;
}
    2a6c:	2000      	movs	r0, #0
    2a6e:	bd08      	pop	{r3, pc}
    2a70:	200008af 	.word	0x200008af
    2a74:	40006000 	.word	0x40006000

00002a78 <gpio_nrfx_config>:
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK |
    2a78:	4b2a      	ldr	r3, [pc, #168]	; (2b24 <gpio_nrfx_config+0xac>)
{
    2a7a:	b570      	push	{r4, r5, r6, lr}
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    2a7c:	6846      	ldr	r6, [r0, #4]
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK |
    2a7e:	482a      	ldr	r0, [pc, #168]	; (2b28 <gpio_nrfx_config+0xb0>)
    2a80:	4013      	ands	r3, r2
    2a82:	4283      	cmp	r3, r0
    2a84:	d03e      	beq.n	2b04 <gpio_nrfx_config+0x8c>
    2a86:	d80d      	bhi.n	2aa4 <gpio_nrfx_config+0x2c>
    2a88:	2b06      	cmp	r3, #6
    2a8a:	d015      	beq.n	2ab8 <gpio_nrfx_config+0x40>
    2a8c:	d805      	bhi.n	2a9a <gpio_nrfx_config+0x22>
    2a8e:	b19b      	cbz	r3, 2ab8 <gpio_nrfx_config+0x40>
    2a90:	2b02      	cmp	r3, #2
    2a92:	d039      	beq.n	2b08 <gpio_nrfx_config+0x90>
    2a94:	f06f 0015 	mvn.w	r0, #21
    2a98:	e033      	b.n	2b02 <gpio_nrfx_config+0x8a>
    2a9a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
    2a9e:	d1f9      	bne.n	2a94 <gpio_nrfx_config+0x1c>
		drive = NRF_GPIO_PIN_H0S1;
    2aa0:	2301      	movs	r3, #1
    2aa2:	e009      	b.n	2ab8 <gpio_nrfx_config+0x40>
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK |
    2aa4:	4821      	ldr	r0, [pc, #132]	; (2b2c <gpio_nrfx_config+0xb4>)
    2aa6:	4283      	cmp	r3, r0
    2aa8:	d030      	beq.n	2b0c <gpio_nrfx_config+0x94>
    2aaa:	f5b3 0fa0 	cmp.w	r3, #5242880	; 0x500000
    2aae:	d02f      	beq.n	2b10 <gpio_nrfx_config+0x98>
    2ab0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
    2ab4:	d1ee      	bne.n	2a94 <gpio_nrfx_config+0x1c>
		drive = NRF_GPIO_PIN_S0H1;
    2ab6:	2302      	movs	r3, #2
	if ((flags & GPIO_PULL_UP) != 0) {
    2ab8:	06d0      	lsls	r0, r2, #27
		pull = NRF_GPIO_PIN_NOPULL;
    2aba:	bf54      	ite	pl
    2abc:	f3c2 1540 	ubfxpl	r5, r2, #5, #1
		pull = NRF_GPIO_PIN_PULLUP;
    2ac0:	2503      	movmi	r5, #3
		: NRF_GPIO_PIN_INPUT_DISCONNECT;
    2ac2:	f482 7480 	eor.w	r4, r2, #256	; 0x100
	if ((flags & GPIO_OUTPUT) != 0) {
    2ac6:	f412 7f00 	tst.w	r2, #512	; 0x200
	dir = ((flags & GPIO_OUTPUT) != 0)
    2aca:	f3c2 2040 	ubfx	r0, r2, #9, #1
		: NRF_GPIO_PIN_INPUT_DISCONNECT;
    2ace:	f3c4 2400 	ubfx	r4, r4, #8, #1
	if ((flags & GPIO_OUTPUT) != 0) {
    2ad2:	d007      	beq.n	2ae4 <gpio_nrfx_config+0x6c>
		if ((flags & GPIO_OUTPUT_INIT_HIGH) != 0) {
    2ad4:	f412 6f00 	tst.w	r2, #2048	; 0x800
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    2ad8:	6876      	ldr	r6, [r6, #4]
		if ((flags & GPIO_OUTPUT_INIT_HIGH) != 0) {
    2ada:	d01b      	beq.n	2b14 <gpio_nrfx_config+0x9c>
			nrf_gpio_port_out_set(reg, BIT(pin));
    2adc:	2201      	movs	r2, #1
    2ade:	408a      	lsls	r2, r1
}


NRF_STATIC_INLINE void nrf_gpio_port_out_set(NRF_GPIO_Type * p_reg, uint32_t set_mask)
{
    p_reg->OUTSET = set_mask;
    2ae0:	f8c6 2508 	str.w	r2, [r6, #1288]	; 0x508
                               | ((uint32_t)drive << GPIO_PIN_CNF_DRIVE_Pos)
    2ae4:	ea40 0244 	orr.w	r2, r0, r4, lsl #1
}

NRF_STATIC_INLINE uint32_t nrf_gpio_pin_port_number_extract(uint32_t * p_pin)
{
    uint32_t pin_number = *p_pin;
    *p_pin = pin_number & 0x1F;
    2ae8:	f001 011f 	and.w	r1, r1, #31
                               | ((uint32_t)drive << GPIO_PIN_CNF_DRIVE_Pos)
    2aec:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
    2af0:	f501 71e0 	add.w	r1, r1, #448	; 0x1c0
    2af4:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
                               | ((uint32_t)drive << GPIO_PIN_CNF_DRIVE_Pos)
    2af8:	ea43 0385 	orr.w	r3, r3, r5, lsl #2
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
    2afc:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
	return 0;
    2b00:	2000      	movs	r0, #0
}
    2b02:	bd70      	pop	{r4, r5, r6, pc}
		drive = NRF_GPIO_PIN_H0D1;
    2b04:	2307      	movs	r3, #7
    2b06:	e7d7      	b.n	2ab8 <gpio_nrfx_config+0x40>
		drive = NRF_GPIO_PIN_D0S1;
    2b08:	2304      	movs	r3, #4
    2b0a:	e7d5      	b.n	2ab8 <gpio_nrfx_config+0x40>
		drive = NRF_GPIO_PIN_D0H1;
    2b0c:	2305      	movs	r3, #5
    2b0e:	e7d3      	b.n	2ab8 <gpio_nrfx_config+0x40>
		drive = NRF_GPIO_PIN_H0H1;
    2b10:	2303      	movs	r3, #3
    2b12:	e7d1      	b.n	2ab8 <gpio_nrfx_config+0x40>
		} else if ((flags & GPIO_OUTPUT_INIT_LOW) != 0) {
    2b14:	0552      	lsls	r2, r2, #21
			nrf_gpio_port_out_clear(reg, BIT(pin));
    2b16:	bf42      	ittt	mi
    2b18:	2201      	movmi	r2, #1
    2b1a:	408a      	lslmi	r2, r1
    p_reg->OUTCLR = clr_mask;
    2b1c:	f8c6 250c 	strmi.w	r2, [r6, #1292]	; 0x50c
}
    2b20:	e7e0      	b.n	2ae4 <gpio_nrfx_config+0x6c>
    2b22:	bf00      	nop
    2b24:	00f00006 	.word	0x00f00006
    2b28:	00100006 	.word	0x00100006
    2b2c:	00400002 	.word	0x00400002

00002b30 <gpio_nrfx_pin_interrupt_configure>:
{
    2b30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    2b32:	460c      	mov	r4, r1
	uint32_t abs_pin = NRF_GPIO_PIN_MAP(get_port_cfg(port)->port_num, pin);
    2b34:	6841      	ldr	r1, [r0, #4]
	struct gpio_nrfx_data *data = get_port_data(port);
    2b36:	68c6      	ldr	r6, [r0, #12]
	uint32_t abs_pin = NRF_GPIO_PIN_MAP(get_port_cfg(port)->port_num, pin);
    2b38:	7a08      	ldrb	r0, [r1, #8]
    2b3a:	f004 051f 	and.w	r5, r4, #31
	if ((mode == GPIO_INT_MODE_EDGE) &&
    2b3e:	f5b2 3fa0 	cmp.w	r2, #81920	; 0x14000
    2b42:	ea45 1540 	orr.w	r5, r5, r0, lsl #5
    2b46:	d10c      	bne.n	2b62 <gpio_nrfx_pin_interrupt_configure+0x32>
    *p_pin = pin_number & 0x1F;
    2b48:	f005 011f 	and.w	r1, r5, #31
    return (nrf_gpio_pin_dir_t)((reg->PIN_CNF[pin_number] &
    2b4c:	f501 71e0 	add.w	r1, r1, #448	; 0x1c0
    2b50:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
    2b54:	f850 1021 	ldr.w	r1, [r0, r1, lsl #2]
    2b58:	07cf      	lsls	r7, r1, #31
    2b5a:	d507      	bpl.n	2b6c <gpio_nrfx_pin_interrupt_configure+0x3c>
		return -ENOTSUP;
    2b5c:	f06f 0022 	mvn.w	r0, #34	; 0x22
    2b60:	e0bd      	b.n	2cde <gpio_nrfx_pin_interrupt_configure+0x1ae>
	WRITE_BIT(data->pin_int_en, pin, mode != GPIO_INT_MODE_DISABLED);
    2b62:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
    2b66:	68f1      	ldr	r1, [r6, #12]
    2b68:	f000 80aa 	beq.w	2cc0 <gpio_nrfx_pin_interrupt_configure+0x190>
    2b6c:	68f0      	ldr	r0, [r6, #12]
    2b6e:	2101      	movs	r1, #1
    2b70:	40a1      	lsls	r1, r4
    2b72:	4301      	orrs	r1, r0
    2b74:	6970      	ldr	r0, [r6, #20]
    2b76:	60f1      	str	r1, [r6, #12]
	WRITE_BIT(data->trig_edge, pin, mode == GPIO_INT_MODE_EDGE);
    2b78:	2101      	movs	r1, #1
    2b7a:	40a1      	lsls	r1, r4
    2b7c:	f5b2 3fa0 	cmp.w	r2, #81920	; 0x14000
    2b80:	69b2      	ldr	r2, [r6, #24]
    2b82:	bf0c      	ite	eq
    2b84:	4308      	orreq	r0, r1
    2b86:	4388      	bicne	r0, r1
	WRITE_BIT(data->double_edge, pin, trig == GPIO_INT_TRIG_BOTH);
    2b88:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
    2b8c:	bf0c      	ite	eq
    2b8e:	430a      	orreq	r2, r1
    2b90:	438a      	bicne	r2, r1
    2b92:	61b2      	str	r2, [r6, #24]
    2b94:	6932      	ldr	r2, [r6, #16]
	WRITE_BIT(data->trig_edge, pin, mode == GPIO_INT_MODE_EDGE);
    2b96:	6170      	str	r0, [r6, #20]
	WRITE_BIT(data->int_active_level, pin, trig == GPIO_INT_TRIG_HIGH);
    2b98:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
    2b9c:	bf0c      	ite	eq
    2b9e:	4311      	orreq	r1, r2
    2ba0:	ea22 0101 	bicne.w	r1, r2, r1
    p_reg->INTENCLR = mask;
}

NRF_STATIC_INLINE uint32_t nrf_gpiote_int_enable_check(NRF_GPIOTE_Type const * p_reg, uint32_t mask)
{
    return p_reg->INTENSET & mask;
    2ba4:	4a54      	ldr	r2, [pc, #336]	; (2cf8 <gpio_nrfx_pin_interrupt_configure+0x1c8>)
    2ba6:	6131      	str	r1, [r6, #16]
    2ba8:	f8d2 1304 	ldr.w	r1, [r2, #772]	; 0x304
	for (size_t i = 0; i < GPIOTE_CH_NUM; i++) {
    2bac:	2300      	movs	r3, #0
    2bae:	b2c9      	uxtb	r1, r1
                        ((polarity << GPIOTE_CONFIG_POLARITY_Pos) & GPIOTE_CONFIG_POLARITY_Msk);
}

NRF_STATIC_INLINE uint32_t nrf_gpiote_event_pin_get(NRF_GPIOTE_Type const * p_reg, uint32_t idx)
{
    return ((p_reg->CONFIG[idx] & GPIOTE_CONFIG_PORT_PIN_Msk) >> GPIOTE_CONFIG_PSEL_Pos);
    2bb0:	f503 70a2 	add.w	r0, r3, #324	; 0x144
    2bb4:	f852 0020 	ldr.w	r0, [r2, r0, lsl #2]
    2bb8:	f3c0 2004 	ubfx	r0, r0, #8, #5
		if ((nrf_gpiote_event_pin_get(NRF_GPIOTE, i) == abs_pin)
    2bbc:	4285      	cmp	r5, r0
    2bbe:	f040 8084 	bne.w	2cca <gpio_nrfx_pin_interrupt_configure+0x19a>
		    && (intenset & BIT(i))) {
    2bc2:	fa21 f003 	lsr.w	r0, r1, r3
    2bc6:	07c0      	lsls	r0, r0, #31
    2bc8:	d57f      	bpl.n	2cca <gpio_nrfx_pin_interrupt_configure+0x19a>
			(void)atomic_and(mask, ~BIT(i));
    2bca:	2101      	movs	r1, #1
    2bcc:	4099      	lsls	r1, r3
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    2bce:	484b      	ldr	r0, [pc, #300]	; (2cfc <gpio_nrfx_pin_interrupt_configure+0x1cc>)
    2bd0:	f3bf 8f5b 	dmb	ish
    2bd4:	43cf      	mvns	r7, r1
    2bd6:	e850 cf00 	ldrex	ip, [r0]
    2bda:	ea0c 0c07 	and.w	ip, ip, r7
    2bde:	e840 ce00 	strex	lr, ip, [r0]
    2be2:	f1be 0f00 	cmp.w	lr, #0
    2be6:	d1f6      	bne.n	2bd6 <gpio_nrfx_pin_interrupt_configure+0xa6>
    2be8:	f3bf 8f5b 	dmb	ish
   p_reg->CONFIG[idx] &= ~GPIOTE_CONFIG_MODE_Event;
    2bec:	009b      	lsls	r3, r3, #2
    2bee:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    2bf2:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
    2bf6:	f8d3 0510 	ldr.w	r0, [r3, #1296]	; 0x510
    2bfa:	f020 0001 	bic.w	r0, r0, #1
    2bfe:	f8c3 0510 	str.w	r0, [r3, #1296]	; 0x510
    p_reg->INTENCLR = mask;
    2c02:	f8c2 1308 	str.w	r1, [r2, #776]	; 0x308
	nrf_gpio_cfg_sense_set(abs_pin, NRF_GPIO_PIN_NOSENSE);
    2c06:	2100      	movs	r1, #0
    2c08:	4628      	mov	r0, r5
    2c0a:	f002 fec0 	bl	598e <nrf_gpio_cfg_sense_set>
	if (data->pin_int_en & BIT(pin)) {
    2c0e:	68f3      	ldr	r3, [r6, #12]
    2c10:	40e3      	lsrs	r3, r4
    2c12:	f013 0301 	ands.w	r3, r3, #1
    2c16:	d051      	beq.n	2cbc <gpio_nrfx_pin_interrupt_configure+0x18c>
		if (data->trig_edge & BIT(pin)) {
    2c18:	6973      	ldr	r3, [r6, #20]
    2c1a:	40e3      	lsrs	r3, r4
    2c1c:	f013 0201 	ands.w	r2, r3, #1
    2c20:	d05e      	beq.n	2ce0 <gpio_nrfx_pin_interrupt_configure+0x1b0>
			if (data->double_edge & BIT(pin)) {
    2c22:	69b3      	ldr	r3, [r6, #24]
    2c24:	40e3      	lsrs	r3, r4
    2c26:	07db      	lsls	r3, r3, #31
			} else if ((data->int_active_level & BIT(pin)) != 0U) {
    2c28:	bf5f      	itttt	pl
    2c2a:	6931      	ldrpl	r1, [r6, #16]
    2c2c:	fa21 f404 	lsrpl.w	r4, r1, r4
    2c30:	f004 0401 	andpl.w	r4, r4, #1
    2c34:	f1c4 0402 	rsbpl	r4, r4, #2
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    2c38:	4930      	ldr	r1, [pc, #192]	; (2cfc <gpio_nrfx_pin_interrupt_configure+0x1cc>)
    2c3a:	bf54      	ite	pl
    2c3c:	b2e4      	uxtbpl	r4, r4
				pol = NRF_GPIOTE_POLARITY_TOGGLE;
    2c3e:	2403      	movmi	r4, #3
    2c40:	2200      	movs	r2, #0
		atomic_val_t prev = atomic_or(mask, BIT(channel));
    2c42:	2701      	movs	r7, #1
    2c44:	fa07 f602 	lsl.w	r6, r7, r2
    2c48:	f3bf 8f5b 	dmb	ish
    2c4c:	e851 0f00 	ldrex	r0, [r1]
    2c50:	ea40 0306 	orr.w	r3, r0, r6
    2c54:	e841 3c00 	strex	ip, r3, [r1]
    2c58:	f1bc 0f00 	cmp.w	ip, #0
    2c5c:	d1f6      	bne.n	2c4c <gpio_nrfx_pin_interrupt_configure+0x11c>
    2c5e:	f3bf 8f5b 	dmb	ish
		if ((prev & BIT(channel)) == 0) {
    2c62:	40d0      	lsrs	r0, r2
    2c64:	f010 0301 	ands.w	r3, r0, #1
    2c68:	d134      	bne.n	2cd4 <gpio_nrfx_pin_interrupt_configure+0x1a4>
  p_reg->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk | GPIOTE_CONFIG_POLARITY_Msk);
    2c6a:	0091      	lsls	r1, r2, #2
    2c6c:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
    2c70:	f501 41c0 	add.w	r1, r1, #24576	; 0x6000
			nrf_gpiote_event_t evt =
    2c74:	3240      	adds	r2, #64	; 0x40
    2c76:	f8d1 0510 	ldr.w	r0, [r1, #1296]	; 0x510
    2c7a:	f420 3047 	bic.w	r0, r0, #203776	; 0x31c00
    2c7e:	f420 7040 	bic.w	r0, r0, #768	; 0x300
    2c82:	0092      	lsls	r2, r2, #2
    2c84:	f8c1 0510 	str.w	r0, [r1, #1296]	; 0x510
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    2c88:	022d      	lsls	r5, r5, #8
    return ((uint32_t)p_reg + event);
    2c8a:	b292      	uxth	r2, r2
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    2c8c:	f8d1 0510 	ldr.w	r0, [r1, #1296]	; 0x510
    2c90:	f405 55f8 	and.w	r5, r5, #7936	; 0x1f00
    return ((uint32_t)p_reg + event);
    2c94:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
    2c98:	f502 42c0 	add.w	r2, r2, #24576	; 0x6000
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    2c9c:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
    2ca0:	4305      	orrs	r5, r0
    2ca2:	f8c1 5510 	str.w	r5, [r1, #1296]	; 0x510
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    2ca6:	6013      	str	r3, [r2, #0]
    2ca8:	6812      	ldr	r2, [r2, #0]
   p_reg->CONFIG[idx] |= GPIOTE_CONFIG_MODE_Event;
    2caa:	f8d1 2510 	ldr.w	r2, [r1, #1296]	; 0x510
    2cae:	f042 0201 	orr.w	r2, r2, #1
    2cb2:	f8c1 2510 	str.w	r2, [r1, #1296]	; 0x510
    p_reg->INTENSET = mask;
    2cb6:	4a10      	ldr	r2, [pc, #64]	; (2cf8 <gpio_nrfx_pin_interrupt_configure+0x1c8>)
    2cb8:	f8c2 6304 	str.w	r6, [r2, #772]	; 0x304
	int res = 0;
    2cbc:	4618      	mov	r0, r3
    2cbe:	e00e      	b.n	2cde <gpio_nrfx_pin_interrupt_configure+0x1ae>
	WRITE_BIT(data->pin_int_en, pin, mode != GPIO_INT_MODE_DISABLED);
    2cc0:	2001      	movs	r0, #1
    2cc2:	40a0      	lsls	r0, r4
    2cc4:	ea21 0100 	bic.w	r1, r1, r0
    2cc8:	e754      	b.n	2b74 <gpio_nrfx_pin_interrupt_configure+0x44>
	for (size_t i = 0; i < GPIOTE_CH_NUM; i++) {
    2cca:	3301      	adds	r3, #1
    2ccc:	2b08      	cmp	r3, #8
    2cce:	f47f af6f 	bne.w	2bb0 <gpio_nrfx_pin_interrupt_configure+0x80>
    2cd2:	e798      	b.n	2c06 <gpio_nrfx_pin_interrupt_configure+0xd6>
	for (uint8_t channel = 0; channel < GPIOTE_CH_NUM; ++channel) {
    2cd4:	3201      	adds	r2, #1
    2cd6:	2a08      	cmp	r2, #8
    2cd8:	d1b4      	bne.n	2c44 <gpio_nrfx_pin_interrupt_configure+0x114>
	return -ENODEV;
    2cda:	f06f 0012 	mvn.w	r0, #18
}
    2cde:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if ((BIT(pin) & data->int_active_level) != 0U) {
    2ce0:	6931      	ldr	r1, [r6, #16]
    2ce2:	40e1      	lsrs	r1, r4
    2ce4:	f001 0101 	and.w	r1, r1, #1
    2ce8:	f1c1 0103 	rsb	r1, r1, #3
			nrf_gpio_cfg_sense_set(abs_pin, sense);
    2cec:	4628      	mov	r0, r5
    2cee:	b2c9      	uxtb	r1, r1
    2cf0:	f002 fe4d 	bl	598e <nrf_gpio_cfg_sense_set>
	int res = 0;
    2cf4:	4610      	mov	r0, r2
    2cf6:	e7f2      	b.n	2cde <gpio_nrfx_pin_interrupt_configure+0x1ae>
    2cf8:	40006000 	.word	0x40006000
    2cfc:	20000428 	.word	0x20000428

00002d00 <gpiote_event_handler>:
{
    2d00:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    2d04:	4d3f      	ldr	r5, [pc, #252]	; (2e04 <gpiote_event_handler+0x104>)
    2d06:	682e      	ldr	r6, [r5, #0]
	if (port_event) {
    2d08:	2e00      	cmp	r6, #0
    2d0a:	d04e      	beq.n	2daa <gpiote_event_handler+0xaa>
	uint32_t out = data->pin_int_en;
    2d0c:	4b3e      	ldr	r3, [pc, #248]	; (2e08 <gpiote_event_handler+0x108>)
	out &= ~data->trig_edge & ~data->double_edge;
    2d0e:	e9d3 1005 	ldrd	r1, r0, [r3, #20]
	uint32_t out = data->pin_int_en;
    2d12:	68da      	ldr	r2, [r3, #12]
	uint32_t pin_states = ~(port_in ^ data->int_active_level);
    2d14:	691b      	ldr	r3, [r3, #16]
	out &= ~data->trig_edge & ~data->double_edge;
    2d16:	4301      	orrs	r1, r0
    2d18:	ea22 0201 	bic.w	r2, r2, r1
    return p_reg->IN;
    2d1c:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
	uint32_t bit = 1U << pin;
    2d20:	2701      	movs	r7, #1
    2d22:	f8d1 4510 	ldr.w	r4, [r1, #1296]	; 0x510
	uint32_t pin_states = ~(port_in ^ data->int_active_level);
    2d26:	405c      	eors	r4, r3
	uint32_t out = pin_states & level_pins;
    2d28:	ea22 0404 	bic.w	r4, r2, r4
	uint32_t pin = 0U;
    2d2c:	f04f 0800 	mov.w	r8, #0
	while (level_pins) {
    2d30:	bb72      	cbnz	r2, 2d90 <gpiote_event_handler+0x90>
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    2d32:	602a      	str	r2, [r5, #0]
    2d34:	682b      	ldr	r3, [r5, #0]
    return p_reg->INTENSET & mask;
    2d36:	4835      	ldr	r0, [pc, #212]	; (2e0c <gpiote_event_handler+0x10c>)
	uint32_t fired_triggers[GPIO_COUNT] = {0};
    2d38:	2300      	movs	r3, #0
		if (nrf_gpiote_int_enable_check(NRF_GPIOTE, BIT(i)) &&
    2d3a:	2501      	movs	r5, #1
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    2d3c:	461f      	mov	r7, r3
    return p_reg->INTENSET & mask;
    2d3e:	f8d0 2304 	ldr.w	r2, [r0, #772]	; 0x304
    2d42:	fa05 f103 	lsl.w	r1, r5, r3
    2d46:	4211      	tst	r1, r2
    2d48:	d011      	beq.n	2d6e <gpiote_event_handler+0x6e>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    2d4a:	009a      	lsls	r2, r3, #2
    2d4c:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
    2d50:	f502 42c2 	add.w	r2, r2, #24832	; 0x6100
    2d54:	6811      	ldr	r1, [r2, #0]
    2d56:	b151      	cbz	r1, 2d6e <gpiote_event_handler+0x6e>
    return ((p_reg->CONFIG[idx] & GPIOTE_CONFIG_PORT_PIN_Msk) >> GPIOTE_CONFIG_PSEL_Pos);
    2d58:	f503 71a2 	add.w	r1, r3, #324	; 0x144
    2d5c:	f850 1021 	ldr.w	r1, [r0, r1, lsl #2]
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    2d60:	6017      	str	r7, [r2, #0]
    return ((p_reg->CONFIG[idx] & GPIOTE_CONFIG_PORT_PIN_Msk) >> GPIOTE_CONFIG_PSEL_Pos);
    2d62:	f3c1 2104 	ubfx	r1, r1, #8, #5
			fired_triggers[abs_pin / 32U] |= BIT(abs_pin % 32);
    2d66:	fa05 f101 	lsl.w	r1, r5, r1
    2d6a:	6812      	ldr	r2, [r2, #0]
    2d6c:	430c      	orrs	r4, r1
	for (size_t i = 0; i < GPIOTE_CH_NUM; i++) {
    2d6e:	3301      	adds	r3, #1
    2d70:	2b08      	cmp	r3, #8
    2d72:	d1e4      	bne.n	2d3e <gpiote_event_handler+0x3e>
	if (fired_triggers[0]) {
    2d74:	b9dc      	cbnz	r4, 2dae <gpiote_event_handler+0xae>
	if (port_event) {
    2d76:	b14e      	cbz	r6, 2d8c <gpiote_event_handler+0x8c>
	uint32_t out = data->pin_int_en;
    2d78:	4c23      	ldr	r4, [pc, #140]	; (2e08 <gpiote_event_handler+0x108>)
	out &= ~data->trig_edge & ~data->double_edge;
    2d7a:	e9d4 1005 	ldrd	r1, r0, [r4, #20]
	uint32_t out = data->pin_int_en;
    2d7e:	68e2      	ldr	r2, [r4, #12]
	out &= ~data->trig_edge & ~data->double_edge;
    2d80:	4301      	orrs	r1, r0
    2d82:	ea22 0201 	bic.w	r2, r2, r1
	uint32_t bit = 1U << pin;
    2d86:	2501      	movs	r5, #1
	uint32_t pin = 0U;
    2d88:	2600      	movs	r6, #0
	while (level_pins) {
    2d8a:	bb42      	cbnz	r2, 2dde <gpiote_event_handler+0xde>
}
    2d8c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (level_pins & bit) {
    2d90:	423a      	tst	r2, r7
    2d92:	d006      	beq.n	2da2 <gpiote_event_handler+0xa2>
			nrf_gpio_cfg_sense_set(abs_pin, NRF_GPIO_PIN_NOSENSE);
    2d94:	2100      	movs	r1, #0
    2d96:	f008 001f 	and.w	r0, r8, #31
    2d9a:	f002 fdf8 	bl	598e <nrf_gpio_cfg_sense_set>
			level_pins &= ~bit;
    2d9e:	ea22 0207 	bic.w	r2, r2, r7
		++pin;
    2da2:	f108 0801 	add.w	r8, r8, #1
		bit <<= 1;
    2da6:	007f      	lsls	r7, r7, #1
    2da8:	e7c2      	b.n	2d30 <gpiote_event_handler+0x30>
	uint32_t fired_triggers[GPIO_COUNT] = {0};
    2daa:	4634      	mov	r4, r6
    2dac:	e7c3      	b.n	2d36 <gpiote_event_handler+0x36>
					const struct device *port,
					uint32_t pins)
{
	struct gpio_callback *cb, *tmp;

	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
    2dae:	4b16      	ldr	r3, [pc, #88]	; (2e08 <gpiote_event_handler+0x108>)
    2db0:	6859      	ldr	r1, [r3, #4]
    2db2:	2900      	cmp	r1, #0
    2db4:	d0df      	beq.n	2d76 <gpiote_event_handler+0x76>
	return node->next;
    2db6:	680d      	ldr	r5, [r1, #0]
		if (cb->pin_mask & pins) {
			__ASSERT(cb->handler, "No callback handler!");
			cb->handler(port, cb, cb->pin_mask & pins);
    2db8:	4f15      	ldr	r7, [pc, #84]	; (2e10 <gpiote_event_handler+0x110>)
    2dba:	2d00      	cmp	r5, #0
    2dbc:	bf38      	it	cc
    2dbe:	2500      	movcc	r5, #0
		if (cb->pin_mask & pins) {
    2dc0:	688a      	ldr	r2, [r1, #8]
    2dc2:	4022      	ands	r2, r4
    2dc4:	d002      	beq.n	2dcc <gpiote_event_handler+0xcc>
			cb->handler(port, cb, cb->pin_mask & pins);
    2dc6:	684b      	ldr	r3, [r1, #4]
    2dc8:	4638      	mov	r0, r7
    2dca:	4798      	blx	r3
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
    2dcc:	2d00      	cmp	r5, #0
    2dce:	d0d2      	beq.n	2d76 <gpiote_event_handler+0x76>
    2dd0:	682b      	ldr	r3, [r5, #0]
    2dd2:	2b00      	cmp	r3, #0
    2dd4:	bf38      	it	cc
    2dd6:	2300      	movcc	r3, #0
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
    2dd8:	4629      	mov	r1, r5
    2dda:	461d      	mov	r5, r3
    2ddc:	e7f0      	b.n	2dc0 <gpiote_event_handler+0xc0>
		if (level_pins & bit) {
    2dde:	4215      	tst	r5, r2
    2de0:	d00c      	beq.n	2dfc <gpiote_event_handler+0xfc>
	if ((BIT(pin) & data->int_active_level) != 0U) {
    2de2:	6921      	ldr	r1, [r4, #16]
    2de4:	40f1      	lsrs	r1, r6
    2de6:	f001 0101 	and.w	r1, r1, #1
    2dea:	f1c1 0103 	rsb	r1, r1, #3
			nrf_gpio_cfg_sense_set(abs_pin, sense);
    2dee:	b2c9      	uxtb	r1, r1
    2df0:	f006 001f 	and.w	r0, r6, #31
    2df4:	f002 fdcb 	bl	598e <nrf_gpio_cfg_sense_set>
			level_pins &= ~bit;
    2df8:	ea22 0205 	bic.w	r2, r2, r5
		++pin;
    2dfc:	3601      	adds	r6, #1
		bit <<= 1;
    2dfe:	006d      	lsls	r5, r5, #1
    2e00:	e7c3      	b.n	2d8a <gpiote_event_handler+0x8a>
    2e02:	bf00      	nop
    2e04:	4000617c 	.word	0x4000617c
    2e08:	2000040c 	.word	0x2000040c
    2e0c:	40006000 	.word	0x40006000
    2e10:	20000068 	.word	0x20000068

00002e14 <pwm_nrfx_get_cycles_per_sec>:
{
	/* TODO: Since this function might be removed, we will always return
	 * 16MHz from this function and handle the conversion with prescaler,
	 * etc, in the pin set function. See issue #6958.
	 */
	*cycles = 16ul * 1000ul * 1000ul;
    2e14:	4802      	ldr	r0, [pc, #8]	; (2e20 <pwm_nrfx_get_cycles_per_sec+0xc>)
    2e16:	2100      	movs	r1, #0
    2e18:	e9c2 0100 	strd	r0, r1, [r2]

	return 0;
}
    2e1c:	2000      	movs	r0, #0
    2e1e:	4770      	bx	lr
    2e20:	00f42400 	.word	0x00f42400

00002e24 <pwm_nrfx_init>:
	.pin_set = pwm_nrfx_pin_set,
	.get_cycles_per_sec = pwm_nrfx_get_cycles_per_sec,
};

static int pwm_nrfx_init(const struct device *dev)
{
    2e24:	b510      	push	{r4, lr}
    2e26:	4604      	mov	r4, r0
	const struct pwm_nrfx_config *config = dev->config;
    2e28:	6840      	ldr	r0, [r0, #4]

	nrfx_err_t result = nrfx_pwm_init(&config->pwm,
    2e2a:	2300      	movs	r3, #0
    2e2c:	461a      	mov	r2, r3
    2e2e:	f100 0108 	add.w	r1, r0, #8
    2e32:	f000 fcff 	bl	3834 <nrfx_pwm_init>
					  &config->initial_config,
					  NULL,
					  NULL);
	if (result != NRFX_SUCCESS) {
    2e36:	4b09      	ldr	r3, [pc, #36]	; (2e5c <pwm_nrfx_init+0x38>)
    2e38:	4298      	cmp	r0, r3
    2e3a:	d00d      	beq.n	2e58 <pwm_nrfx_init+0x34>
    2e3c:	4b08      	ldr	r3, [pc, #32]	; (2e60 <pwm_nrfx_init+0x3c>)
    2e3e:	4a09      	ldr	r2, [pc, #36]	; (2e64 <pwm_nrfx_init+0x40>)
		LOG_ERR("Failed to initialize device: %s", dev->name);
    2e40:	4809      	ldr	r0, [pc, #36]	; (2e68 <pwm_nrfx_init+0x44>)
    2e42:	6821      	ldr	r1, [r4, #0]
    2e44:	1ad2      	subs	r2, r2, r3
    2e46:	08d2      	lsrs	r2, r2, #3
    2e48:	0192      	lsls	r2, r2, #6
    2e4a:	f042 0201 	orr.w	r2, r2, #1
    2e4e:	f002 f9f7 	bl	5240 <log_1>
		return -EBUSY;
    2e52:	f06f 000f 	mvn.w	r0, #15
	}

	return 0;
}
    2e56:	bd10      	pop	{r4, pc}
	return 0;
    2e58:	2000      	movs	r0, #0
    2e5a:	e7fc      	b.n	2e56 <pwm_nrfx_init+0x32>
    2e5c:	0bad0000 	.word	0x0bad0000
    2e60:	0000602c 	.word	0x0000602c
    2e64:	0000605c 	.word	0x0000605c
    2e68:	00006858 	.word	0x00006858

00002e6c <pwm_nrfx_pin_set>:
{
    2e6c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    2e70:	f89d 4020 	ldrb.w	r4, [sp, #32]
	const struct pwm_nrfx_config *config = dev->config;
    2e74:	6846      	ldr	r6, [r0, #4]
{
    2e76:	460f      	mov	r7, r1
    2e78:	4615      	mov	r5, r2
	struct pwm_nrfx_data *data = dev->data;
    2e7a:	68c1      	ldr	r1, [r0, #12]
{
    2e7c:	4698      	mov	r8, r3
	if (flags) {
    2e7e:	2c00      	cmp	r4, #0
    2e80:	f040 8084 	bne.w	2f8c <pwm_nrfx_pin_set+0x120>
	for (i = 0U; i < NRF_PWM_CHANNEL_COUNT; i++) {
    2e84:	1df2      	adds	r2, r6, #7
		if (output_pins[i] != NRFX_PWM_PIN_NOT_USED
    2e86:	f812 3f01 	ldrb.w	r3, [r2, #1]!
    2e8a:	2bff      	cmp	r3, #255	; 0xff
    2e8c:	d003      	beq.n	2e96 <pwm_nrfx_pin_set+0x2a>
		    && (pwm == (output_pins[i] & PWM_NRFX_CH_PIN_MASK))) {
    2e8e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    2e92:	429f      	cmp	r7, r3
    2e94:	d07d      	beq.n	2f92 <pwm_nrfx_pin_set+0x126>
	for (i = 0U; i < NRF_PWM_CHANNEL_COUNT; i++) {
    2e96:	3401      	adds	r4, #1
    2e98:	b2e4      	uxtb	r4, r4
    2e9a:	2c04      	cmp	r4, #4
    2e9c:	d1f3      	bne.n	2e86 <pwm_nrfx_pin_set+0x1a>
    2e9e:	4a5d      	ldr	r2, [pc, #372]	; (3014 <pwm_nrfx_pin_set+0x1a8>)
    2ea0:	4b5d      	ldr	r3, [pc, #372]	; (3018 <pwm_nrfx_pin_set+0x1ac>)
		LOG_ERR("PWM pin %d not enabled through DTS configuration.",
    2ea2:	485e      	ldr	r0, [pc, #376]	; (301c <pwm_nrfx_pin_set+0x1b0>)
    2ea4:	1ad2      	subs	r2, r2, r3
    2ea6:	08d2      	lsrs	r2, r2, #3
    2ea8:	0192      	lsls	r2, r2, #6
    2eaa:	f042 0201 	orr.w	r2, r2, #1
    2eae:	4639      	mov	r1, r7
    2eb0:	e046      	b.n	2f40 <pwm_nrfx_pin_set+0xd4>
	was_stopped = !pwm_channel_is_active(channel, data) &&
    2eb2:	2000      	movs	r0, #0
    2eb4:	e07d      	b.n	2fb2 <pwm_nrfx_pin_set+0x146>
	for (i = 0; i < NRF_PWM_CHANNEL_COUNT; ++i) {
    2eb6:	3301      	adds	r3, #1
    2eb8:	2b04      	cmp	r3, #4
    2eba:	f040 8088 	bne.w	2fce <pwm_nrfx_pin_set+0x162>
    2ebe:	462a      	mov	r2, r5
    2ec0:	2300      	movs	r3, #0
		if (countertop <= PWM_COUNTERTOP_COUNTERTOP_Msk) {
    2ec2:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
    2ec6:	fa5f fe83 	uxtb.w	lr, r3
    2eca:	d22b      	bcs.n	2f24 <pwm_nrfx_pin_set+0xb8>
			data->prescaler     = prescaler;
    2ecc:	f881 e00e 	strb.w	lr, [r1, #14]
			nrf_pwm_configure(config->pwm.p_registers,
    2ed0:	f8d6 e000 	ldr.w	lr, [r6]
			data->period_cycles = period_cycles;
    2ed4:	600d      	str	r5, [r1, #0]
			data->countertop    = (uint16_t)countertop;
    2ed6:	818a      	strh	r2, [r1, #12]
                                         nrf_pwm_mode_t mode,
                                         uint16_t       top_value)
{
    NRFX_ASSERT(top_value <= PWM_COUNTERTOP_COUNTERTOP_Msk);

    p_reg->PRESCALER  = base_clock;
    2ed8:	f8ce 350c 	str.w	r3, [lr, #1292]	; 0x50c
    p_reg->MODE       = mode;
    2edc:	f8ce c504 	str.w	ip, [lr, #1284]	; 0x504
    p_reg->COUNTERTOP = top_value;
    2ee0:	f8ce 2508 	str.w	r2, [lr, #1288]	; 0x508
		| (pulse_cycles >> data->prescaler));
    2ee4:	7b8a      	ldrb	r2, [r1, #14]
	pulse_cycles = MIN(pulse_cycles, period_cycles);
    2ee6:	4545      	cmp	r5, r8
    2ee8:	462b      	mov	r3, r5
    2eea:	bf28      	it	cs
    2eec:	4643      	movcs	r3, r8
		| (pulse_cycles >> data->prescaler));
    2eee:	fa23 f202 	lsr.w	r2, r3, r2
		(data->current[channel] & PWM_NRFX_CH_POLARITY_MASK)
    2ef2:	f40a 4a00 	and.w	sl, sl, #32768	; 0x8000
		| (pulse_cycles >> data->prescaler));
    2ef6:	ea42 020a 	orr.w	r2, r2, sl
    2efa:	b292      	uxth	r2, r2
	data->current[channel] = (
    2efc:	f8a9 2004 	strh.w	r2, [r9, #4]
	uint16_t pulse_cycle =
    2f00:	f3c2 020e 	ubfx	r2, r2, #0, #15
	return (pulse_cycle > 0 && pulse_cycle < data->countertop);
    2f04:	b11a      	cbz	r2, 2f0e <pwm_nrfx_pin_set+0xa2>
    2f06:	f8b1 c00c 	ldrh.w	ip, [r1, #12]
    2f0a:	4594      	cmp	ip, r2
    2f0c:	d81b      	bhi.n	2f46 <pwm_nrfx_pin_set+0xda>
			config->initial_config.output_pins[channel]
    2f0e:	1932      	adds	r2, r6, r4
    2f10:	f007 071f 	and.w	r7, r7, #31
    2f14:	f992 2008 	ldrsb.w	r2, [r2, #8]
			&& !channel_inverted_state;
    2f18:	b1c3      	cbz	r3, 2f4c <pwm_nrfx_pin_set+0xe0>
			&& channel_inverted_state;
    2f1a:	4545      	cmp	r5, r8
    2f1c:	d872      	bhi.n	3004 <pwm_nrfx_pin_set+0x198>
    2f1e:	2a00      	cmp	r2, #0
    2f20:	db16      	blt.n	2f50 <pwm_nrfx_pin_set+0xe4>
    2f22:	e06f      	b.n	3004 <pwm_nrfx_pin_set+0x198>
		countertop >>= 1;
    2f24:	3301      	adds	r3, #1
	} while (prescaler <= PWM_PRESCALER_PRESCALER_Msk);
    2f26:	2b08      	cmp	r3, #8
		countertop >>= 1;
    2f28:	ea4f 0252 	mov.w	r2, r2, lsr #1
	} while (prescaler <= PWM_PRESCALER_PRESCALER_Msk);
    2f2c:	d1c9      	bne.n	2ec2 <pwm_nrfx_pin_set+0x56>
    2f2e:	4a39      	ldr	r2, [pc, #228]	; (3014 <pwm_nrfx_pin_set+0x1a8>)
    2f30:	4b39      	ldr	r3, [pc, #228]	; (3018 <pwm_nrfx_pin_set+0x1ac>)
	LOG_ERR("Prescaler for period_cycles %u not found.", period_cycles);
    2f32:	483b      	ldr	r0, [pc, #236]	; (3020 <pwm_nrfx_pin_set+0x1b4>)
    2f34:	1ad2      	subs	r2, r2, r3
    2f36:	08d2      	lsrs	r2, r2, #3
    2f38:	0192      	lsls	r2, r2, #6
    2f3a:	f042 0201 	orr.w	r2, r2, #1
    2f3e:	4629      	mov	r1, r5
    2f40:	f002 f97e 	bl	5240 <log_1>
    2f44:	e058      	b.n	2ff8 <pwm_nrfx_pin_set+0x18c>
		if (was_stopped) {
    2f46:	b9a0      	cbnz	r0, 2f72 <pwm_nrfx_pin_set+0x106>
	return 0;
    2f48:	2000      	movs	r0, #0
    2f4a:	e057      	b.n	2ffc <pwm_nrfx_pin_set+0x190>
			&& channel_inverted_state;
    2f4c:	4545      	cmp	r5, r8
    2f4e:	d857      	bhi.n	3000 <pwm_nrfx_pin_set+0x194>
    nrf_gpio_port_out_clear(reg, 1UL << pin_number);
    2f50:	2301      	movs	r3, #1
    2f52:	fa03 f707 	lsl.w	r7, r3, r7
    p_reg->OUTCLR = clr_mask;
    2f56:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
    2f5a:	f8c3 750c 	str.w	r7, [r3, #1292]	; 0x50c
		if (!any_other_channel_is_active(channel, data)) {
    2f5e:	4620      	mov	r0, r4
    2f60:	f002 fd75 	bl	5a4e <any_other_channel_is_active>
    2f64:	2800      	cmp	r0, #0
    2f66:	d1ef      	bne.n	2f48 <pwm_nrfx_pin_set+0xdc>
			nrfx_pwm_stop(&config->pwm, false);
    2f68:	4601      	mov	r1, r0
    2f6a:	4630      	mov	r0, r6
    2f6c:	f002 fe05 	bl	5b7a <nrfx_pwm_stop>
    2f70:	e7ea      	b.n	2f48 <pwm_nrfx_pin_set+0xdc>
			while (!nrfx_pwm_is_stopped(&config->pwm)) {
    2f72:	4630      	mov	r0, r6
    2f74:	f000 fd1c 	bl	39b0 <nrfx_pwm_is_stopped>
    2f78:	2800      	cmp	r0, #0
    2f7a:	d0fa      	beq.n	2f72 <pwm_nrfx_pin_set+0x106>
			nrfx_pwm_simple_playback(&config->pwm,
    2f7c:	2302      	movs	r3, #2
    2f7e:	2201      	movs	r2, #1
    2f80:	f106 0118 	add.w	r1, r6, #24
    2f84:	4630      	mov	r0, r6
    2f86:	f000 fcd5 	bl	3934 <nrfx_pwm_simple_playback>
    2f8a:	e7dd      	b.n	2f48 <pwm_nrfx_pin_set+0xdc>
		return -ENOTSUP;
    2f8c:	f06f 0022 	mvn.w	r0, #34	; 0x22
    2f90:	e034      	b.n	2ffc <pwm_nrfx_pin_set+0x190>
	uint16_t pulse_cycle =
    2f92:	eb01 0944 	add.w	r9, r1, r4, lsl #1
		data->current[channel] & PWM_NRFX_CH_PULSE_CYCLES_MASK;
    2f96:	f8b9 a004 	ldrh.w	sl, [r9, #4]
	uint16_t pulse_cycle =
    2f9a:	f3ca 030e 	ubfx	r3, sl, #0, #15
	return (pulse_cycle > 0 && pulse_cycle < data->countertop);
    2f9e:	b113      	cbz	r3, 2fa6 <pwm_nrfx_pin_set+0x13a>
    2fa0:	898a      	ldrh	r2, [r1, #12]
    2fa2:	429a      	cmp	r2, r3
    2fa4:	d885      	bhi.n	2eb2 <pwm_nrfx_pin_set+0x46>
		      !any_other_channel_is_active(channel, data);
    2fa6:	4620      	mov	r0, r4
    2fa8:	f002 fd51 	bl	5a4e <any_other_channel_is_active>
	was_stopped = !pwm_channel_is_active(channel, data) &&
    2fac:	f080 0001 	eor.w	r0, r0, #1
    2fb0:	b2c0      	uxtb	r0, r0
	if (config->initial_config.count_mode == NRF_PWM_MODE_UP_AND_DOWN) {
    2fb2:	f896 c00e 	ldrb.w	ip, [r6, #14]
	if (period_cycles != data->period_cycles) {
    2fb6:	680b      	ldr	r3, [r1, #0]
	if (config->initial_config.count_mode == NRF_PWM_MODE_UP_AND_DOWN) {
    2fb8:	f1bc 0f01 	cmp.w	ip, #1
		period_cycles /= 2;
    2fbc:	bf04      	itt	eq
    2fbe:	086d      	lsreq	r5, r5, #1
		pulse_cycles /= 2;
    2fc0:	ea4f 0858 	moveq.w	r8, r8, lsr #1
	if (period_cycles != data->period_cycles) {
    2fc4:	42ab      	cmp	r3, r5
    2fc6:	d08d      	beq.n	2ee4 <pwm_nrfx_pin_set+0x78>
    2fc8:	2300      	movs	r3, #0
				data->current[i]
    2fca:	f101 0e04 	add.w	lr, r1, #4
		if (i != channel) {
    2fce:	b2da      	uxtb	r2, r3
    2fd0:	42a2      	cmp	r2, r4
    2fd2:	f43f af70 	beq.w	2eb6 <pwm_nrfx_pin_set+0x4a>
			uint16_t channel_pulse_cycle =
    2fd6:	f83e 2013 	ldrh.w	r2, [lr, r3, lsl #1]
			if (channel_pulse_cycle > 0) {
    2fda:	f3c2 020e 	ubfx	r2, r2, #0, #15
    2fde:	2a00      	cmp	r2, #0
    2fe0:	f43f af69 	beq.w	2eb6 <pwm_nrfx_pin_set+0x4a>
    2fe4:	490b      	ldr	r1, [pc, #44]	; (3014 <pwm_nrfx_pin_set+0x1a8>)
    2fe6:	4b0c      	ldr	r3, [pc, #48]	; (3018 <pwm_nrfx_pin_set+0x1ac>)
				LOG_ERR("Incompatible period.");
    2fe8:	480e      	ldr	r0, [pc, #56]	; (3024 <pwm_nrfx_pin_set+0x1b8>)
    2fea:	1ac9      	subs	r1, r1, r3
    2fec:	08c9      	lsrs	r1, r1, #3
    2fee:	0189      	lsls	r1, r1, #6
    2ff0:	f041 0101 	orr.w	r1, r1, #1
    2ff4:	f002 f917 	bl	5226 <log_0>
	return -EINVAL;
    2ff8:	f06f 0015 	mvn.w	r0, #21
}
    2ffc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		if (pulse_0_and_not_inverted || pulse_100_and_inverted) {
    3000:	2a00      	cmp	r2, #0
    3002:	daa5      	bge.n	2f50 <pwm_nrfx_pin_set+0xe4>
    p_reg->OUTSET = set_mask;
    3004:	2301      	movs	r3, #1
    3006:	fa03 f707 	lsl.w	r7, r3, r7
    300a:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
    300e:	f8c3 7508 	str.w	r7, [r3, #1288]	; 0x508
}
    3012:	e7a4      	b.n	2f5e <pwm_nrfx_pin_set+0xf2>
    3014:	0000605c 	.word	0x0000605c
    3018:	0000602c 	.word	0x0000602c
    301c:	000068b7 	.word	0x000068b7
    3020:	0000688d 	.word	0x0000688d
    3024:	00006878 	.word	0x00006878

00003028 <uarte_nrfx_configure>:
	return 0;
}

static int uarte_nrfx_configure(const struct device *dev,
				const struct uart_config *cfg)
{
    3028:	b570      	push	{r4, r5, r6, lr}
		break;
	default:
		return -ENOTSUP;
	}
#else
	if (cfg->stop_bits != UART_CFG_STOP_BITS_1) {
    302a:	794b      	ldrb	r3, [r1, #5]
    302c:	2b01      	cmp	r3, #1
    302e:	d123      	bne.n	3078 <uarte_nrfx_configure+0x50>
		return -ENOTSUP;
	}
#endif

	if (cfg->data_bits != UART_CFG_DATA_BITS_8) {
    3030:	798b      	ldrb	r3, [r1, #6]
    3032:	2b03      	cmp	r3, #3
    3034:	d120      	bne.n	3078 <uarte_nrfx_configure+0x50>
		return -ENOTSUP;
	}

	switch (cfg->flow_ctrl) {
    3036:	79ca      	ldrb	r2, [r1, #7]
    3038:	b122      	cbz	r2, 3044 <uarte_nrfx_configure+0x1c>
    303a:	2a01      	cmp	r2, #1
    303c:	d11c      	bne.n	3078 <uarte_nrfx_configure+0x50>
	case UART_CFG_FLOW_CTRL_NONE:
		uarte_cfg.hwfc = NRF_UARTE_HWFC_DISABLED;
		break;
	case UART_CFG_FLOW_CTRL_RTS_CTS:
		if (get_dev_config(dev)->rts_cts_pins_set) {
    303e:	6843      	ldr	r3, [r0, #4]
    3040:	791b      	ldrb	r3, [r3, #4]
    3042:	b1cb      	cbz	r3, 3078 <uarte_nrfx_configure+0x50>
	}

#if defined(UARTE_CONFIG_PARITYTYPE_Msk)
	uarte_cfg.paritytype = NRF_UARTE_PARITYTYPE_EVEN;
#endif
	switch (cfg->parity) {
    3044:	790c      	ldrb	r4, [r1, #4]
    3046:	b114      	cbz	r4, 304e <uarte_nrfx_configure+0x26>
    3048:	2c02      	cmp	r4, #2
    304a:	d115      	bne.n	3078 <uarte_nrfx_configure+0x50>
    304c:	240e      	movs	r4, #14
#endif
	default:
		return -ENOTSUP;
	}

	if (baudrate_set(dev, cfg->baudrate) != 0) {
    304e:	680b      	ldr	r3, [r1, #0]
	return config->uarte_regs;
    3050:	6845      	ldr	r5, [r0, #4]
	switch (baudrate) {
    3052:	f5b3 4f16 	cmp.w	r3, #38400	; 0x9600
	return config->uarte_regs;
    3056:	682d      	ldr	r5, [r5, #0]
	switch (baudrate) {
    3058:	d062      	beq.n	3120 <uarte_nrfx_configure+0xf8>
    305a:	d82b      	bhi.n	30b4 <uarte_nrfx_configure+0x8c>
    305c:	f5b3 5f16 	cmp.w	r3, #9600	; 0x2580
    3060:	d061      	beq.n	3126 <uarte_nrfx_configure+0xfe>
    3062:	d814      	bhi.n	308e <uarte_nrfx_configure+0x66>
    3064:	f5b3 6f96 	cmp.w	r3, #1200	; 0x4b0
    3068:	d05f      	beq.n	312a <uarte_nrfx_configure+0x102>
    306a:	d808      	bhi.n	307e <uarte_nrfx_configure+0x56>
    306c:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
    3070:	d05e      	beq.n	3130 <uarte_nrfx_configure+0x108>
    3072:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
    3076:	d05e      	beq.n	3136 <uarte_nrfx_configure+0x10e>
    3078:	f06f 0022 	mvn.w	r0, #34	; 0x22
    307c:	e04f      	b.n	311e <uarte_nrfx_configure+0xf6>
    307e:	f5b3 6f16 	cmp.w	r3, #2400	; 0x960
    3082:	d05b      	beq.n	313c <uarte_nrfx_configure+0x114>
    3084:	f5b3 5f96 	cmp.w	r3, #4800	; 0x12c0
    3088:	d1f6      	bne.n	3078 <uarte_nrfx_configure+0x50>
		nrf_baudrate = NRF_UARTE_BAUDRATE_4800;
    308a:	4b37      	ldr	r3, [pc, #220]	; (3168 <uarte_nrfx_configure+0x140>)
    308c:	e03c      	b.n	3108 <uarte_nrfx_configure+0xe0>
	switch (baudrate) {
    308e:	f5b3 4fe1 	cmp.w	r3, #28800	; 0x7080
    3092:	d056      	beq.n	3142 <uarte_nrfx_configure+0x11a>
    3094:	d807      	bhi.n	30a6 <uarte_nrfx_configure+0x7e>
    3096:	f5b3 5f61 	cmp.w	r3, #14400	; 0x3840
    309a:	d054      	beq.n	3146 <uarte_nrfx_configure+0x11e>
    309c:	f5b3 4f96 	cmp.w	r3, #19200	; 0x4b00
    30a0:	d1ea      	bne.n	3078 <uarte_nrfx_configure+0x50>
		nrf_baudrate = NRF_UARTE_BAUDRATE_19200;
    30a2:	4b32      	ldr	r3, [pc, #200]	; (316c <uarte_nrfx_configure+0x144>)
    30a4:	e030      	b.n	3108 <uarte_nrfx_configure+0xe0>
	switch (baudrate) {
    30a6:	f647 2612 	movw	r6, #31250	; 0x7a12
    30aa:	42b3      	cmp	r3, r6
    30ac:	d1e4      	bne.n	3078 <uarte_nrfx_configure+0x50>
		nrf_baudrate = NRF_UARTE_BAUDRATE_31250;
    30ae:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
    30b2:	e029      	b.n	3108 <uarte_nrfx_configure+0xe0>
	switch (baudrate) {
    30b4:	f5b3 3f61 	cmp.w	r3, #230400	; 0x38400
    30b8:	d047      	beq.n	314a <uarte_nrfx_configure+0x122>
    30ba:	d813      	bhi.n	30e4 <uarte_nrfx_configure+0xbc>
    30bc:	f5b3 3f96 	cmp.w	r3, #76800	; 0x12c00
    30c0:	d046      	beq.n	3150 <uarte_nrfx_configure+0x128>
    30c2:	d809      	bhi.n	30d8 <uarte_nrfx_configure+0xb0>
    30c4:	f64d 26c0 	movw	r6, #56000	; 0xdac0
    30c8:	42b3      	cmp	r3, r6
    30ca:	d043      	beq.n	3154 <uarte_nrfx_configure+0x12c>
    30cc:	f5b3 4f61 	cmp.w	r3, #57600	; 0xe100
    30d0:	d1d2      	bne.n	3078 <uarte_nrfx_configure+0x50>
		nrf_baudrate = NRF_UARTE_BAUDRATE_57600;
    30d2:	f44f 036b 	mov.w	r3, #15400960	; 0xeb0000
    30d6:	e017      	b.n	3108 <uarte_nrfx_configure+0xe0>
	switch (baudrate) {
    30d8:	f5b3 3fe1 	cmp.w	r3, #115200	; 0x1c200
    30dc:	d1cc      	bne.n	3078 <uarte_nrfx_configure+0x50>
		nrf_baudrate = NRF_UARTE_BAUDRATE_115200;
    30de:	f04f 73eb 	mov.w	r3, #30801920	; 0x1d60000
    30e2:	e011      	b.n	3108 <uarte_nrfx_configure+0xe0>
	switch (baudrate) {
    30e4:	f5b3 2f61 	cmp.w	r3, #921600	; 0xe1000
    30e8:	d037      	beq.n	315a <uarte_nrfx_configure+0x132>
    30ea:	d808      	bhi.n	30fe <uarte_nrfx_configure+0xd6>
    30ec:	4e20      	ldr	r6, [pc, #128]	; (3170 <uarte_nrfx_configure+0x148>)
    30ee:	42b3      	cmp	r3, r6
    30f0:	d036      	beq.n	3160 <uarte_nrfx_configure+0x138>
    30f2:	f5b3 2fe1 	cmp.w	r3, #460800	; 0x70800
    30f6:	d1bf      	bne.n	3078 <uarte_nrfx_configure+0x50>
		nrf_baudrate = NRF_UARTE_BAUDRATE_460800;
    30f8:	f04f 63e8 	mov.w	r3, #121634816	; 0x7400000
    30fc:	e004      	b.n	3108 <uarte_nrfx_configure+0xe0>
	switch (baudrate) {
    30fe:	4e1d      	ldr	r6, [pc, #116]	; (3174 <uarte_nrfx_configure+0x14c>)
    3100:	42b3      	cmp	r3, r6
    3102:	d1b9      	bne.n	3078 <uarte_nrfx_configure+0x50>
		nrf_baudrate = NRF_UARTE_BAUDRATE_1000000;
    3104:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
                    | (uint32_t)p_cfg->hwfc;
}

NRF_STATIC_INLINE void nrf_uarte_baudrate_set(NRF_UARTE_Type * p_reg, nrf_uarte_baudrate_t baudrate)
{
    p_reg->BAUDRATE = baudrate;
    3108:	f8c5 3524 	str.w	r3, [r5, #1316]	; 0x524
		return -ENOTSUP;
	}

	nrf_uarte_configure(get_uarte_instance(dev), &uarte_cfg);

	get_dev_data(dev)->uart_config = *cfg;
    310c:	68c3      	ldr	r3, [r0, #12]
    310e:	c903      	ldmia	r1, {r0, r1}
                    | (uint32_t)p_cfg->hwfc;
    3110:	4322      	orrs	r2, r4
    3112:	3304      	adds	r3, #4
    p_reg->CONFIG = (uint32_t)p_cfg->parity
    3114:	f8c5 256c 	str.w	r2, [r5, #1388]	; 0x56c
    3118:	e883 0003 	stmia.w	r3, {r0, r1}

	return 0;
    311c:	2000      	movs	r0, #0
}
    311e:	bd70      	pop	{r4, r5, r6, pc}
		nrf_baudrate = NRF_UARTE_BAUDRATE_38400;
    3120:	f44f 031d 	mov.w	r3, #10289152	; 0x9d0000
    3124:	e7f0      	b.n	3108 <uarte_nrfx_configure+0xe0>
		nrf_baudrate = NRF_UARTE_BAUDRATE_9600;
    3126:	4b14      	ldr	r3, [pc, #80]	; (3178 <uarte_nrfx_configure+0x150>)
    3128:	e7ee      	b.n	3108 <uarte_nrfx_configure+0xe0>
		nrf_baudrate = NRF_UARTE_BAUDRATE_1200;
    312a:	f44f 239e 	mov.w	r3, #323584	; 0x4f000
    312e:	e7eb      	b.n	3108 <uarte_nrfx_configure+0xe0>
		nrf_baudrate = 0x00014000;
    3130:	f44f 33a0 	mov.w	r3, #81920	; 0x14000
    3134:	e7e8      	b.n	3108 <uarte_nrfx_configure+0xe0>
	switch (baudrate) {
    3136:	f44f 331c 	mov.w	r3, #159744	; 0x27000
    313a:	e7e5      	b.n	3108 <uarte_nrfx_configure+0xe0>
		nrf_baudrate = NRF_UARTE_BAUDRATE_2400;
    313c:	f44f 231d 	mov.w	r3, #643072	; 0x9d000
    3140:	e7e2      	b.n	3108 <uarte_nrfx_configure+0xe0>
		nrf_baudrate = NRF_UARTE_BAUDRATE_28800;
    3142:	4b0e      	ldr	r3, [pc, #56]	; (317c <uarte_nrfx_configure+0x154>)
    3144:	e7e0      	b.n	3108 <uarte_nrfx_configure+0xe0>
		nrf_baudrate = NRF_UARTE_BAUDRATE_14400;
    3146:	4b0e      	ldr	r3, [pc, #56]	; (3180 <uarte_nrfx_configure+0x158>)
    3148:	e7de      	b.n	3108 <uarte_nrfx_configure+0xe0>
		nrf_baudrate = NRF_UARTE_BAUDRATE_230400;
    314a:	f04f 736c 	mov.w	r3, #61865984	; 0x3b00000
    314e:	e7db      	b.n	3108 <uarte_nrfx_configure+0xe0>
		nrf_baudrate = NRF_UARTE_BAUDRATE_76800;
    3150:	4b0c      	ldr	r3, [pc, #48]	; (3184 <uarte_nrfx_configure+0x15c>)
    3152:	e7d9      	b.n	3108 <uarte_nrfx_configure+0xe0>
		nrf_baudrate = NRF_UARTE_BAUDRATE_56000;
    3154:	f44f 0365 	mov.w	r3, #15007744	; 0xe50000
    3158:	e7d6      	b.n	3108 <uarte_nrfx_configure+0xe0>
		nrf_baudrate = NRF_UARTE_BAUDRATE_921600;
    315a:	f04f 6370 	mov.w	r3, #251658240	; 0xf000000
    315e:	e7d3      	b.n	3108 <uarte_nrfx_configure+0xe0>
		nrf_baudrate = NRF_UARTE_BAUDRATE_250000;
    3160:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
    3164:	e7d0      	b.n	3108 <uarte_nrfx_configure+0xe0>
    3166:	bf00      	nop
    3168:	0013b000 	.word	0x0013b000
    316c:	004ea000 	.word	0x004ea000
    3170:	0003d090 	.word	0x0003d090
    3174:	000f4240 	.word	0x000f4240
    3178:	00275000 	.word	0x00275000
    317c:	0075c000 	.word	0x0075c000
    3180:	003af000 	.word	0x003af000
    3184:	013a9000 	.word	0x013a9000

00003188 <uarte_nrfx_poll_out>:
 *
 * @param dev UARTE device struct
 * @param c Character to send
 */
static void uarte_nrfx_poll_out(const struct device *dev, unsigned char c)
{
    3188:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	struct uarte_nrfx_data *data = get_dev_data(dev);
    318c:	68c7      	ldr	r7, [r0, #12]
{
    318e:	4606      	mov	r6, r0
    3190:	4688      	mov	r8, r1
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
    3192:	f002 fdf1 	bl	5d78 <k_is_in_isr>
    3196:	b9b8      	cbnz	r0, 31c8 <uarte_nrfx_poll_out+0x40>
	return !z_sys_post_kernel;
    3198:	4b28      	ldr	r3, [pc, #160]	; (323c <uarte_nrfx_poll_out+0xb4>)
    319a:	781b      	ldrb	r3, [r3, #0]
    319c:	f083 0301 	eor.w	r3, r3, #1
	return config->uarte_regs;
    31a0:	6872      	ldr	r2, [r6, #4]
    31a2:	6815      	ldr	r5, [r2, #0]
#ifdef CONFIG_DEVICE_POWER_MANAGEMENT
	if (data->pm_state != DEVICE_PM_ACTIVE_STATE) {
		return;
	}
#endif
	if (isr_mode) {
    31a4:	b193      	cbz	r3, 31cc <uarte_nrfx_poll_out+0x44>
	__asm__ volatile(
    31a6:	f04f 0320 	mov.w	r3, #32
    31aa:	f3ef 8411 	mrs	r4, BASEPRI
    31ae:	f383 8811 	msr	BASEPRI, r3
    31b2:	f3bf 8f6f 	isb	sy
		while (1) {
			key = irq_lock();
			if (is_tx_ready(dev)) {
    31b6:	4630      	mov	r0, r6
    31b8:	f002 fc8d 	bl	5ad6 <is_tx_ready>
    31bc:	bb38      	cbnz	r0, 320e <uarte_nrfx_poll_out+0x86>
	__asm__ volatile(
    31be:	f384 8811 	msr	BASEPRI, r4
    31c2:	f3bf 8f6f 	isb	sy
		"cpsie i;"
		: : : "memory", "cc");
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
}
    31c6:	e7ee      	b.n	31a6 <uarte_nrfx_poll_out+0x1e>
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
    31c8:	2301      	movs	r3, #1
    31ca:	e7e9      	b.n	31a0 <uarte_nrfx_poll_out+0x18>
    31cc:	2464      	movs	r4, #100	; 0x64
	} else {
		do {
			/* wait arbitrary time before back off. */
			bool res;

			NRFX_WAIT_FOR(is_tx_ready(dev), 100, 1, res);
    31ce:	4630      	mov	r0, r6
    31d0:	f002 fc81 	bl	5ad6 <is_tx_ready>
    31d4:	b970      	cbnz	r0, 31f4 <uarte_nrfx_poll_out+0x6c>
    31d6:	2001      	movs	r0, #1
    31d8:	f002 fca0 	bl	5b1c <nrfx_busy_wait>
    31dc:	3c01      	subs	r4, #1
    31de:	d1f6      	bne.n	31ce <uarte_nrfx_poll_out+0x46>
	return z_impl_k_sleep(timeout);
    31e0:	2100      	movs	r1, #0
    31e2:	2021      	movs	r0, #33	; 0x21
    31e4:	f001 fa6a 	bl	46bc <z_impl_k_sleep>
	return k_sleep(Z_TIMEOUT_MS(ms));
    31e8:	e7f0      	b.n	31cc <uarte_nrfx_poll_out+0x44>
	__asm__ volatile(
    31ea:	f384 8811 	msr	BASEPRI, r4
    31ee:	f3bf 8f6f 	isb	sy
}
    31f2:	e7f5      	b.n	31e0 <uarte_nrfx_poll_out+0x58>
	__asm__ volatile(
    31f4:	f04f 0320 	mov.w	r3, #32
    31f8:	f3ef 8411 	mrs	r4, BASEPRI
    31fc:	f383 8811 	msr	BASEPRI, r3
    3200:	f3bf 8f6f 	isb	sy

			if (res) {
				key = irq_lock();
				if (is_tx_ready(dev)) {
    3204:	4630      	mov	r0, r6
    3206:	f002 fc66 	bl	5ad6 <is_tx_ready>
    320a:	2800      	cmp	r0, #0
    320c:	d0ed      	beq.n	31ea <uarte_nrfx_poll_out+0x62>
	}

	/* At this point we should have irq locked and any previous transfer
	 * completed. Transfer can be started, no need to wait for completion.
	 */
	data->char_out = c;
    320e:	f807 8f0c 	strb.w	r8, [r7, #12]!
NRF_STATIC_INLINE void nrf_uarte_tx_buffer_set(NRF_UARTE_Type * p_reg,
                                               uint8_t  const * p_buffer,
                                               size_t           length)
{
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
    p_reg->TXD.MAXCNT = length;
    3212:	2301      	movs	r3, #1
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    3214:	2200      	movs	r2, #0
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
    3216:	f8c5 7544 	str.w	r7, [r5, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
    321a:	f8c5 3548 	str.w	r3, [r5, #1352]	; 0x548
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    321e:	f8c5 2120 	str.w	r2, [r5, #288]	; 0x120
    3222:	f8d5 1120 	ldr.w	r1, [r5, #288]	; 0x120
    3226:	f8c5 2158 	str.w	r2, [r5, #344]	; 0x158
    322a:	f8d5 2158 	ldr.w	r2, [r5, #344]	; 0x158
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    322e:	60ab      	str	r3, [r5, #8]
	__asm__ volatile(
    3230:	f384 8811 	msr	BASEPRI, r4
    3234:	f3bf 8f6f 	isb	sy
	tx_start(uarte, &data->char_out, 1);

	irq_unlock(key);
}
    3238:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    323c:	200008b0 	.word	0x200008b0

00003240 <uarte_0_init>:
				.tx_buffer = uarte##idx##_tx_buffer,	       \
				.tx_buff_size = sizeof(uarte##idx##_tx_buffer),\
			};))

#ifdef CONFIG_UART_0_NRF_UARTE
UART_NRF_UARTE_DEVICE(0);
    3240:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    3242:	2200      	movs	r2, #0
    3244:	4605      	mov	r5, r0
    3246:	2101      	movs	r1, #1
    3248:	2002      	movs	r0, #2
    324a:	f7fe ff13 	bl	2074 <z_arm_irq_priority_set>
    324e:	2002      	movs	r0, #2
    3250:	f7fe fef2 	bl	2038 <arch_irq_enable>
	return config->uarte_regs;
    3254:	686b      	ldr	r3, [r5, #4]
	struct uarte_nrfx_data *data = get_dev_data(dev);
    3256:	68ee      	ldr	r6, [r5, #12]
	return config->uarte_regs;
    3258:	681c      	ldr	r4, [r3, #0]
    p_reg->OUTSET = set_mask;
    325a:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Disabled;
    325e:	2200      	movs	r2, #0
    3260:	2140      	movs	r1, #64	; 0x40
    3262:	f8c4 2500 	str.w	r2, [r4, #1280]	; 0x500
    p_reg->PSEL.TXD = pseltxd;
    3266:	2006      	movs	r0, #6
	data->dev = dev;
    3268:	6035      	str	r5, [r6, #0]
    326a:	f8c3 1508 	str.w	r1, [r3, #1288]	; 0x508
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
    326e:	2103      	movs	r1, #3
    3270:	f8c3 1718 	str.w	r1, [r3, #1816]	; 0x718
    3274:	f8c3 2720 	str.w	r2, [r3, #1824]	; 0x720
    3278:	f8c4 050c 	str.w	r0, [r4, #1292]	; 0x50c
    p_reg->PSEL.RXD = pselrxd;
    327c:	2008      	movs	r0, #8
    327e:	f8c4 0514 	str.w	r0, [r4, #1300]	; 0x514
    3282:	f8c3 271c 	str.w	r2, [r3, #1820]	; 0x71c
    p_reg->OUTSET = set_mask;
    3286:	2220      	movs	r2, #32
    3288:	f8c3 2508 	str.w	r2, [r3, #1288]	; 0x508
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
    328c:	f8c3 1714 	str.w	r1, [r3, #1812]	; 0x714
	err = uarte_nrfx_configure(dev, &get_dev_data(dev)->uart_config);
    3290:	68e9      	ldr	r1, [r5, #12]
    p_reg->PSEL.RTS = pselrts;
    3292:	2305      	movs	r3, #5
    3294:	f8c4 3508 	str.w	r3, [r4, #1288]	; 0x508
    p_reg->PSEL.CTS = pselcts;
    3298:	2307      	movs	r3, #7
    329a:	f8c4 3510 	str.w	r3, [r4, #1296]	; 0x510
    329e:	3104      	adds	r1, #4
    32a0:	4628      	mov	r0, r5
    32a2:	f7ff fec1 	bl	3028 <uarte_nrfx_configure>
	if (err) {
    32a6:	4607      	mov	r7, r0
    32a8:	b9a8      	cbnz	r0, 32d6 <uarte_0_init+0x96>
	if (get_dev_config(dev)->ppi_endtx) {
    32aa:	686b      	ldr	r3, [r5, #4]
    32ac:	799b      	ldrb	r3, [r3, #6]
    32ae:	b33b      	cbz	r3, 3300 <uarte_0_init+0xc0>
	ret = gppi_channel_alloc(&data->ppi_ch_endtx);
    32b0:	f106 000e 	add.w	r0, r6, #14
    32b4:	f000 fa8a 	bl	37cc <nrfx_ppi_channel_alloc>
	if (ret != NRFX_SUCCESS) {
    32b8:	4b22      	ldr	r3, [pc, #136]	; (3344 <uarte_0_init+0x104>)
    32ba:	4298      	cmp	r0, r3
    32bc:	d00d      	beq.n	32da <uarte_0_init+0x9a>
    32be:	4b22      	ldr	r3, [pc, #136]	; (3348 <uarte_0_init+0x108>)
    32c0:	4922      	ldr	r1, [pc, #136]	; (334c <uarte_0_init+0x10c>)
		LOG_ERR("Failed to allocate PPI Channel");
    32c2:	4823      	ldr	r0, [pc, #140]	; (3350 <uarte_0_init+0x110>)
    32c4:	1ac9      	subs	r1, r1, r3
    32c6:	08c9      	lsrs	r1, r1, #3
    32c8:	0189      	lsls	r1, r1, #6
    32ca:	f041 0101 	orr.w	r1, r1, #1
    32ce:	f001 ffaa 	bl	5226 <log_0>
		return -EIO;
    32d2:	f06f 0704 	mvn.w	r7, #4
UART_NRF_UARTE_DEVICE(0);
    32d6:	4638      	mov	r0, r7
    32d8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	nrfx_gppi_channel_endpoints_setup(data->ppi_ch_endtx,
    32da:	7bb0      	ldrb	r0, [r6, #14]
    return (uint32_t)((uint8_t *)p_reg + (uint32_t)event);
    32dc:	00c3      	lsls	r3, r0, #3
    32de:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    32e2:	f503 33f8 	add.w	r3, r3, #126976	; 0x1f000
    return (uint32_t)p_reg + (uint32_t)task;
    32e6:	f104 020c 	add.w	r2, r4, #12
    return (uint32_t)((uint8_t *)p_reg + (uint32_t)event);
    32ea:	f504 7190 	add.w	r1, r4, #288	; 0x120
NRF_STATIC_INLINE void nrf_ppi_channel_endpoint_setup(NRF_PPI_Type *    p_reg,
                                                      nrf_ppi_channel_t channel,
                                                      uint32_t          eep,
                                                      uint32_t          tep)
{
    p_reg->CH[(uint32_t) channel].EEP = eep;
    32ee:	f8c3 1510 	str.w	r1, [r3, #1296]	; 0x510
    p_reg->CH[(uint32_t) channel].TEP = tep;
    32f2:	f8c3 2514 	str.w	r2, [r3, #1300]	; 0x514
    p_reg->CHENSET = mask;
    32f6:	4a17      	ldr	r2, [pc, #92]	; (3354 <uarte_0_init+0x114>)
	nrfx_gppi_channels_enable(BIT(data->ppi_ch_endtx));
    32f8:	2301      	movs	r3, #1
    32fa:	4083      	lsls	r3, r0
    32fc:	f8c2 3504 	str.w	r3, [r2, #1284]	; 0x504
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Enabled;
    3300:	2308      	movs	r3, #8
    3302:	f8c4 3500 	str.w	r3, [r4, #1280]	; 0x500
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    3306:	2300      	movs	r3, #0
    3308:	f8c4 3110 	str.w	r3, [r4, #272]	; 0x110
    330c:	f8d4 3110 	ldr.w	r3, [r4, #272]	; 0x110
			nrf_uarte_rx_buffer_set(uarte, &data->rx_data, 1);
    3310:	f106 030d 	add.w	r3, r6, #13

NRF_STATIC_INLINE void nrf_uarte_rx_buffer_set(NRF_UARTE_Type * p_reg,
                                               uint8_t *        p_buffer,
                                               size_t           length)
{
    p_reg->RXD.PTR    = (uint32_t)p_buffer;
    3314:	f8c4 3534 	str.w	r3, [r4, #1332]	; 0x534
    p_reg->RXD.MAXCNT = length;
    3318:	2301      	movs	r3, #1
    331a:	f8c4 3538 	str.w	r3, [r4, #1336]	; 0x538
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    331e:	6023      	str	r3, [r4, #0]
	if (!get_dev_config(dev)->ppi_endtx) {
    3320:	686b      	ldr	r3, [r5, #4]
    3322:	799b      	ldrb	r3, [r3, #6]
    3324:	b91b      	cbnz	r3, 332e <uarte_0_init+0xee>
    p_reg->INTENSET = mask;
    3326:	f44f 7380 	mov.w	r3, #256	; 0x100
    332a:	f8c4 3304 	str.w	r3, [r4, #772]	; 0x304
    p_reg->TXD.MAXCNT = length;
    332e:	2300      	movs	r3, #0
	nrf_uarte_tx_buffer_set(uarte, &data->char_out, 0);
    3330:	360c      	adds	r6, #12
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
    3332:	f8c4 6544 	str.w	r6, [r4, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
    3336:	f8c4 3548 	str.w	r3, [r4, #1352]	; 0x548
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    333a:	2301      	movs	r3, #1
    333c:	60a3      	str	r3, [r4, #8]
    333e:	60e3      	str	r3, [r4, #12]
UART_NRF_UARTE_DEVICE(0);
    3340:	e7c9      	b.n	32d6 <uarte_0_init+0x96>
    3342:	bf00      	nop
    3344:	0bad0000 	.word	0x0bad0000
    3348:	0000602c 	.word	0x0000602c
    334c:	0000606c 	.word	0x0000606c
    3350:	000068f2 	.word	0x000068f2
    3354:	4001f000 	.word	0x4001f000

00003358 <k_sys_fatal_error_handler>:

extern void sys_arch_reboot(int type);

void k_sys_fatal_error_handler(unsigned int reason,
			       const z_arch_esf_t *esf)
{
    3358:	b508      	push	{r3, lr}
	z_impl_log_panic();
    335a:	f7fd ffb5 	bl	12c8 <z_impl_log_panic>
    335e:	4b06      	ldr	r3, [pc, #24]	; (3378 <k_sys_fatal_error_handler+0x20>)
    3360:	4906      	ldr	r1, [pc, #24]	; (337c <k_sys_fatal_error_handler+0x24>)
	ARG_UNUSED(esf);
	ARG_UNUSED(reason);

	LOG_PANIC();

	LOG_ERR("Resetting system");
    3362:	4807      	ldr	r0, [pc, #28]	; (3380 <k_sys_fatal_error_handler+0x28>)
    3364:	1ac9      	subs	r1, r1, r3
    3366:	08c9      	lsrs	r1, r1, #3
    3368:	0189      	lsls	r1, r1, #6
    336a:	f041 0101 	orr.w	r1, r1, #1
    336e:	f001 ff5a 	bl	5226 <log_0>
	sys_arch_reboot(0);
    3372:	2000      	movs	r0, #0
    3374:	f7ff fb48 	bl	2a08 <sys_arch_reboot>

	CODE_UNREACHABLE;
    3378:	0000602c 	.word	0x0000602c
    337c:	00006034 	.word	0x00006034
    3380:	00006921 	.word	0x00006921

00003384 <nrf52_errata_108>:
        #if defined (NRF52832_XXAA) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52832_XXAB) || defined (DEVELOP_IN_NRF52832)
            uint32_t var1;
            uint32_t var2;

            if (*(uint32_t *)0x10000130ul == 0xFFFFFFFF)
    3384:	4b04      	ldr	r3, [pc, #16]	; (3398 <nrf52_errata_108+0x14>)
    3386:	6818      	ldr	r0, [r3, #0]
    3388:	1c42      	adds	r2, r0, #1
            {
                var1 = ((*(uint32_t *)0xF0000FE0ul) & 0x000000FFul);
    338a:	bf04      	itt	eq
    338c:	4b03      	ldreq	r3, [pc, #12]	; (339c <nrf52_errata_108+0x18>)
    338e:	7818      	ldrbeq	r0, [r3, #0]
                }
            }
        #endif
        return false;
    #endif
}
    3390:	1f83      	subs	r3, r0, #6
    3392:	4258      	negs	r0, r3
    3394:	4158      	adcs	r0, r3
    3396:	4770      	bx	lr
    3398:	10000130 	.word	0x10000130
    339c:	f0000fe0 	.word	0xf0000fe0

000033a0 <nrf52_errata_16>:
    #ifndef NRF52_SERIES
        return false;
    #else
        #if defined (NRF52832_XXAA) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52832_XXAB) || defined (DEVELOP_IN_NRF52832)
            uint32_t var1 = ((*(uint32_t *)0xF0000FE0ul) & 0x000000FFul);
    33a0:	4b07      	ldr	r3, [pc, #28]	; (33c0 <nrf52_errata_16+0x20>)
    33a2:	781b      	ldrb	r3, [r3, #0]
            uint32_t var2 = ((*(uint32_t *)0xF0000FE8ul) & 0x000000F0ul) >> 4;
        #endif
        #if defined (NRF52832_XXAA) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52832_XXAB) || defined (DEVELOP_IN_NRF52832)
            if (var1 == 0x06)
    33a4:	2b06      	cmp	r3, #6
    33a6:	d109      	bne.n	33bc <nrf52_errata_16+0x1c>
            uint32_t var2 = ((*(uint32_t *)0xF0000FE8ul) & 0x000000F0ul) >> 4;
    33a8:	4b06      	ldr	r3, [pc, #24]	; (33c4 <nrf52_errata_16+0x24>)
    33aa:	681b      	ldr	r3, [r3, #0]
    33ac:	f3c3 1303 	ubfx	r3, r3, #4, #4
    33b0:	3b03      	subs	r3, #3
    33b2:	2b03      	cmp	r3, #3
    33b4:	d802      	bhi.n	33bc <nrf52_errata_16+0x1c>
    33b6:	4a04      	ldr	r2, [pc, #16]	; (33c8 <nrf52_errata_16+0x28>)
    33b8:	5cd0      	ldrb	r0, [r2, r3]
    33ba:	4770      	bx	lr
                    default:
                        return false;
                }
            }
        #endif
        return false;
    33bc:	2000      	movs	r0, #0
    #endif
}
    33be:	4770      	bx	lr
    33c0:	f0000fe0 	.word	0xf0000fe0
    33c4:	f0000fe8 	.word	0xf0000fe8
    33c8:	00006946 	.word	0x00006946

000033cc <nvmc_wait>:

/* -- NVMC utility functions -- */
/* Waits until NVMC is done with the current pending action */
void nvmc_wait(void)
{
    while (NRF_NVMC->READY == NVMC_READY_READY_Busy){}
    33cc:	4a02      	ldr	r2, [pc, #8]	; (33d8 <nvmc_wait+0xc>)
    33ce:	f8d2 3400 	ldr.w	r3, [r2, #1024]	; 0x400
    33d2:	2b00      	cmp	r3, #0
    33d4:	d0fb      	beq.n	33ce <nvmc_wait+0x2>
}
    33d6:	4770      	bx	lr
    33d8:	4001e000 	.word	0x4001e000

000033dc <SystemInit>:
{
    SystemCoreClock = __SYSTEM_CLOCK_64M;
}

void SystemInit(void)
{
    33dc:	b510      	push	{r4, lr}
    #endif

    #if NRF52_ERRATA_12_ENABLE_WORKAROUND
        /* Workaround for Errata 12 "COMP: Reference ladder not correctly calibrated" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp */
        if (nrf52_errata_12()){
    33de:	f7ff ffd1 	bl	3384 <nrf52_errata_108>
    33e2:	b128      	cbz	r0, 33f0 <SystemInit+0x14>
            *(volatile uint32_t *)0x40013540 = (*(uint32_t *)0x10000324 & 0x00001F00) >> 8;
    33e4:	4b77      	ldr	r3, [pc, #476]	; (35c4 <SystemInit+0x1e8>)
    33e6:	4a78      	ldr	r2, [pc, #480]	; (35c8 <SystemInit+0x1ec>)
    33e8:	681b      	ldr	r3, [r3, #0]
    33ea:	f3c3 2304 	ubfx	r3, r3, #8, #5
    33ee:	6013      	str	r3, [r2, #0]
    #endif

    #if NRF52_ERRATA_16_ENABLE_WORKAROUND
        /* Workaround for Errata 16 "System: RAM may be corrupt on wakeup from CPU IDLE" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp */
        if (nrf52_errata_16()){
    33f0:	f7ff ffd6 	bl	33a0 <nrf52_errata_16>
    33f4:	b110      	cbz	r0, 33fc <SystemInit+0x20>
            *(volatile uint32_t *)0x4007C074 = 3131961357ul;
    33f6:	4b75      	ldr	r3, [pc, #468]	; (35cc <SystemInit+0x1f0>)
    33f8:	4a75      	ldr	r2, [pc, #468]	; (35d0 <SystemInit+0x1f4>)
    33fa:	601a      	str	r2, [r3, #0]
    #endif

    #if NRF52_ERRATA_31_ENABLE_WORKAROUND
        /* Workaround for Errata 31 "CLOCK: Calibration values are not correctly loaded from FICR at reset" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp */
        if (nrf52_errata_31()){
    33fc:	f7ff ffc2 	bl	3384 <nrf52_errata_108>
    3400:	b128      	cbz	r0, 340e <SystemInit+0x32>
            *(volatile uint32_t *)0x4000053C = ((*(volatile uint32_t *)0x10000244) & 0x0000E000) >> 13;
    3402:	4b74      	ldr	r3, [pc, #464]	; (35d4 <SystemInit+0x1f8>)
    3404:	4a74      	ldr	r2, [pc, #464]	; (35d8 <SystemInit+0x1fc>)
    3406:	681b      	ldr	r3, [r3, #0]
    3408:	f3c3 3342 	ubfx	r3, r3, #13, #3
    340c:	6013      	str	r3, [r2, #0]
    #endif

    #if NRF52_ERRATA_32_ENABLE_WORKAROUND
        /* Workaround for Errata 32 "DIF: Debug session automatically enables TracePort pins" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp */
        if (nrf52_errata_32()){
    340e:	f7ff ffc7 	bl	33a0 <nrf52_errata_16>
    3412:	b120      	cbz	r0, 341e <SystemInit+0x42>
            CoreDebug->DEMCR &= ~CoreDebug_DEMCR_TRCENA_Msk;
    3414:	4a71      	ldr	r2, [pc, #452]	; (35dc <SystemInit+0x200>)
    3416:	68d3      	ldr	r3, [r2, #12]
    3418:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
    341c:	60d3      	str	r3, [r2, #12]
    #endif

    #if NRF52_ERRATA_36_ENABLE_WORKAROUND
        /* Workaround for Errata 36 "CLOCK: Some registers are not reset when expected" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_36()){
    341e:	f7ff ffb1 	bl	3384 <nrf52_errata_108>
    3422:	b140      	cbz	r0, 3436 <SystemInit+0x5a>
            NRF_CLOCK->EVENTS_DONE = 0;
    3424:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    3428:	2200      	movs	r2, #0
    342a:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
            NRF_CLOCK->EVENTS_CTTO = 0;
    342e:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
            NRF_CLOCK->CTIV = 0;
    3432:	f8c3 2538 	str.w	r2, [r3, #1336]	; 0x538
    #endif

    #if NRF52_ERRATA_37_ENABLE_WORKAROUND
        /* Workaround for Errata 37 "RADIO: Encryption engine is slow by default" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_37()){
    3436:	f7ff ffb3 	bl	33a0 <nrf52_errata_16>
    343a:	b110      	cbz	r0, 3442 <SystemInit+0x66>
            *(volatile uint32_t *)0x400005A0 = 0x3;
    343c:	4b68      	ldr	r3, [pc, #416]	; (35e0 <SystemInit+0x204>)
    343e:	2203      	movs	r2, #3
    3440:	601a      	str	r2, [r3, #0]
    #endif

    #if NRF52_ERRATA_57_ENABLE_WORKAROUND
        /* Workaround for Errata 57 "NFCT: NFC Modulation amplitude" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_57()){
    3442:	f7ff ffad 	bl	33a0 <nrf52_errata_16>
    3446:	b140      	cbz	r0, 345a <SystemInit+0x7e>
            *(volatile uint32_t *)0x40005610 = 0x00000005;
    3448:	4b66      	ldr	r3, [pc, #408]	; (35e4 <SystemInit+0x208>)
    344a:	2205      	movs	r2, #5
    344c:	601a      	str	r2, [r3, #0]
            *(volatile uint32_t *)0x40005688 = 0x00000001;
    344e:	2201      	movs	r2, #1
    3450:	679a      	str	r2, [r3, #120]	; 0x78
            *(volatile uint32_t *)0x40005618 = 0x00000000;
    3452:	2200      	movs	r2, #0
    3454:	609a      	str	r2, [r3, #8]
            *(volatile uint32_t *)0x40005614 = 0x0000003F;
    3456:	223f      	movs	r2, #63	; 0x3f
    3458:	605a      	str	r2, [r3, #4]
        #if defined (NRF52832_XXAA) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52832_XXAB) || defined (DEVELOP_IN_NRF52832)
            uint32_t var1;
            uint32_t var2;

            if (*(uint32_t *)0x10000130ul == 0xFFFFFFFF)
    345a:	4b63      	ldr	r3, [pc, #396]	; (35e8 <SystemInit+0x20c>)
    345c:	681a      	ldr	r2, [r3, #0]
    345e:	1c51      	adds	r1, r2, #1
            {
                var1 = ((*(uint32_t *)0xF0000FE0ul) & 0x000000FFul);
    3460:	bf0b      	itete	eq
    3462:	4b62      	ldreq	r3, [pc, #392]	; (35ec <SystemInit+0x210>)
                var2 = ((*(uint32_t *)0xF0000FE8ul) & 0x000000F0ul) >> 4;
            }
            else
            {
                var1 = *(uint32_t *)0x10000130ul;
                var2 = *(uint32_t *)0x10000134ul;
    3464:	4b62      	ldrne	r3, [pc, #392]	; (35f0 <SystemInit+0x214>)
                var1 = ((*(uint32_t *)0xF0000FE0ul) & 0x000000FFul);
    3466:	781a      	ldrbeq	r2, [r3, #0]
                var2 = *(uint32_t *)0x10000134ul;
    3468:	681b      	ldrne	r3, [r3, #0]
                var2 = ((*(uint32_t *)0xF0000FE8ul) & 0x000000F0ul) >> 4;
    346a:	bf02      	ittt	eq
    346c:	3308      	addeq	r3, #8
    346e:	681b      	ldreq	r3, [r3, #0]
    3470:	f3c3 1303 	ubfxeq	r3, r3, #4, #4
            uint32_t var1 = *(uint32_t *)0x10000130ul;
            uint32_t var2 = *(uint32_t *)0x10000134ul;
        #endif
        #if defined (NRF52832_XXAA) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52832_XXAB) || defined (DEVELOP_IN_NRF52832)
            if (var1 == 0x06)
    3474:	2a06      	cmp	r2, #6
    3476:	d14d      	bne.n	3514 <SystemInit+0x138>
            {
                switch(var2)
    3478:	3b03      	subs	r3, #3
    347a:	2b03      	cmp	r3, #3
    347c:	d803      	bhi.n	3486 <SystemInit+0xaa>
    #endif

    #if NRF52_ERRATA_66_ENABLE_WORKAROUND
        /* Workaround for Errata 66 "TEMP: Linearity specification not met with default settings" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_66()){
    347e:	4a5d      	ldr	r2, [pc, #372]	; (35f4 <SystemInit+0x218>)
    3480:	5cd3      	ldrb	r3, [r2, r3]
    3482:	2b00      	cmp	r3, #0
    3484:	d046      	beq.n	3514 <SystemInit+0x138>
            NRF_TEMP->A0 = NRF_FICR->TEMP.A0;
    3486:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    348a:	4b5b      	ldr	r3, [pc, #364]	; (35f8 <SystemInit+0x21c>)
    348c:	f8d2 1404 	ldr.w	r1, [r2, #1028]	; 0x404
    3490:	f8c3 1520 	str.w	r1, [r3, #1312]	; 0x520
            NRF_TEMP->A1 = NRF_FICR->TEMP.A1;
    3494:	f8d2 1408 	ldr.w	r1, [r2, #1032]	; 0x408
    3498:	f8c3 1524 	str.w	r1, [r3, #1316]	; 0x524
            NRF_TEMP->A2 = NRF_FICR->TEMP.A2;
    349c:	f8d2 140c 	ldr.w	r1, [r2, #1036]	; 0x40c
    34a0:	f8c3 1528 	str.w	r1, [r3, #1320]	; 0x528
            NRF_TEMP->A3 = NRF_FICR->TEMP.A3;
    34a4:	f8d2 1410 	ldr.w	r1, [r2, #1040]	; 0x410
    34a8:	f8c3 152c 	str.w	r1, [r3, #1324]	; 0x52c
            NRF_TEMP->A4 = NRF_FICR->TEMP.A4;
    34ac:	f8d2 1414 	ldr.w	r1, [r2, #1044]	; 0x414
    34b0:	f8c3 1530 	str.w	r1, [r3, #1328]	; 0x530
            NRF_TEMP->A5 = NRF_FICR->TEMP.A5;
    34b4:	f8d2 1418 	ldr.w	r1, [r2, #1048]	; 0x418
    34b8:	f8c3 1534 	str.w	r1, [r3, #1332]	; 0x534
            NRF_TEMP->B0 = NRF_FICR->TEMP.B0;
    34bc:	f8d2 141c 	ldr.w	r1, [r2, #1052]	; 0x41c
    34c0:	f8c3 1540 	str.w	r1, [r3, #1344]	; 0x540
            NRF_TEMP->B1 = NRF_FICR->TEMP.B1;
    34c4:	f8d2 1420 	ldr.w	r1, [r2, #1056]	; 0x420
    34c8:	f8c3 1544 	str.w	r1, [r3, #1348]	; 0x544
            NRF_TEMP->B2 = NRF_FICR->TEMP.B2;
    34cc:	f8d2 1424 	ldr.w	r1, [r2, #1060]	; 0x424
    34d0:	f8c3 1548 	str.w	r1, [r3, #1352]	; 0x548
            NRF_TEMP->B3 = NRF_FICR->TEMP.B3;
    34d4:	f8d2 1428 	ldr.w	r1, [r2, #1064]	; 0x428
    34d8:	f8c3 154c 	str.w	r1, [r3, #1356]	; 0x54c
            NRF_TEMP->B4 = NRF_FICR->TEMP.B4;
    34dc:	f8d2 142c 	ldr.w	r1, [r2, #1068]	; 0x42c
    34e0:	f8c3 1550 	str.w	r1, [r3, #1360]	; 0x550
            NRF_TEMP->B5 = NRF_FICR->TEMP.B5;
    34e4:	f8d2 1430 	ldr.w	r1, [r2, #1072]	; 0x430
    34e8:	f8c3 1554 	str.w	r1, [r3, #1364]	; 0x554
            NRF_TEMP->T0 = NRF_FICR->TEMP.T0;
    34ec:	f8d2 1434 	ldr.w	r1, [r2, #1076]	; 0x434
    34f0:	f8c3 1560 	str.w	r1, [r3, #1376]	; 0x560
            NRF_TEMP->T1 = NRF_FICR->TEMP.T1;
    34f4:	f8d2 1438 	ldr.w	r1, [r2, #1080]	; 0x438
    34f8:	f8c3 1564 	str.w	r1, [r3, #1380]	; 0x564
            NRF_TEMP->T2 = NRF_FICR->TEMP.T2;
    34fc:	f8d2 143c 	ldr.w	r1, [r2, #1084]	; 0x43c
    3500:	f8c3 1568 	str.w	r1, [r3, #1384]	; 0x568
            NRF_TEMP->T3 = NRF_FICR->TEMP.T3;
    3504:	f8d2 1440 	ldr.w	r1, [r2, #1088]	; 0x440
    3508:	f8c3 156c 	str.w	r1, [r3, #1388]	; 0x56c
            NRF_TEMP->T4 = NRF_FICR->TEMP.T4;
    350c:	f8d2 2444 	ldr.w	r2, [r2, #1092]	; 0x444
    3510:	f8c3 2570 	str.w	r2, [r3, #1392]	; 0x570
    #endif

    #if NRF52_ERRATA_108_ENABLE_WORKAROUND
        /* Workaround for Errata 108 "RAM: RAM content cannot be trusted upon waking up from System ON Idle or System OFF mode" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_108()){
    3514:	f7ff ff36 	bl	3384 <nrf52_errata_108>
    3518:	b128      	cbz	r0, 3526 <SystemInit+0x14a>
            *(volatile uint32_t *)0x40000EE4ul = *(volatile uint32_t *)0x10000258ul & 0x0000004Ful;
    351a:	4b38      	ldr	r3, [pc, #224]	; (35fc <SystemInit+0x220>)
    351c:	4a38      	ldr	r2, [pc, #224]	; (3600 <SystemInit+0x224>)
    351e:	681b      	ldr	r3, [r3, #0]
    3520:	f003 034f 	and.w	r3, r3, #79	; 0x4f
    3524:	6013      	str	r3, [r2, #0]
    #endif

    #if NRF52_ERRATA_136_ENABLE_WORKAROUND
        /* Workaround for Errata 136 "System: Bits in RESETREAS are set when they should not be" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_136()){
    3526:	f7ff ff2d 	bl	3384 <nrf52_errata_108>
    352a:	b148      	cbz	r0, 3540 <SystemInit+0x164>
            if (NRF_POWER->RESETREAS & POWER_RESETREAS_RESETPIN_Msk){
    352c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    3530:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
    3534:	07d2      	lsls	r2, r2, #31
                NRF_POWER->RESETREAS =  ~POWER_RESETREAS_RESETPIN_Msk;
    3536:	bf44      	itt	mi
    3538:	f06f 0201 	mvnmi.w	r2, #1
    353c:	f8c3 2400 	strmi.w	r2, [r3, #1024]	; 0x400
    #ifndef NRF52_SERIES
        return false;
    #else
        #if defined (NRF52832_XXAA) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52832_XXAB) || defined (DEVELOP_IN_NRF52832)
            uint32_t var1 = *(uint32_t *)0x10000130ul;
    3540:	4b29      	ldr	r3, [pc, #164]	; (35e8 <SystemInit+0x20c>)
            uint32_t var2 = *(uint32_t *)0x10000134ul;
        #endif
        #if defined (NRF52832_XXAA) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52832_XXAB) || defined (DEVELOP_IN_NRF52832)
            if (var1 == 0x06)
    3542:	681b      	ldr	r3, [r3, #0]
    3544:	2b06      	cmp	r3, #6
    3546:	d10c      	bne.n	3562 <SystemInit+0x186>
            uint32_t var2 = *(uint32_t *)0x10000134ul;
    3548:	4b29      	ldr	r3, [pc, #164]	; (35f0 <SystemInit+0x214>)
    354a:	681b      	ldr	r3, [r3, #0]
    354c:	3b03      	subs	r3, #3
    354e:	2b03      	cmp	r3, #3
    3550:	d802      	bhi.n	3558 <SystemInit+0x17c>
    #endif

    #if NRF52_ERRATA_182_ENABLE_WORKAROUND
        /* Workaround for Errata 182 "RADIO: Fixes for anomalies #102, #106, and #107 do not take effect" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_182()){
    3552:	4a2c      	ldr	r2, [pc, #176]	; (3604 <SystemInit+0x228>)
    3554:	5cd3      	ldrb	r3, [r2, r3]
    3556:	b123      	cbz	r3, 3562 <SystemInit+0x186>
            *(volatile uint32_t *) 0x4000173C |= (0x1 << 10);
    3558:	4a2b      	ldr	r2, [pc, #172]	; (3608 <SystemInit+0x22c>)
    355a:	6813      	ldr	r3, [r2, #0]
    355c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
    3560:	6013      	str	r3, [r2, #0]

    /* Configure GPIO pads as pPin Reset pin if Pin Reset capabilities desired. If CONFIG_GPIO_AS_PINRESET is not
      defined, pin reset will not be available. One GPIO (see Product Specification to see which one) will then be
      reserved for PinReset and not available as normal GPIO. */
    #if defined (CONFIG_GPIO_AS_PINRESET)
        if (((NRF_UICR->PSELRESET[0] & UICR_PSELRESET_CONNECT_Msk) != (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos)) ||
    3562:	f04f 2310 	mov.w	r3, #268439552	; 0x10001000
    3566:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
    356a:	2a00      	cmp	r2, #0
    356c:	db03      	blt.n	3576 <SystemInit+0x19a>
            ((NRF_UICR->PSELRESET[1] & UICR_PSELRESET_CONNECT_Msk) != (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos))){
    356e:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
        if (((NRF_UICR->PSELRESET[0] & UICR_PSELRESET_CONNECT_Msk) != (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos)) ||
    3572:	2b00      	cmp	r3, #0
    3574:	da22      	bge.n	35bc <SystemInit+0x1e0>
    NRF_NVMC->CONFIG = mode << NVMC_CONFIG_WEN_Pos;
    3576:	4925      	ldr	r1, [pc, #148]	; (360c <SystemInit+0x230>)
    3578:	2301      	movs	r3, #1
    357a:	f8c1 3504 	str.w	r3, [r1, #1284]	; 0x504
    nvmc_wait();
    357e:	f7ff ff25 	bl	33cc <nvmc_wait>
            nvmc_config(NVMC_CONFIG_WEN_Wen);
            NRF_UICR->PSELRESET[0] = RESET_PIN;
    3582:	f04f 2010 	mov.w	r0, #268439552	; 0x10001000
    3586:	2415      	movs	r4, #21
    3588:	f8c0 4200 	str.w	r4, [r0, #512]	; 0x200
            nvmc_wait();
    358c:	f7ff ff1e 	bl	33cc <nvmc_wait>
            NRF_UICR->PSELRESET[1] = RESET_PIN;
    3590:	f8c0 4204 	str.w	r4, [r0, #516]	; 0x204
            nvmc_wait();
    3594:	f7ff ff1a 	bl	33cc <nvmc_wait>
    NRF_NVMC->CONFIG = mode << NVMC_CONFIG_WEN_Pos;
    3598:	2300      	movs	r3, #0
    359a:	f8c1 3504 	str.w	r3, [r1, #1284]	; 0x504
    nvmc_wait();
    359e:	f7ff ff15 	bl	33cc <nvmc_wait>
    35a2:	f3bf 8f4f 	dsb	sy
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
    35a6:	491a      	ldr	r1, [pc, #104]	; (3610 <SystemInit+0x234>)
    35a8:	4b1a      	ldr	r3, [pc, #104]	; (3614 <SystemInit+0x238>)
    35aa:	68ca      	ldr	r2, [r1, #12]
    35ac:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
    35b0:	4313      	orrs	r3, r2
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
    35b2:	60cb      	str	r3, [r1, #12]
    35b4:	f3bf 8f4f 	dsb	sy
    __NOP();
    35b8:	bf00      	nop
  for(;;)                                                           /* wait until reset */
    35ba:	e7fd      	b.n	35b8 <SystemInit+0x1dc>
    SystemCoreClock = __SYSTEM_CLOCK_64M;
    35bc:	4b16      	ldr	r3, [pc, #88]	; (3618 <SystemInit+0x23c>)
    35be:	4a17      	ldr	r2, [pc, #92]	; (361c <SystemInit+0x240>)
    35c0:	601a      	str	r2, [r3, #0]
            NVIC_SystemReset();
        }
    #endif

    SystemCoreClockUpdate();
}
    35c2:	bd10      	pop	{r4, pc}
    35c4:	10000324 	.word	0x10000324
    35c8:	40013540 	.word	0x40013540
    35cc:	4007c074 	.word	0x4007c074
    35d0:	baadf00d 	.word	0xbaadf00d
    35d4:	10000244 	.word	0x10000244
    35d8:	4000053c 	.word	0x4000053c
    35dc:	e000edf0 	.word	0xe000edf0
    35e0:	400005a0 	.word	0x400005a0
    35e4:	40005610 	.word	0x40005610
    35e8:	10000130 	.word	0x10000130
    35ec:	f0000fe0 	.word	0xf0000fe0
    35f0:	10000134 	.word	0x10000134
    35f4:	0000693e 	.word	0x0000693e
    35f8:	4000c000 	.word	0x4000c000
    35fc:	10000258 	.word	0x10000258
    3600:	40000ee4 	.word	0x40000ee4
    3604:	00006942 	.word	0x00006942
    3608:	4000173c 	.word	0x4000173c
    360c:	4001e000 	.word	0x4001e000
    3610:	e000ed00 	.word	0xe000ed00
    3614:	05fa0004 	.word	0x05fa0004
    3618:	2000002c 	.word	0x2000002c
    361c:	03d09000 	.word	0x03d09000

00003620 <nrfx_clock_init>:
nrfx_err_t nrfx_clock_init(nrfx_clock_event_handler_t event_handler)
{
    NRFX_ASSERT(event_handler);

    nrfx_err_t err_code = NRFX_SUCCESS;
    if (m_clock_cb.module_initialized)
    3620:	4b04      	ldr	r3, [pc, #16]	; (3634 <nrfx_clock_init+0x14>)
    3622:	791a      	ldrb	r2, [r3, #4]
    3624:	b922      	cbnz	r2, 3630 <nrfx_clock_init+0x10>
    {
#if NRFX_CHECK(NRFX_CLOCK_CONFIG_LF_CAL_ENABLED)
        m_clock_cb.cal_state = CAL_STATE_IDLE;
#endif
        m_clock_cb.event_handler = event_handler;
        m_clock_cb.module_initialized = true;
    3626:	2201      	movs	r2, #1
        m_clock_cb.event_handler = event_handler;
    3628:	6018      	str	r0, [r3, #0]
        m_clock_cb.module_initialized = true;
    362a:	809a      	strh	r2, [r3, #4]
    nrfx_err_t err_code = NRFX_SUCCESS;
    362c:	4802      	ldr	r0, [pc, #8]	; (3638 <nrfx_clock_init+0x18>)
    362e:	4770      	bx	lr
        err_code = NRFX_ERROR_ALREADY_INITIALIZED;
    3630:	4802      	ldr	r0, [pc, #8]	; (363c <nrfx_clock_init+0x1c>)
#endif
    }

    NRFX_LOG_INFO("Function: %s, error code: %s.", __func__, NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
}
    3632:	4770      	bx	lr
    3634:	2000042c 	.word	0x2000042c
    3638:	0bad0000 	.word	0x0bad0000
    363c:	0bad000c 	.word	0x0bad000c

00003640 <nrfx_clock_start>:
    m_clock_cb.module_initialized = false;
    NRFX_LOG_INFO("Uninitialized.");
}

void nrfx_clock_start(nrf_clock_domain_t domain)
{
    3640:	b530      	push	{r4, r5, lr}
    NRFX_ASSERT(m_clock_cb.module_initialized);
    switch (domain)
    3642:	b110      	cbz	r0, 364a <nrfx_clock_start+0xa>
    3644:	2801      	cmp	r0, #1
    3646:	d033      	beq.n	36b0 <nrfx_clock_start+0x70>
#endif
        default:
            NRFX_ASSERT(0);
            break;
    }
}
    3648:	bd30      	pop	{r4, r5, pc}
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
    364a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    364e:	f8d3 2418 	ldr.w	r2, [r3, #1048]	; 0x418
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
    3652:	f8d3 1418 	ldr.w	r1, [r3, #1048]	; 0x418
    3656:	f411 3f80 	tst.w	r1, #65536	; 0x10000
    365a:	4619      	mov	r1, r3
    365c:	d024      	beq.n	36a8 <nrfx_clock_start+0x68>
                                        >> CLOCK_LFCLKSTAT_SRC_Pos);
    365e:	f002 0203 	and.w	r2, r2, #3
                if (nrf_clock_is_running(NRF_CLOCK, NRF_CLOCK_DOMAIN_LFCLK, &lfclksrc) &&
    3662:	2a01      	cmp	r2, #1
    3664:	d120      	bne.n	36a8 <nrfx_clock_start+0x68>
    p_reg->LFCLKSRC = (uint32_t)(source);
    3666:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    366a:	4b16      	ldr	r3, [pc, #88]	; (36c4 <nrfx_clock_start+0x84>)
    366c:	2200      	movs	r2, #0
    366e:	601a      	str	r2, [r3, #0]
    3670:	681b      	ldr	r3, [r3, #0]
    p_reg->INTENSET = mask;
    3672:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    3676:	2202      	movs	r2, #2
    3678:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    core_debug = CoreDebug->DEMCR;
    367c:	4a12      	ldr	r2, [pc, #72]	; (36c8 <nrfx_clock_start+0x88>)
    367e:	68d0      	ldr	r0, [r2, #12]
    CoreDebug->DEMCR = core_debug | CoreDebug_DEMCR_TRCENA_Msk;
    3680:	f040 7380 	orr.w	r3, r0, #16777216	; 0x1000000
    3684:	60d3      	str	r3, [r2, #12]
    dwt_ctrl = DWT->CTRL;
    3686:	4b11      	ldr	r3, [pc, #68]	; (36cc <nrfx_clock_start+0x8c>)
    3688:	681c      	ldr	r4, [r3, #0]
    DWT->CTRL = dwt_ctrl | DWT_CTRL_CYCCNTENA_Msk;
    368a:	f044 0101 	orr.w	r1, r4, #1
    368e:	6019      	str	r1, [r3, #0]
    cyccnt_inital = DWT->CYCCNT;
    3690:	685d      	ldr	r5, [r3, #4]
    while ((DWT->CYCCNT - cyccnt_inital) < ANOMALY_132_DELAY_CYCLES)
    3692:	6859      	ldr	r1, [r3, #4]
    3694:	1b49      	subs	r1, r1, r5
    3696:	f5b1 5f0a 	cmp.w	r1, #8832	; 0x2280
    369a:	d3fa      	bcc.n	3692 <nrfx_clock_start+0x52>
    DWT->CTRL = dwt_ctrl;
    369c:	601c      	str	r4, [r3, #0]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    369e:	4b0c      	ldr	r3, [pc, #48]	; (36d0 <nrfx_clock_start+0x90>)
    CoreDebug->DEMCR = core_debug;
    36a0:	60d0      	str	r0, [r2, #12]
    36a2:	2201      	movs	r2, #1
    36a4:	601a      	str	r2, [r3, #0]
}
    36a6:	e7cf      	b.n	3648 <nrfx_clock_start+0x8>
    p_reg->LFCLKSRC = (uint32_t)(source);
    36a8:	2300      	movs	r3, #0
    36aa:	f8c1 3518 	str.w	r3, [r1, #1304]	; 0x518
}
    36ae:	e7dc      	b.n	366a <nrfx_clock_start+0x2a>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    36b0:	4b08      	ldr	r3, [pc, #32]	; (36d4 <nrfx_clock_start+0x94>)
    36b2:	2200      	movs	r2, #0
    36b4:	601a      	str	r2, [r3, #0]
    36b6:	681b      	ldr	r3, [r3, #0]
    p_reg->INTENSET = mask;
    36b8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    36bc:	f8c3 0304 	str.w	r0, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    36c0:	6018      	str	r0, [r3, #0]
}
    36c2:	e7c1      	b.n	3648 <nrfx_clock_start+0x8>
    36c4:	40000104 	.word	0x40000104
    36c8:	e000edf0 	.word	0xe000edf0
    36cc:	e0001000 	.word	0xe0001000
    36d0:	40000008 	.word	0x40000008
    36d4:	40000100 	.word	0x40000100

000036d8 <nrfx_clock_stop>:

void nrfx_clock_stop(nrf_clock_domain_t domain)
{
    36d8:	b538      	push	{r3, r4, r5, lr}
    NRFX_ASSERT(m_clock_cb.module_initialized);
    switch (domain)
    36da:	b110      	cbz	r0, 36e2 <nrfx_clock_stop+0xa>
    36dc:	2801      	cmp	r0, #1
    36de:	d018      	beq.n	3712 <nrfx_clock_stop+0x3a>
    if (domain == NRF_CLOCK_DOMAIN_HFCLK)
    {
            m_clock_cb.hfclk_started = false;
    }
#endif
}
    36e0:	bd38      	pop	{r3, r4, r5, pc}
    p_reg->INTENCLR = mask;
    36e2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    36e6:	2202      	movs	r2, #2
    36e8:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    36ec:	4a18      	ldr	r2, [pc, #96]	; (3750 <nrfx_clock_stop+0x78>)
    36ee:	6010      	str	r0, [r2, #0]
    36f0:	6812      	ldr	r2, [r2, #0]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    36f2:	4a18      	ldr	r2, [pc, #96]	; (3754 <nrfx_clock_stop+0x7c>)
    36f4:	2101      	movs	r1, #1
    36f6:	6011      	str	r1, [r2, #0]
    36f8:	f242 7510 	movw	r5, #10000	; 0x2710
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
    36fc:	461c      	mov	r4, r3
    36fe:	f8d4 3418 	ldr.w	r3, [r4, #1048]	; 0x418
    3702:	03db      	lsls	r3, r3, #15
    3704:	d5ec      	bpl.n	36e0 <nrfx_clock_stop+0x8>
        NRFX_WAIT_FOR(!nrfx_clock_is_running(domain, NULL), 10000, 1, stopped);
    3706:	2001      	movs	r0, #1
    3708:	f002 fa08 	bl	5b1c <nrfx_busy_wait>
    370c:	3d01      	subs	r5, #1
    370e:	d1f6      	bne.n	36fe <nrfx_clock_stop+0x26>
    3710:	e7e6      	b.n	36e0 <nrfx_clock_stop+0x8>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    3712:	4b11      	ldr	r3, [pc, #68]	; (3758 <nrfx_clock_stop+0x80>)
    p_reg->INTENCLR = mask;
    3714:	f04f 4480 	mov.w	r4, #1073741824	; 0x40000000
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    3718:	2200      	movs	r2, #0
    p_reg->INTENCLR = mask;
    371a:	f8c4 0308 	str.w	r0, [r4, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    371e:	601a      	str	r2, [r3, #0]
    3720:	681b      	ldr	r3, [r3, #0]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    3722:	4b0e      	ldr	r3, [pc, #56]	; (375c <nrfx_clock_stop+0x84>)
    3724:	f242 7510 	movw	r5, #10000	; 0x2710
    3728:	6018      	str	r0, [r3, #0]
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
    372a:	f8d4 340c 	ldr.w	r3, [r4, #1036]	; 0x40c
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
    372e:	f8d4 240c 	ldr.w	r2, [r4, #1036]	; 0x40c
    3732:	03d2      	lsls	r2, r2, #15
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
    3734:	f003 0301 	and.w	r3, r3, #1
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
    3738:	d505      	bpl.n	3746 <nrfx_clock_stop+0x6e>
        NRFX_WAIT_FOR((!nrfx_clock_is_running(domain, &clk_src) ||
    373a:	b123      	cbz	r3, 3746 <nrfx_clock_stop+0x6e>
    373c:	2001      	movs	r0, #1
    373e:	f002 f9ed 	bl	5b1c <nrfx_busy_wait>
    3742:	3d01      	subs	r5, #1
    3744:	d1f1      	bne.n	372a <nrfx_clock_stop+0x52>
            m_clock_cb.hfclk_started = false;
    3746:	4b06      	ldr	r3, [pc, #24]	; (3760 <nrfx_clock_stop+0x88>)
    3748:	2200      	movs	r2, #0
    374a:	715a      	strb	r2, [r3, #5]
    374c:	e7c8      	b.n	36e0 <nrfx_clock_stop+0x8>
    374e:	bf00      	nop
    3750:	40000104 	.word	0x40000104
    3754:	4000000c 	.word	0x4000000c
    3758:	40000100 	.word	0x40000100
    375c:	40000004 	.word	0x40000004
    3760:	2000042c 	.word	0x2000042c

00003764 <nrfx_power_clock_irq_handler>:
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
    3764:	4b16      	ldr	r3, [pc, #88]	; (37c0 <nrfx_power_clock_irq_handler+0x5c>)
    3766:	681a      	ldr	r2, [r3, #0]
    }
}
#endif

void nrfx_clock_irq_handler(void)
{
    3768:	b510      	push	{r4, lr}
    if (nrf_clock_event_check(NRF_CLOCK, NRF_CLOCK_EVENT_HFCLKSTARTED))
    376a:	b16a      	cbz	r2, 3788 <nrfx_power_clock_irq_handler+0x24>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    376c:	2200      	movs	r2, #0
    376e:	601a      	str	r2, [r3, #0]
    3770:	681b      	ldr	r3, [r3, #0]
    p_reg->INTENCLR = mask;
    3772:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    3776:	2201      	movs	r2, #1
    3778:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
        nrf_clock_event_clear(NRF_CLOCK, NRF_CLOCK_EVENT_HFCLKSTARTED);
        NRFX_LOG_DEBUG("Event: NRF_CLOCK_EVENT_HFCLKSTARTED");
        nrf_clock_int_disable(NRF_CLOCK, NRF_CLOCK_INT_HF_STARTED_MASK);

#if NRFX_CHECK(USE_WORKAROUND_FOR_ANOMALY_201)
        if (!m_clock_cb.hfclk_started)
    377c:	4b11      	ldr	r3, [pc, #68]	; (37c4 <nrfx_power_clock_irq_handler+0x60>)
    377e:	7958      	ldrb	r0, [r3, #5]
    3780:	b910      	cbnz	r0, 3788 <nrfx_power_clock_irq_handler+0x24>
        {
            m_clock_cb.hfclk_started = true;
    3782:	715a      	strb	r2, [r3, #5]
            m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK_STARTED);
    3784:	681b      	ldr	r3, [r3, #0]
    3786:	4798      	blx	r3
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
    3788:	4b0f      	ldr	r3, [pc, #60]	; (37c8 <nrfx_power_clock_irq_handler+0x64>)
    378a:	681a      	ldr	r2, [r3, #0]
        }
#else
        m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK_STARTED);
#endif
    }
    if (nrf_clock_event_check(NRF_CLOCK, NRF_CLOCK_EVENT_LFCLKSTARTED))
    378c:	b172      	cbz	r2, 37ac <nrfx_power_clock_irq_handler+0x48>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    378e:	2200      	movs	r2, #0
    3790:	601a      	str	r2, [r3, #0]
    3792:	681b      	ldr	r3, [r3, #0]
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
    3794:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    3798:	f8d3 2418 	ldr.w	r2, [r3, #1048]	; 0x418
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
    379c:	f8d3 1418 	ldr.w	r1, [r3, #1048]	; 0x418
        NRFX_LOG_DEBUG("Event: NRF_CLOCK_EVENT_LFCLKSTARTED");

#if NRFX_CHECK(NRFX_CLOCK_CONFIG_LFXO_TWO_STAGE_ENABLED)
        nrf_clock_lfclk_t lfclksrc;
        (void)nrf_clock_is_running(NRF_CLOCK, NRF_CLOCK_DOMAIN_LFCLK, &lfclksrc);
        if (lfclksrc == NRF_CLOCK_LFCLK_RC)
    37a0:	0792      	lsls	r2, r2, #30
    37a2:	d104      	bne.n	37ae <nrfx_power_clock_irq_handler+0x4a>
    p_reg->LFCLKSRC = (uint32_t)(source);
    37a4:	2201      	movs	r2, #1
    37a6:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    37aa:	609a      	str	r2, [r3, #8]
        nrf_clock_int_disable(NRF_CLOCK, NRF_CLOCK_INT_HF192M_STARTED_MASK);

        m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK192M_STARTED);
    }
#endif
}
    37ac:	bd10      	pop	{r4, pc}
    p_reg->INTENCLR = mask;
    37ae:	2202      	movs	r2, #2
    37b0:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
            m_clock_cb.event_handler(NRFX_CLOCK_EVT_LFCLK_STARTED);
    37b4:	4b03      	ldr	r3, [pc, #12]	; (37c4 <nrfx_power_clock_irq_handler+0x60>)
}
    37b6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            m_clock_cb.event_handler(NRFX_CLOCK_EVT_LFCLK_STARTED);
    37ba:	681b      	ldr	r3, [r3, #0]
    37bc:	2001      	movs	r0, #1
    37be:	4718      	bx	r3
    37c0:	40000100 	.word	0x40000100
    37c4:	2000042c 	.word	0x2000042c
    37c8:	40000104 	.word	0x40000104

000037cc <nrfx_ppi_channel_alloc>:
    group_allocated_clr_all();
}


nrfx_err_t nrfx_ppi_channel_alloc(nrf_ppi_channel_t * p_channel)
{
    37cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    nrfx_err_t err_code = NRFX_ERROR_NO_MEM;
    uint32_t mask = NRFX_PPI_PROG_APP_CHANNELS_MASK;
    37d0:	4a14      	ldr	r2, [pc, #80]	; (3824 <nrfx_ppi_channel_alloc+0x58>)
    return ((m_channels_allocated & nrfx_ppi_channel_to_mask(channel)) != 0);
    37d2:	4e15      	ldr	r6, [pc, #84]	; (3828 <nrfx_ppi_channel_alloc+0x5c>)
        NRFX_CRITICAL_SECTION_ENTER();
        if ((mask & nrfx_ppi_channel_to_mask(channel)) && (!is_allocated_channel(channel)))
        {
            channel_allocated_set(channel);
            *p_channel = channel;
            err_code   = NRFX_SUCCESS;
    37d4:	4f15      	ldr	r7, [pc, #84]	; (382c <nrfx_ppi_channel_alloc+0x60>)
{
    37d6:	4605      	mov	r5, r0
    nrfx_err_t err_code = NRFX_ERROR_NO_MEM;
    37d8:	4815      	ldr	r0, [pc, #84]	; (3830 <nrfx_ppi_channel_alloc+0x64>)
{
    37da:	2400      	movs	r4, #0
NRFX_STATIC_INLINE uint32_t nrfx_ppi_task_addr_group_disable_get(nrf_ppi_channel_group_t group);

#ifndef NRFX_DECLARE_ONLY
NRFX_STATIC_INLINE uint32_t nrfx_ppi_channel_to_mask(nrf_ppi_channel_t channel)
{
    return (1uL << (uint32_t) channel);
    37dc:	f04f 0e01 	mov.w	lr, #1
    37e0:	fa5f fc84 	uxtb.w	ip, r4
	__asm__ volatile(
    37e4:	f04f 0320 	mov.w	r3, #32
    37e8:	f3ef 8811 	mrs	r8, BASEPRI
    37ec:	f383 8811 	msr	BASEPRI, r3
    37f0:	f3bf 8f6f 	isb	sy
    37f4:	fa0e f30c 	lsl.w	r3, lr, ip
        if ((mask & nrfx_ppi_channel_to_mask(channel)) && (!is_allocated_channel(channel)))
    37f8:	4213      	tst	r3, r2
    37fa:	d007      	beq.n	380c <nrfx_ppi_channel_alloc+0x40>
    return ((m_channels_allocated & nrfx_ppi_channel_to_mask(channel)) != 0);
    37fc:	6831      	ldr	r1, [r6, #0]
        if ((mask & nrfx_ppi_channel_to_mask(channel)) && (!is_allocated_channel(channel)))
    37fe:	420b      	tst	r3, r1
    m_channels_allocated |= nrfx_ppi_channel_to_mask(channel);
    3800:	bf01      	itttt	eq
    3802:	4319      	orreq	r1, r3
    3804:	6031      	streq	r1, [r6, #0]
            *p_channel = channel;
    3806:	f885 c000 	strbeq.w	ip, [r5]
            err_code   = NRFX_SUCCESS;
    380a:	4638      	moveq	r0, r7
	__asm__ volatile(
    380c:	f388 8811 	msr	BASEPRI, r8
    3810:	f3bf 8f6f 	isb	sy
        }
        NRFX_CRITICAL_SECTION_EXIT();
        if (err_code == NRFX_SUCCESS)
    3814:	42b8      	cmp	r0, r7
    3816:	d003      	beq.n	3820 <nrfx_ppi_channel_alloc+0x54>
    for (uint8_t ch_idx = NRF_PPI_CHANNEL0; mask != 0; ch_idx++)
    3818:	439a      	bics	r2, r3
    381a:	f104 0401 	add.w	r4, r4, #1
    381e:	d1df      	bne.n	37e0 <nrfx_ppi_channel_alloc+0x14>
        mask &= ~nrfx_ppi_channel_to_mask(channel);
    }

    NRFX_LOG_INFO("Function: %s, error code: %s.", __func__, NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
}
    3820:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    3824:	000fffff 	.word	0x000fffff
    3828:	20000434 	.word	0x20000434
    382c:	0bad0000 	.word	0x0bad0000
    3830:	0bad0002 	.word	0x0bad0002

00003834 <nrfx_pwm_init>:

nrfx_err_t nrfx_pwm_init(nrfx_pwm_t const *        p_instance,
                         nrfx_pwm_config_t const * p_config,
                         nrfx_pwm_handler_t        handler,
                         void *                    p_context)
{
    3834:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    NRFX_ASSERT(p_config);

    nrfx_err_t err_code;

    pwm_control_block_t * p_cb  = &m_cb[p_instance->drv_inst_idx];
    3838:	7905      	ldrb	r5, [r0, #4]

    if (p_cb->state != NRFX_DRV_STATE_UNINITIALIZED)
    383a:	4c3b      	ldr	r4, [pc, #236]	; (3928 <nrfx_pwm_init+0xf4>)
    383c:	260c      	movs	r6, #12
    383e:	436e      	muls	r6, r5
    3840:	19a7      	adds	r7, r4, r6
{
    3842:	b085      	sub	sp, #20
    if (p_cb->state != NRFX_DRV_STATE_UNINITIALIZED)
    3844:	f897 c008 	ldrb.w	ip, [r7, #8]
    3848:	f1bc 0f00 	cmp.w	ip, #0
    384c:	d16a      	bne.n	3924 <nrfx_pwm_init+0xf0>
                         __func__,
                         NRFX_LOG_ERROR_STRING_GET(err_code));
        return err_code;
    }

    p_cb->handler = handler;
    384e:	51a2      	str	r2, [r4, r6]
    p_cb->p_context = p_context;
    3850:	607b      	str	r3, [r7, #4]
    for (i = 0; i < NRF_PWM_CHANNEL_COUNT; ++i)
    3852:	f101 3cff 	add.w	ip, r1, #4294967295	; 0xffffffff
    3856:	466b      	mov	r3, sp
    3858:	f101 0903 	add.w	r9, r1, #3
    385c:	f04f 0a01 	mov.w	sl, #1
    3860:	f04f 4ea0 	mov.w	lr, #1342177280	; 0x50000000
    3864:	f04f 0b03 	mov.w	fp, #3
        uint8_t output_pin = p_config->output_pins[i];
    3868:	f81c 7f01 	ldrb.w	r7, [ip, #1]!
        if (output_pin != NRFX_PWM_PIN_NOT_USED)
    386c:	2fff      	cmp	r7, #255	; 0xff
    386e:	d055      	beq.n	391c <nrfx_pwm_init+0xe8>
            out_pins[i]   = output_pin & ~NRFX_PWM_PIN_INVERTED;
    3870:	f027 0680 	bic.w	r6, r7, #128	; 0x80
    3874:	601e      	str	r6, [r3, #0]
            if (!p_config->skip_gpio_cfg)
    3876:	7b0e      	ldrb	r6, [r1, #12]
    3878:	b96e      	cbnz	r6, 3896 <nrfx_pwm_init+0x62>
                if (inverted)
    387a:	f007 061f 	and.w	r6, r7, #31
    387e:	fa0a f806 	lsl.w	r8, sl, r6
    3882:	f506 76e0 	add.w	r6, r6, #448	; 0x1c0
    3886:	063f      	lsls	r7, r7, #24
    p_reg->OUTSET = set_mask;
    3888:	bf4c      	ite	mi
    388a:	f8ce 8508 	strmi.w	r8, [lr, #1288]	; 0x508
    p_reg->OUTCLR = clr_mask;
    388e:	f8ce 850c 	strpl.w	r8, [lr, #1292]	; 0x50c
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
    3892:	f84e b026 	str.w	fp, [lr, r6, lsl #2]
    for (i = 0; i < NRF_PWM_CHANNEL_COUNT; ++i)
    3896:	45cc      	cmp	ip, r9
    3898:	f103 0304 	add.w	r3, r3, #4
    389c:	d1e4      	bne.n	3868 <nrfx_pwm_init+0x34>
    nrf_pwm_pins_set(p_instance->p_registers, out_pins);
    389e:	6800      	ldr	r0, [r0, #0]
        p_reg->PSEL.OUT[i] = out_pins[i];
    38a0:	9b00      	ldr	r3, [sp, #0]
    38a2:	f8c0 3560 	str.w	r3, [r0, #1376]	; 0x560
    38a6:	9b01      	ldr	r3, [sp, #4]
    38a8:	f8c0 3564 	str.w	r3, [r0, #1380]	; 0x564
    38ac:	9b02      	ldr	r3, [sp, #8]
    38ae:	f8c0 3568 	str.w	r3, [r0, #1384]	; 0x568
    38b2:	9b03      	ldr	r3, [sp, #12]
    38b4:	f8c0 356c 	str.w	r3, [r0, #1388]	; 0x56c
    p_reg->ENABLE = (PWM_ENABLE_ENABLE_Enabled << PWM_ENABLE_ENABLE_Pos);
    38b8:	2301      	movs	r3, #1
    38ba:	f8c0 3500 	str.w	r3, [r0, #1280]	; 0x500

    configure_pins(p_instance, p_config);

    nrf_pwm_enable(p_instance->p_registers);
    nrf_pwm_configure(p_instance->p_registers,
    38be:	798e      	ldrb	r6, [r1, #6]
    38c0:	890b      	ldrh	r3, [r1, #8]
    p_reg->PRESCALER  = base_clock;
    38c2:	794f      	ldrb	r7, [r1, #5]
    38c4:	f8c0 750c 	str.w	r7, [r0, #1292]	; 0x50c
    p_reg->MODE       = mode;
    38c8:	f8c0 6504 	str.w	r6, [r0, #1284]	; 0x504
    p_reg->COUNTERTOP = top_value;
    38cc:	f8c0 3508 	str.w	r3, [r0, #1288]	; 0x508

NRF_STATIC_INLINE void nrf_pwm_decoder_set(NRF_PWM_Type *     p_reg,
                                           nrf_pwm_dec_load_t dec_load,
                                           nrf_pwm_dec_step_t dec_step)
{
    p_reg->DECODER = ((uint32_t)dec_load << PWM_DECODER_LOAD_Pos) |
    38d0:	894b      	ldrh	r3, [r1, #10]
    38d2:	f8c0 3510 	str.w	r3, [r0, #1296]	; 0x510
    p_reg->SHORTS = mask;
    38d6:	2300      	movs	r3, #0
    38d8:	f8c0 3200 	str.w	r3, [r0, #512]	; 0x200
    p_reg->INTEN = mask;
    38dc:	f8c0 3300 	str.w	r3, [r0, #768]	; 0x300
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    38e0:	f8c0 311c 	str.w	r3, [r0, #284]	; 0x11c
    38e4:	f8d0 111c 	ldr.w	r1, [r0, #284]	; 0x11c
    38e8:	f8c0 3110 	str.w	r3, [r0, #272]	; 0x110
    38ec:	f8d0 1110 	ldr.w	r1, [r0, #272]	; 0x110
    38f0:	f8c0 3114 	str.w	r3, [r0, #276]	; 0x114
    38f4:	f8d0 1114 	ldr.w	r1, [r0, #276]	; 0x114
    38f8:	f8c0 3104 	str.w	r3, [r0, #260]	; 0x104
    38fc:	f8d0 3104 	ldr.w	r3, [r0, #260]	; 0x104
    // handler is not used.
#if defined(USE_DMA_ISSUE_WORKAROUND)
    NRFX_IRQ_PRIORITY_SET(DMA_ISSUE_EGU_IRQn, p_config->irq_priority);
    NRFX_IRQ_ENABLE(DMA_ISSUE_EGU_IRQn);
#else
    if (p_cb->handler)
    3900:	b11a      	cbz	r2, 390a <nrfx_pwm_init+0xd6>
#endif
    {
        NRFX_IRQ_PRIORITY_SET(nrfx_get_irq_number(p_instance->p_registers),
            p_config->irq_priority);
        NRFX_IRQ_ENABLE(nrfx_get_irq_number(p_instance->p_registers));
    3902:	f340 3007 	sbfx	r0, r0, #12, #8
    3906:	f7fe fb97 	bl	2038 <arch_irq_enable>
    }

    p_cb->state = NRFX_DRV_STATE_INITIALIZED;
    390a:	230c      	movs	r3, #12
    390c:	fb03 4405 	mla	r4, r3, r5, r4

    err_code = NRFX_SUCCESS;
    NRFX_LOG_INFO("Function: %s, error code: %s.", __func__, NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
    3910:	4806      	ldr	r0, [pc, #24]	; (392c <nrfx_pwm_init+0xf8>)
    p_cb->state = NRFX_DRV_STATE_INITIALIZED;
    3912:	2301      	movs	r3, #1
    3914:	7223      	strb	r3, [r4, #8]
}
    3916:	b005      	add	sp, #20
    3918:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            out_pins[i] = NRF_PWM_PIN_NOT_CONNECTED;
    391c:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
    3920:	601e      	str	r6, [r3, #0]
    3922:	e7b8      	b.n	3896 <nrfx_pwm_init+0x62>
        return err_code;
    3924:	4802      	ldr	r0, [pc, #8]	; (3930 <nrfx_pwm_init+0xfc>)
    3926:	e7f6      	b.n	3916 <nrfx_pwm_init+0xe2>
    3928:	20000438 	.word	0x20000438
    392c:	0bad0000 	.word	0x0bad0000
    3930:	0bad0005 	.word	0x0bad0005

00003934 <nrfx_pwm_simple_playback>:

uint32_t nrfx_pwm_simple_playback(nrfx_pwm_t const *         p_instance,
                                  nrf_pwm_sequence_t const * p_sequence,
                                  uint16_t                   playback_count,
                                  uint32_t                   flags)
{
    3934:	b4f0      	push	{r4, r5, r6, r7}
    3936:	460d      	mov	r5, r1
    pwm_control_block_t * p_cb  = &m_cb[p_instance->drv_inst_idx];
    3938:	7901      	ldrb	r1, [r0, #4]
    NRFX_ASSERT(playback_count > 0);
    NRFX_ASSERT(nrfx_is_in_ram(p_sequence->values.p_raw));

    // To take advantage of the looping mechanism, we need to use both sequences
    // (single sequence can be played back only once).
    nrf_pwm_sequence_set(p_instance->p_registers, 0, p_sequence);
    393a:	6800      	ldr	r0, [r0, #0]
    p_reg->SEQ[seq_id].PTR = (uint32_t)p_values;
    393c:	f8d5 c000 	ldr.w	ip, [r5]
    p_reg->SEQ[seq_id].CNT = length;
    3940:	88af      	ldrh	r7, [r5, #4]
    nrf_pwm_seq_refresh_set(  p_reg, seq_id, p_seq->repeats);
    3942:	68ae      	ldr	r6, [r5, #8]
    p_reg->SEQ[seq_id].PTR = (uint32_t)p_values;
    3944:	f8c0 c520 	str.w	ip, [r0, #1312]	; 0x520
{
    3948:	461c      	mov	r4, r3
    pwm_control_block_t * p_cb  = &m_cb[p_instance->drv_inst_idx];
    394a:	4b18      	ldr	r3, [pc, #96]	; (39ac <nrfx_pwm_simple_playback+0x78>)
    p_reg->SEQ[seq_id].CNT = length;
    394c:	f8c0 7524 	str.w	r7, [r0, #1316]	; 0x524
    3950:	eb01 0141 	add.w	r1, r1, r1, lsl #1
    3954:	eb03 0181 	add.w	r1, r3, r1, lsl #2
    nrf_pwm_seq_end_delay_set(p_reg, seq_id, p_seq->end_delay);
    3958:	68eb      	ldr	r3, [r5, #12]
    p_reg->SEQ[seq_id].REFRESH  = refresh;
    395a:	f8c0 6528 	str.w	r6, [r0, #1320]	; 0x528
    p_reg->SEQ[seq_id].ENDDELAY = end_delay;
    395e:	f8c0 352c 	str.w	r3, [r0, #1324]	; 0x52c
    p_reg->SEQ[seq_id].PTR = (uint32_t)p_values;
    3962:	f8c0 c540 	str.w	ip, [r0, #1344]	; 0x540
    p_reg->SEQ[seq_id].CNT = length;
    3966:	f8c0 7544 	str.w	r7, [r0, #1348]	; 0x544
    p_reg->SEQ[seq_id].REFRESH  = refresh;
    396a:	f8c0 6548 	str.w	r6, [r0, #1352]	; 0x548
    p_reg->SEQ[seq_id].ENDDELAY = end_delay;
    396e:	f8c0 354c 	str.w	r3, [r0, #1356]	; 0x54c
    nrf_pwm_sequence_set(p_instance->p_registers, 1, p_sequence);
    bool odd = (playback_count & 1);
    3972:	f002 0301 	and.w	r3, r2, #1
}

NRF_STATIC_INLINE void nrf_pwm_loop_set(NRF_PWM_Type * p_reg,
                                        uint16_t       loop_count)
{
    p_reg->LOOP = loop_count;
    3976:	eb03 0252 	add.w	r2, r3, r2, lsr #1
    397a:	f8c0 2514 	str.w	r2, [r0, #1300]	; 0x514
    nrf_pwm_loop_set(p_instance->p_registers,
        (playback_count / 2) + (odd ? 1 : 0));

    uint32_t shorts_mask;
    if (flags & NRFX_PWM_FLAG_STOP)
    397e:	07e2      	lsls	r2, r4, #31
    3980:	d411      	bmi.n	39a6 <nrfx_pwm_simple_playback+0x72>
    {
        shorts_mask = NRF_PWM_SHORT_LOOPSDONE_STOP_MASK;
    }
    else if (flags & NRFX_PWM_FLAG_LOOP)
    3982:	f014 0202 	ands.w	r2, r4, #2
    3986:	d003      	beq.n	3990 <nrfx_pwm_simple_playback+0x5c>
    {
        shorts_mask = odd ? NRF_PWM_SHORT_LOOPSDONE_SEQSTART1_MASK
                          : NRF_PWM_SHORT_LOOPSDONE_SEQSTART0_MASK;
    3988:	2b00      	cmp	r3, #0
    398a:	bf14      	ite	ne
    398c:	2208      	movne	r2, #8
    398e:	2204      	moveq	r2, #4
                  __func__,
                  p_sequence->length);
    NRFX_LOG_DEBUG("Sequence data:");
    NRFX_LOG_HEXDUMP_DEBUG((uint8_t *)p_sequence->values.p_raw,
                           p_sequence->length * sizeof(uint16_t));
    return start_playback(p_instance, p_cb, flags,
    3990:	2b00      	cmp	r3, #0
    p_reg->SHORTS = mask;
    3992:	f8c0 2200 	str.w	r2, [r0, #512]	; 0x200
    3996:	bf18      	it	ne
    3998:	230c      	movne	r3, #12
    399a:	b2e2      	uxtb	r2, r4
    399c:	bf08      	it	eq
    399e:	2308      	moveq	r3, #8
        odd ? NRF_PWM_TASK_SEQSTART1 : NRF_PWM_TASK_SEQSTART0);
}
    39a0:	bcf0      	pop	{r4, r5, r6, r7}
    return start_playback(p_instance, p_cb, flags,
    39a2:	f002 b8c7 	b.w	5b34 <start_playback.isra.0>
        shorts_mask = NRF_PWM_SHORT_LOOPSDONE_STOP_MASK;
    39a6:	2210      	movs	r2, #16
    39a8:	e7f2      	b.n	3990 <nrfx_pwm_simple_playback+0x5c>
    39aa:	bf00      	nop
    39ac:	20000438 	.word	0x20000438

000039b0 <nrfx_pwm_is_stopped>:

    bool ret_val = false;

    // If the event handler is used (interrupts are enabled), the state will
    // be changed in interrupt handler when the STOPPED event occurs.
    if (p_cb->state != NRFX_DRV_STATE_POWERED_ON)
    39b0:	4b08      	ldr	r3, [pc, #32]	; (39d4 <nrfx_pwm_is_stopped+0x24>)
    pwm_control_block_t * p_cb  = &m_cb[p_instance->drv_inst_idx];
    39b2:	7902      	ldrb	r2, [r0, #4]
    if (p_cb->state != NRFX_DRV_STATE_POWERED_ON)
    39b4:	210c      	movs	r1, #12
    39b6:	fb01 3202 	mla	r2, r1, r2, r3
    {
        ret_val = true;
    }
    // If interrupts are disabled, we must check the STOPPED event here.
    if (nrf_pwm_event_check(p_instance->p_registers, NRF_PWM_EVENT_STOPPED))
    39ba:	6801      	ldr	r1, [r0, #0]
    if (p_cb->state != NRFX_DRV_STATE_POWERED_ON)
    39bc:	7a13      	ldrb	r3, [r2, #8]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    39be:	f8d1 1104 	ldr.w	r1, [r1, #260]	; 0x104
    39c2:	b2db      	uxtb	r3, r3
    if (nrf_pwm_event_check(p_instance->p_registers, NRF_PWM_EVENT_STOPPED))
    39c4:	b919      	cbnz	r1, 39ce <nrfx_pwm_is_stopped+0x1e>
    if (p_cb->state != NRFX_DRV_STATE_POWERED_ON)
    39c6:	1e98      	subs	r0, r3, #2
    39c8:	bf18      	it	ne
    39ca:	2001      	movne	r0, #1
    39cc:	4770      	bx	lr
    {
        p_cb->state = NRFX_DRV_STATE_INITIALIZED;
    39ce:	2001      	movs	r0, #1
    39d0:	7210      	strb	r0, [r2, #8]
        ret_val = true;
    }

    NRFX_LOG_INFO("%s returned %d.", __func__, ret_val);
    return ret_val;
}
    39d2:	4770      	bx	lr
    39d4:	20000438 	.word	0x20000438

000039d8 <z_sys_init_run_level>:
 * off and the next one begins.
 *
 * @param level init level to run.
 */
void z_sys_init_run_level(int32_t level)
{
    39d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
		/* End marker */
		__init_end,
	};
	const struct init_entry *entry;

	for (entry = levels[level]; entry < levels[level+1]; entry++) {
    39da:	4b10      	ldr	r3, [pc, #64]	; (3a1c <z_sys_init_run_level+0x44>)
			/* Initialization failed.
			 * Set the init status bit so device is not declared ready.
			 */
			sys_bitfield_set_bit(
				(mem_addr_t) __device_init_status_start,
				(dev - __device_start));
    39dc:	4f10      	ldr	r7, [pc, #64]	; (3a20 <z_sys_init_run_level+0x48>)
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
    39de:	f853 5020 	ldr.w	r5, [r3, r0, lsl #2]
    39e2:	3001      	adds	r0, #1
    39e4:	f853 6020 	ldr.w	r6, [r3, r0, lsl #2]
    39e8:	42ae      	cmp	r6, r5
    39ea:	d800      	bhi.n	39ee <z_sys_init_run_level+0x16>
		}
	}
}
    39ec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if ((entry->init(dev) != 0) && (dev != NULL)) {
    39ee:	e9d5 3400 	ldrd	r3, r4, [r5]
    39f2:	4620      	mov	r0, r4
    39f4:	4798      	blx	r3
    39f6:	b170      	cbz	r0, 3a16 <z_sys_init_run_level+0x3e>
    39f8:	b16c      	cbz	r4, 3a16 <z_sys_init_run_level+0x3e>
				(dev - __device_start));
    39fa:	1be4      	subs	r4, r4, r7
    39fc:	1124      	asrs	r4, r4, #4
	void sys_bitfield_set_bit(mem_addr_t addr, unsigned int bit)
{
	/* Doing memory offsets in terms of 32-bit values to prevent
	 * alignment issues
	 */
	sys_set_bit(addr + ((bit >> 5) << 2), bit & 0x1F);
    39fe:	0961      	lsrs	r1, r4, #5
    3a00:	4a08      	ldr	r2, [pc, #32]	; (3a24 <z_sys_init_run_level+0x4c>)
    3a02:	f004 041f 	and.w	r4, r4, #31
	uint32_t temp = *(volatile uint32_t *)addr;
    3a06:	f852 0021 	ldr.w	r0, [r2, r1, lsl #2]
	*(volatile uint32_t *)addr = temp | (1 << bit);
    3a0a:	2301      	movs	r3, #1
    3a0c:	fa03 f404 	lsl.w	r4, r3, r4
    3a10:	4304      	orrs	r4, r0
    3a12:	f842 4021 	str.w	r4, [r2, r1, lsl #2]
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
    3a16:	3508      	adds	r5, #8
    3a18:	e7e6      	b.n	39e8 <z_sys_init_run_level+0x10>
    3a1a:	bf00      	nop
    3a1c:	000061f4 	.word	0x000061f4
    3a20:	20000038 	.word	0x20000038
    3a24:	20000088 	.word	0x20000088

00003a28 <z_device_ready>:

bool z_device_ready(const struct device *dev)
{
	/* Set bit indicates device failed initialization */
	return !(sys_bitfield_test_bit((mem_addr_t)__device_init_status_start,
					(dev - __device_start)));
    3a28:	4b08      	ldr	r3, [pc, #32]	; (3a4c <z_device_ready+0x24>)
    3a2a:	1ac0      	subs	r0, r0, r3
    3a2c:	1100      	asrs	r0, r0, #4
}

static ALWAYS_INLINE
	int sys_bitfield_test_bit(mem_addr_t addr, unsigned int bit)
{
	return sys_test_bit(addr + ((bit >> 5) << 2), bit & 0x1F);
    3a2e:	4b08      	ldr	r3, [pc, #32]	; (3a50 <z_device_ready+0x28>)
    3a30:	0942      	lsrs	r2, r0, #5
    3a32:	f000 001f 	and.w	r0, r0, #31
	uint32_t temp = *(volatile uint32_t *)addr;
    3a36:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
	return temp & (1 << bit);
    3a3a:	2301      	movs	r3, #1
    3a3c:	fa03 f000 	lsl.w	r0, r3, r0
	return !(sys_bitfield_test_bit((mem_addr_t)__device_init_status_start,
    3a40:	4210      	tst	r0, r2
}
    3a42:	bf0c      	ite	eq
    3a44:	4618      	moveq	r0, r3
    3a46:	2000      	movne	r0, #0
    3a48:	4770      	bx	lr
    3a4a:	bf00      	nop
    3a4c:	20000038 	.word	0x20000038
    3a50:	20000088 	.word	0x20000088

00003a54 <z_impl_device_get_binding>:
	for (dev = __device_start; dev != __device_end; dev++) {
    3a54:	4911      	ldr	r1, [pc, #68]	; (3a9c <z_impl_device_get_binding+0x48>)
{
    3a56:	b570      	push	{r4, r5, r6, lr}
	for (dev = __device_start; dev != __device_end; dev++) {
    3a58:	4c11      	ldr	r4, [pc, #68]	; (3aa0 <z_impl_device_get_binding+0x4c>)
{
    3a5a:	4605      	mov	r5, r0
    3a5c:	460e      	mov	r6, r1
	for (dev = __device_start; dev != __device_end; dev++) {
    3a5e:	428c      	cmp	r4, r1
    3a60:	d104      	bne.n	3a6c <z_impl_device_get_binding+0x18>
	for (dev = __device_start; dev != __device_end; dev++) {
    3a62:	4c0f      	ldr	r4, [pc, #60]	; (3aa0 <z_impl_device_get_binding+0x4c>)
    3a64:	42b4      	cmp	r4, r6
    3a66:	d10a      	bne.n	3a7e <z_impl_device_get_binding+0x2a>
	return NULL;
    3a68:	2400      	movs	r4, #0
    3a6a:	e014      	b.n	3a96 <z_impl_device_get_binding+0x42>
		if (z_device_ready(dev) && (dev->name == name)) {
    3a6c:	4620      	mov	r0, r4
    3a6e:	f7ff ffdb 	bl	3a28 <z_device_ready>
    3a72:	b110      	cbz	r0, 3a7a <z_impl_device_get_binding+0x26>
    3a74:	6823      	ldr	r3, [r4, #0]
    3a76:	42ab      	cmp	r3, r5
    3a78:	d00d      	beq.n	3a96 <z_impl_device_get_binding+0x42>
	for (dev = __device_start; dev != __device_end; dev++) {
    3a7a:	3410      	adds	r4, #16
    3a7c:	e7ef      	b.n	3a5e <z_impl_device_get_binding+0xa>
		if (z_device_ready(dev) && (strcmp(name, dev->name) == 0)) {
    3a7e:	4620      	mov	r0, r4
    3a80:	f7ff ffd2 	bl	3a28 <z_device_ready>
    3a84:	b908      	cbnz	r0, 3a8a <z_impl_device_get_binding+0x36>
	for (dev = __device_start; dev != __device_end; dev++) {
    3a86:	3410      	adds	r4, #16
    3a88:	e7ec      	b.n	3a64 <z_impl_device_get_binding+0x10>
		if (z_device_ready(dev) && (strcmp(name, dev->name) == 0)) {
    3a8a:	6821      	ldr	r1, [r4, #0]
    3a8c:	4628      	mov	r0, r5
    3a8e:	f001 ff1f 	bl	58d0 <strcmp>
    3a92:	2800      	cmp	r0, #0
    3a94:	d1f7      	bne.n	3a86 <z_impl_device_get_binding+0x32>
}
    3a96:	4620      	mov	r0, r4
    3a98:	bd70      	pop	{r4, r5, r6, pc}
    3a9a:	bf00      	nop
    3a9c:	20000088 	.word	0x20000088
    3aa0:	20000038 	.word	0x20000038

00003aa4 <z_fatal_error>:
	return 0;
#endif
}

void z_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
    3aa4:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    3aa8:	4606      	mov	r6, r0
    3aaa:	460f      	mov	r7, r1
	__asm__ volatile(
    3aac:	f04f 0320 	mov.w	r3, #32
    3ab0:	f3ef 8811 	mrs	r8, BASEPRI
    3ab4:	f383 8811 	msr	BASEPRI, r3
    3ab8:	f3bf 8f6f 	isb	sy
	return z_impl_k_current_get();
    3abc:	f000 fe1e 	bl	46fc <z_impl_k_current_get>
    3ac0:	4c1f      	ldr	r4, [pc, #124]	; (3b40 <z_fatal_error+0x9c>)
    3ac2:	4b20      	ldr	r3, [pc, #128]	; (3b44 <z_fatal_error+0xa0>)
    3ac4:	1ae4      	subs	r4, r4, r3
    3ac6:	2e04      	cmp	r6, #4
    3ac8:	ea4f 04d4 	mov.w	r4, r4, lsr #3
    3acc:	bf96      	itet	ls
    3ace:	4a1e      	ldrls	r2, [pc, #120]	; (3b48 <z_fatal_error+0xa4>)
	struct k_thread *thread = k_current_get();

	/* sanitycheck looks for the "ZEPHYR FATAL ERROR" string, don't
	 * change it without also updating sanitycheck
	 */
	LOG_ERR(">>> ZEPHYR FATAL ERROR %d: %s on CPU %d", reason,
    3ad0:	4a1e      	ldrhi	r2, [pc, #120]	; (3b4c <z_fatal_error+0xa8>)
    3ad2:	f852 2026 	ldrls.w	r2, [r2, r6, lsl #2]
    3ad6:	01a4      	lsls	r4, r4, #6
    3ad8:	f044 0301 	orr.w	r3, r4, #1
    3adc:	4605      	mov	r5, r0
    3ade:	f8ad 3000 	strh.w	r3, [sp]
    3ae2:	481b      	ldr	r0, [pc, #108]	; (3b50 <z_fatal_error+0xac>)
    3ae4:	2300      	movs	r3, #0
    3ae6:	4631      	mov	r1, r6
    3ae8:	f001 fbd7 	bl	529a <log_3>
	 * an IRQ or exception was being handled, or thread context.
	 *
	 * See #17656
	 */
#if defined(CONFIG_ARCH_HAS_NESTED_EXCEPTION_DETECTION)
	if ((esf != NULL) && arch_is_in_nested_exception(esf)) {
    3aec:	b147      	cbz	r7, 3b00 <z_fatal_error+0x5c>
 * @return true if execution state was in handler mode, before
 *              the current exception occurred, otherwise false.
 */
static ALWAYS_INLINE bool arch_is_in_nested_exception(const z_arch_esf_t *esf)
{
	return (esf->basic.xpsr & IPSR_ISR_Msk) ? (true) : (false);
    3aee:	69fb      	ldr	r3, [r7, #28]
    3af0:	f3c3 0308 	ubfx	r3, r3, #0, #9
    3af4:	b123      	cbz	r3, 3b00 <z_fatal_error+0x5c>
		LOG_ERR("Fault during interrupt handling\n");
    3af6:	4817      	ldr	r0, [pc, #92]	; (3b54 <z_fatal_error+0xb0>)
    3af8:	f044 0101 	orr.w	r1, r4, #1
    3afc:	f001 fb93 	bl	5226 <log_0>
	}
#endif

	LOG_ERR("Current thread: %p (%s)", thread,
    3b00:	f044 0401 	orr.w	r4, r4, #1
	const char *thread_name = thread ? k_thread_name_get(thread) : NULL;
    3b04:	b12d      	cbz	r5, 3b12 <z_fatal_error+0x6e>
    3b06:	4628      	mov	r0, r5
    3b08:	f002 f943 	bl	5d92 <k_thread_name_get>
	if (thread_name == NULL || thread_name[0] == '\0') {
    3b0c:	b108      	cbz	r0, 3b12 <z_fatal_error+0x6e>
    3b0e:	7803      	ldrb	r3, [r0, #0]
    3b10:	b903      	cbnz	r3, 3b14 <z_fatal_error+0x70>
		thread_name = "unknown";
    3b12:	4811      	ldr	r0, [pc, #68]	; (3b58 <z_fatal_error+0xb4>)
	LOG_ERR("Current thread: %p (%s)", thread,
    3b14:	f7fd fa56 	bl	fc4 <log_strdup>
    3b18:	4623      	mov	r3, r4
    3b1a:	4602      	mov	r2, r0
    3b1c:	4629      	mov	r1, r5
    3b1e:	480f      	ldr	r0, [pc, #60]	; (3b5c <z_fatal_error+0xb8>)
    3b20:	f001 fba2 	bl	5268 <log_2>
		log_strdup(thread_name_get(thread)));

	z_coredump(reason, esf, thread);

	k_sys_fatal_error_handler(reason, esf);
    3b24:	4639      	mov	r1, r7
    3b26:	4630      	mov	r0, r6
    3b28:	f7ff fc16 	bl	3358 <k_sys_fatal_error_handler>
	__asm__ volatile(
    3b2c:	f388 8811 	msr	BASEPRI, r8
    3b30:	f3bf 8f6f 	isb	sy
	z_impl_k_thread_abort(thread);
    3b34:	4628      	mov	r0, r5
#endif /*CONFIG_ARCH_HAS_NESTED_EXCEPTION_DETECTION */
	}

	arch_irq_unlock(key);
	k_thread_abort(thread);
}
    3b36:	b002      	add	sp, #8
    3b38:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    3b3c:	f7fe be32 	b.w	27a4 <z_impl_k_thread_abort>
    3b40:	0000604c 	.word	0x0000604c
    3b44:	0000602c 	.word	0x0000602c
    3b48:	0000620c 	.word	0x0000620c
    3b4c:	0000694a 	.word	0x0000694a
    3b50:	00006960 	.word	0x00006960
    3b54:	00006988 	.word	0x00006988
    3b58:	00006958 	.word	0x00006958
    3b5c:	000069a9 	.word	0x000069a9

00003b60 <idle>:
#else
#define IDLE_YIELD_IF_COOP() do { } while (false)
#endif

void idle(void *p1, void *unused2, void *unused3)
{
    3b60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	_kernel.idle = ticks;
    3b62:	4e1c      	ldr	r6, [pc, #112]	; (3bd4 <idle+0x74>)
{
    3b64:	4605      	mov	r5, r0
		 */
		int key = arch_irq_lock();
		struct k_thread *to_abort = cpu->pending_abort;

		if (to_abort) {
			cpu->pending_abort = NULL;
    3b66:	2700      	movs	r7, #0
	__asm__ volatile(
    3b68:	f04f 0220 	mov.w	r2, #32
    3b6c:	f3ef 8311 	mrs	r3, BASEPRI
    3b70:	f382 8811 	msr	BASEPRI, r2
    3b74:	f3bf 8f6f 	isb	sy
		struct k_thread *to_abort = cpu->pending_abort;
    3b78:	6928      	ldr	r0, [r5, #16]
		if (to_abort) {
    3b7a:	b188      	cbz	r0, 3ba0 <idle+0x40>
			cpu->pending_abort = NULL;
    3b7c:	612f      	str	r7, [r5, #16]
	__asm__ volatile(
    3b7e:	f383 8811 	msr	BASEPRI, r3
    3b82:	f3bf 8f6f 	isb	sy
			 * is continued below.
			 */
			LOG_DBG("idle %p aborting thread %p",
				_current, to_abort);

			z_thread_single_abort(to_abort);
    3b86:	f000 fbf7 	bl	4378 <z_thread_single_abort>
	__asm__ volatile(
    3b8a:	f04f 0320 	mov.w	r3, #32
    3b8e:	f3ef 8011 	mrs	r0, BASEPRI
    3b92:	f383 8811 	msr	BASEPRI, r3
    3b96:	f3bf 8f6f 	isb	sy
    3b9a:	f002 f841 	bl	5c20 <z_reschedule_irqlock>
			 * in order to abort the thread, and we now need to
			 * figure out what to do next, it's not necessarily
			 * the case that there are no other runnable threads.
			 */
			z_reschedule_unlocked();
			continue;
    3b9e:	e7e3      	b.n	3b68 <idle+0x8>
	__asm__ volatile(
    3ba0:	f383 8811 	msr	BASEPRI, r3
    3ba4:	f3bf 8f6f 	isb	sy
	__asm__ volatile(
    3ba8:	f04f 0220 	mov.w	r2, #32
    3bac:	f3ef 8311 	mrs	r3, BASEPRI
    3bb0:	f382 8811 	msr	BASEPRI, r2
    3bb4:	f3bf 8f6f 	isb	sy
	int32_t ticks = z_get_next_timeout_expiry();
    3bb8:	f002 f903 	bl	5dc2 <z_get_next_timeout_expiry>
	z_set_timeout_expiry((ticks < IDLE_THRESH) ? 1 : ticks, true);
    3bbc:	2101      	movs	r1, #1
    3bbe:	2802      	cmp	r0, #2
	int32_t ticks = z_get_next_timeout_expiry();
    3bc0:	4604      	mov	r4, r0
	z_set_timeout_expiry((ticks < IDLE_THRESH) ? 1 : ticks, true);
    3bc2:	bfd8      	it	le
    3bc4:	4608      	movle	r0, r1
    3bc6:	f002 f90c 	bl	5de2 <z_set_timeout_expiry>
	_kernel.idle = ticks;
    3bca:	6274      	str	r4, [r6, #36]	; 0x24
	arch_cpu_idle();
    3bcc:	f7fe fb54 	bl	2278 <arch_cpu_idle>
}
    3bd0:	e7ca      	b.n	3b68 <idle+0x8>
    3bd2:	bf00      	nop
    3bd4:	20000444 	.word	0x20000444

00003bd8 <z_bss_zero>:
 *
 * @return N/A
 */
void z_bss_zero(void)
{
	(void)memset(__bss_start, 0, __bss_end - __bss_start);
    3bd8:	4802      	ldr	r0, [pc, #8]	; (3be4 <z_bss_zero+0xc>)
    3bda:	4a03      	ldr	r2, [pc, #12]	; (3be8 <z_bss_zero+0x10>)
    3bdc:	2100      	movs	r1, #0
    3bde:	1a12      	subs	r2, r2, r0
    3be0:	f001 bead 	b.w	593e <memset>
    3be4:	200000b0 	.word	0x200000b0
    3be8:	200008b4 	.word	0x200008b4

00003bec <z_data_copy>:
 * This routine copies the data section from ROM to RAM.
 *
 * @return N/A
 */
void z_data_copy(void)
{
    3bec:	b508      	push	{r3, lr}
	(void)memcpy(&__data_ram_start, &__data_rom_start,
		 __data_ram_end - __data_ram_start);
    3bee:	4806      	ldr	r0, [pc, #24]	; (3c08 <z_data_copy+0x1c>)
	(void)memcpy(&__data_ram_start, &__data_rom_start,
    3bf0:	4a06      	ldr	r2, [pc, #24]	; (3c0c <z_data_copy+0x20>)
    3bf2:	4907      	ldr	r1, [pc, #28]	; (3c10 <z_data_copy+0x24>)
    3bf4:	1a12      	subs	r2, r2, r0
    3bf6:	f001 fe77 	bl	58e8 <memcpy>
#else
	(void)memcpy(&_app_smem_start, &_app_smem_rom_start,
		 _app_smem_end - _app_smem_start);
#endif /* CONFIG_STACK_CANARIES */
#endif /* CONFIG_USERSPACE */
}
    3bfa:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	(void)memcpy(&_ramfunc_ram_start, &_ramfunc_rom_start,
    3bfe:	4a05      	ldr	r2, [pc, #20]	; (3c14 <z_data_copy+0x28>)
    3c00:	4905      	ldr	r1, [pc, #20]	; (3c18 <z_data_copy+0x2c>)
    3c02:	4806      	ldr	r0, [pc, #24]	; (3c1c <z_data_copy+0x30>)
    3c04:	f001 be70 	b.w	58e8 <memcpy>
    3c08:	20000000 	.word	0x20000000
    3c0c:	200000b0 	.word	0x200000b0
    3c10:	00006a5c 	.word	0x00006a5c
    3c14:	00000000 	.word	0x00000000
    3c18:	00006a5c 	.word	0x00006a5c
    3c1c:	20000000 	.word	0x20000000

00003c20 <bg_thread_main>:
 * init functions, then invokes application's main() routine.
 *
 * @return N/A
 */
static void bg_thread_main(void *unused1, void *unused2, void *unused3)
{
    3c20:	b508      	push	{r3, lr}
	static const unsigned int boot_delay = CONFIG_BOOT_DELAY;
#else
	static const unsigned int boot_delay;
#endif

	z_sys_post_kernel = true;
    3c22:	4b0c      	ldr	r3, [pc, #48]	; (3c54 <bg_thread_main+0x34>)
    3c24:	2201      	movs	r2, #1

	z_sys_init_run_level(_SYS_INIT_LEVEL_POST_KERNEL);
    3c26:	2002      	movs	r0, #2
	z_sys_post_kernel = true;
    3c28:	701a      	strb	r2, [r3, #0]
	z_sys_init_run_level(_SYS_INIT_LEVEL_POST_KERNEL);
    3c2a:	f7ff fed5 	bl	39d8 <z_sys_init_run_level>
		k_busy_wait(CONFIG_BOOT_DELAY * USEC_PER_MSEC);
	}

#if defined(CONFIG_BOOT_BANNER)
#ifdef BUILD_VERSION
	printk("*** Booting Zephyr OS build %s %s ***\n",
    3c2e:	4a0a      	ldr	r2, [pc, #40]	; (3c58 <bg_thread_main+0x38>)
    3c30:	490a      	ldr	r1, [pc, #40]	; (3c5c <bg_thread_main+0x3c>)
    3c32:	480b      	ldr	r0, [pc, #44]	; (3c60 <bg_thread_main+0x40>)
    3c34:	f001 f8a7 	bl	4d86 <printk>
	__do_global_ctors_aux();
	__do_init_array_aux();
#endif

	/* Final init level before app starts */
	z_sys_init_run_level(_SYS_INIT_LEVEL_APPLICATION);
    3c38:	2003      	movs	r0, #3
    3c3a:	f7ff fecd 	bl	39d8 <z_sys_init_run_level>

	z_init_static_threads();
    3c3e:	f000 fe0b 	bl	4858 <z_init_static_threads>
	z_timestamp_main = k_cycle_get_32();
#endif

	extern void main(void);

	main();
    3c42:	f7fc fc13 	bl	46c <main>

	/* Mark nonessenrial since main() has no more work to do */
	z_main_thread.base.user_options &= ~K_ESSENTIAL;
    3c46:	4a07      	ldr	r2, [pc, #28]	; (3c64 <bg_thread_main+0x44>)
    3c48:	7b13      	ldrb	r3, [r2, #12]
    3c4a:	f023 0301 	bic.w	r3, r3, #1
    3c4e:	7313      	strb	r3, [r2, #12]

#ifdef CONFIG_COVERAGE_DUMP
	/* Dump coverage data once the main() has exited. */
	gcov_coverage_dump();
#endif
} /* LCOV_EXCL_LINE ... because we just dumped final coverage data */
    3c50:	bd08      	pop	{r3, pc}
    3c52:	bf00      	nop
    3c54:	200008b0 	.word	0x200008b0
    3c58:	0000636a 	.word	0x0000636a
    3c5c:	00006a0b 	.word	0x00006a0b
    3c60:	00006a2a 	.word	0x00006a2a
    3c64:	200001e8 	.word	0x200001e8

00003c68 <z_cstart>:
 * cleared/zeroed.
 *
 * @return Does not return
 */
FUNC_NORETURN void z_cstart(void)
{
    3c68:	e92d 4880 	stmdb	sp!, {r7, fp, lr}
    3c6c:	b0a7      	sub	sp, #156	; 0x9c
	/* gcov hook needed to get the coverage report.*/
	gcov_static_init();

	LOG_CORE_INIT();
    3c6e:	f7fd f901 	bl	e74 <log_core_init>
 *
 * @return N/A
 */
static ALWAYS_INLINE void z_arm_interrupt_stack_setup(void)
{
	uint32_t msp =
    3c72:	f8df 90f4 	ldr.w	r9, [pc, #244]	; 3d68 <z_cstart+0x100>
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
    3c76:	f389 8808 	msr	MSP, r9
	 * for Cortex-M3 and Cortex-M4 (ARMv7-M) MCUs. For the rest
	 * of ARM Cortex-M processors this setting is enforced by
	 * default and it is not configurable.
	 */
#if defined(CONFIG_CPU_CORTEX_M3) || defined(CONFIG_CPU_CORTEX_M4)
	SCB->CCR |= SCB_CCR_STKALIGN_Msk;
    3c7a:	4d33      	ldr	r5, [pc, #204]	; (3d48 <z_cstart+0xe0>)
	_kernel.ready_q.cache = &z_main_thread;
    3c7c:	4e33      	ldr	r6, [pc, #204]	; (3d4c <z_cstart+0xe4>)
    3c7e:	696b      	ldr	r3, [r5, #20]
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
    3c80:	f8df a0e8 	ldr.w	sl, [pc, #232]	; 3d6c <z_cstart+0x104>
	z_setup_new_thread(thread, stack,
    3c84:	4f32      	ldr	r7, [pc, #200]	; (3d50 <z_cstart+0xe8>)
    3c86:	f443 7300 	orr.w	r3, r3, #512	; 0x200
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    3c8a:	2400      	movs	r4, #0
    3c8c:	616b      	str	r3, [r5, #20]
    3c8e:	23e0      	movs	r3, #224	; 0xe0
    3c90:	f885 3022 	strb.w	r3, [r5, #34]	; 0x22
    3c94:	77ec      	strb	r4, [r5, #31]
    3c96:	762c      	strb	r4, [r5, #24]
    3c98:	766c      	strb	r4, [r5, #25]
    3c9a:	76ac      	strb	r4, [r5, #26]
#if defined(CONFIG_ARM_SECURE_FIRMWARE)
	NVIC_SetPriority(SecureFault_IRQn, _EXC_FAULT_PRIO);
#endif /* CONFIG_ARM_SECURE_FIRMWARE */

	/* Enable Usage, Mem, & Bus Faults */
	SCB->SHCSR |= SCB_SHCSR_USGFAULTENA_Msk | SCB_SHCSR_MEMFAULTENA_Msk |
    3c9c:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    3c9e:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
    3ca2:	626b      	str	r3, [r5, #36]	; 0x24

static ALWAYS_INLINE void arch_kernel_init(void)
{
	z_arm_interrupt_stack_setup();
	z_arm_exc_setup();
	z_arm_fault_init();
    3ca4:	f7fe fd6a 	bl	277c <z_arm_fault_init>
	z_arm_cpu_idle_init();
    3ca8:	f7fe fae0 	bl	226c <z_arm_cpu_idle_init>
static ALWAYS_INLINE void z_arm_clear_faults(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* Reset all faults */
	SCB->CFSR = SCB_CFSR_USGFAULTSR_Msk |
    3cac:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    3cb0:	62ab      	str	r3, [r5, #40]	; 0x28
		    SCB_CFSR_MEMFAULTSR_Msk |
		    SCB_CFSR_BUSFAULTSR_Msk;

	/* Clear all Hard Faults - HFSR is write-one-to-clear */
	SCB->HFSR = 0xffffffff;
    3cb2:	62eb      	str	r3, [r5, #44]	; 0x2c
#endif
#ifdef CONFIG_USERSPACE
	dummy_thread->mem_domain_info.mem_domain = &k_mem_domain_default;
#endif

	_current_cpu->current = dummy_thread;
    3cb4:	4d27      	ldr	r5, [pc, #156]	; (3d54 <z_cstart+0xec>)
	dummy_thread->base.user_options = K_ESSENTIAL;
    3cb6:	f240 1301 	movw	r3, #257	; 0x101
    3cba:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
	_current_cpu->current = dummy_thread;
    3cbe:	ab06      	add	r3, sp, #24
    3cc0:	60ab      	str	r3, [r5, #8]

	z_dummy_thread_init(&dummy_thread);
#endif

	/* perform basic hardware initialization */
	z_sys_init_run_level(_SYS_INIT_LEVEL_PRE_KERNEL_1);
    3cc2:	4620      	mov	r0, r4
	dummy_thread->stack_info.size = 0U;
    3cc4:	e9cd 4420 	strd	r4, r4, [sp, #128]	; 0x80
    3cc8:	f7ff fe86 	bl	39d8 <z_sys_init_run_level>
	z_sys_init_run_level(_SYS_INIT_LEVEL_PRE_KERNEL_2);
    3ccc:	2001      	movs	r0, #1
    3cce:	f7ff fe83 	bl	39d8 <z_sys_init_run_level>
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
    3cd2:	f04f 0b01 	mov.w	fp, #1
	z_sched_init();
    3cd6:	f000 fc97 	bl	4608 <z_sched_init>
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
    3cda:	4b1f      	ldr	r3, [pc, #124]	; (3d58 <z_cstart+0xf0>)
	_kernel.ready_q.cache = &z_main_thread;
    3cdc:	62ae      	str	r6, [r5, #40]	; 0x28
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
    3cde:	491f      	ldr	r1, [pc, #124]	; (3d5c <z_cstart+0xf4>)
    3ce0:	9305      	str	r3, [sp, #20]
    3ce2:	f44f 6280 	mov.w	r2, #1024	; 0x400
    3ce6:	4653      	mov	r3, sl
    3ce8:	e9cd 4b03 	strd	r4, fp, [sp, #12]
    3cec:	e9cd 4401 	strd	r4, r4, [sp, #4]
    3cf0:	9400      	str	r4, [sp, #0]
    3cf2:	4630      	mov	r0, r6
    3cf4:	f000 fd52 	bl	479c <z_setup_new_thread>
	sys_trace_thread_resume(thread);
}

static inline void z_mark_thread_as_started(struct k_thread *thread)
{
	thread->base.thread_state &= ~_THREAD_PRESTART;
    3cf8:	7b73      	ldrb	r3, [r6, #13]
    3cfa:	4680      	mov	r8, r0
    3cfc:	f023 0304 	bic.w	r3, r3, #4
	z_ready_thread(&z_main_thread);
    3d00:	4630      	mov	r0, r6
    3d02:	7373      	strb	r3, [r6, #13]
    3d04:	f001 ffb8 	bl	5c78 <z_ready_thread>
	z_setup_new_thread(thread, stack,
    3d08:	230f      	movs	r3, #15
    3d0a:	e9cd 4302 	strd	r4, r3, [sp, #8]
    3d0e:	4914      	ldr	r1, [pc, #80]	; (3d60 <z_cstart+0xf8>)
    3d10:	4b14      	ldr	r3, [pc, #80]	; (3d64 <z_cstart+0xfc>)
    3d12:	f44f 72a0 	mov.w	r2, #320	; 0x140
    3d16:	e9cd b404 	strd	fp, r4, [sp, #16]
    3d1a:	e9cd 5400 	strd	r5, r4, [sp]
    3d1e:	4638      	mov	r0, r7
    3d20:	f000 fd3c 	bl	479c <z_setup_new_thread>
    3d24:	7b7b      	ldrb	r3, [r7, #13]
		_kernel.cpus[i].idle_thread = &z_idle_threads[i];
    3d26:	60ef      	str	r7, [r5, #12]
    3d28:	f023 0304 	bic.w	r3, r3, #4
    3d2c:	737b      	strb	r3, [r7, #13]
 * @return N/A
 */

static inline void sys_dlist_init(sys_dlist_t *list)
{
	list->head = (sys_dnode_t *)list;
    3d2e:	f105 031c 	add.w	r3, r5, #28
	list->tail = (sys_dnode_t *)list;
    3d32:	e9c5 3307 	strd	r3, r3, [r5, #28]
		_kernel.cpus[i].id = i;
    3d36:	762c      	strb	r4, [r5, #24]
		_kernel.cpus[i].irq_stack =
    3d38:	f8c5 9004 	str.w	r9, [r5, #4]
	arch_switch_to_main_thread(&z_main_thread, stack_ptr, bg_thread_main);
    3d3c:	4652      	mov	r2, sl
    3d3e:	4641      	mov	r1, r8
    3d40:	4630      	mov	r0, r6
    3d42:	f7fe f9e5 	bl	2110 <arch_switch_to_main_thread>
	CODE_UNREACHABLE; /* LCOV_EXCL_LINE */
    3d46:	bf00      	nop
    3d48:	e000ed00 	.word	0xe000ed00
    3d4c:	200001e8 	.word	0x200001e8
    3d50:	20000168 	.word	0x20000168
    3d54:	20000444 	.word	0x20000444
    3d58:	00006a51 	.word	0x00006a51
    3d5c:	20000be0 	.word	0x20000be0
    3d60:	20001000 	.word	0x20001000
    3d64:	00003b61 	.word	0x00003b61
    3d68:	20001980 	.word	0x20001980
    3d6c:	00003c21 	.word	0x00003c21

00003d70 <init_mem_slab_module>:
 * Perform any initialization that wasn't done at build time.
 *
 * @return N/A
 */
static int init_mem_slab_module(const struct device *dev)
{
    3d70:	b570      	push	{r4, r5, r6, lr}
	int rc = 0;
	ARG_UNUSED(dev);

	Z_STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
    3d72:	4b0e      	ldr	r3, [pc, #56]	; (3dac <init_mem_slab_module+0x3c>)
    3d74:	4c0e      	ldr	r4, [pc, #56]	; (3db0 <init_mem_slab_module+0x40>)
    3d76:	42a3      	cmp	r3, r4
    3d78:	d301      	bcc.n	3d7e <init_mem_slab_module+0xe>
		}
		SYS_TRACING_OBJ_INIT(k_mem_slab, slab);
		z_object_init(slab);
	}

out:
    3d7a:	2000      	movs	r0, #0
	return rc;
}
    3d7c:	bd70      	pop	{r4, r5, r6, pc}
	CHECKIF(((slab->block_size | (uintptr_t)slab->buffer) &
    3d7e:	e9d3 0103 	ldrd	r0, r1, [r3, #12]
    3d82:	ea41 0200 	orr.w	r2, r1, r0
    3d86:	f012 0203 	ands.w	r2, r2, #3
    3d8a:	d10b      	bne.n	3da4 <init_mem_slab_module+0x34>
	for (j = 0U; j < slab->num_blocks; j++) {
    3d8c:	689d      	ldr	r5, [r3, #8]
	slab->free_list = NULL;
    3d8e:	615a      	str	r2, [r3, #20]
	for (j = 0U; j < slab->num_blocks; j++) {
    3d90:	42aa      	cmp	r2, r5
    3d92:	d101      	bne.n	3d98 <init_mem_slab_module+0x28>
	Z_STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
    3d94:	331c      	adds	r3, #28
    3d96:	e7ee      	b.n	3d76 <init_mem_slab_module+0x6>
		*(char **)p = slab->free_list;
    3d98:	695e      	ldr	r6, [r3, #20]
    3d9a:	600e      	str	r6, [r1, #0]
	for (j = 0U; j < slab->num_blocks; j++) {
    3d9c:	3201      	adds	r2, #1
		slab->free_list = p;
    3d9e:	6159      	str	r1, [r3, #20]
		p += slab->block_size;
    3da0:	4401      	add	r1, r0
	for (j = 0U; j < slab->num_blocks; j++) {
    3da2:	e7f5      	b.n	3d90 <init_mem_slab_module+0x20>
		return -EINVAL;
    3da4:	f06f 0015 	mvn.w	r0, #21
	return rc;
    3da8:	e7e8      	b.n	3d7c <init_mem_slab_module+0xc>
    3daa:	bf00      	nop
    3dac:	2000008c 	.word	0x2000008c
    3db0:	2000008c 	.word	0x2000008c

00003db4 <k_mem_slab_alloc>:
out:
	return rc;
}

int k_mem_slab_alloc(struct k_mem_slab *slab, void **mem, k_timeout_t timeout)
{
    3db4:	b5d3      	push	{r0, r1, r4, r6, r7, lr}
    3db6:	460c      	mov	r4, r1
    3db8:	4616      	mov	r6, r2
    3dba:	461f      	mov	r7, r3
    3dbc:	f04f 0320 	mov.w	r3, #32
    3dc0:	f3ef 8111 	mrs	r1, BASEPRI
    3dc4:	f383 8811 	msr	BASEPRI, r3
    3dc8:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&lock);
	int result;

	if (slab->free_list != NULL) {
    3dcc:	6943      	ldr	r3, [r0, #20]
    3dce:	b15b      	cbz	r3, 3de8 <k_mem_slab_alloc+0x34>
		/* take a free block */
		*mem = slab->free_list;
    3dd0:	6023      	str	r3, [r4, #0]
		slab->free_list = *(char **)(slab->free_list);
    3dd2:	681b      	ldr	r3, [r3, #0]
    3dd4:	6143      	str	r3, [r0, #20]
		slab->num_used++;
    3dd6:	6983      	ldr	r3, [r0, #24]
    3dd8:	3301      	adds	r3, #1
    3dda:	6183      	str	r3, [r0, #24]
		result = 0;
    3ddc:	2000      	movs	r0, #0
	__asm__ volatile(
    3dde:	f381 8811 	msr	BASEPRI, r1
    3de2:	f3bf 8f6f 	isb	sy
		return result;
	}

	k_spin_unlock(&lock, key);

	return result;
    3de6:	e011      	b.n	3e0c <k_mem_slab_alloc+0x58>
	} else if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
    3de8:	ea56 0207 	orrs.w	r2, r6, r7
    3dec:	d103      	bne.n	3df6 <k_mem_slab_alloc+0x42>
		*mem = NULL;
    3dee:	6023      	str	r3, [r4, #0]
		result = -ENOMEM;
    3df0:	f06f 000b 	mvn.w	r0, #11
    3df4:	e7f3      	b.n	3dde <k_mem_slab_alloc+0x2a>
		result = z_pend_curr(&lock, key, &slab->wait_q, timeout);
    3df6:	4602      	mov	r2, r0
    3df8:	e9cd 6700 	strd	r6, r7, [sp]
    3dfc:	4804      	ldr	r0, [pc, #16]	; (3e10 <k_mem_slab_alloc+0x5c>)
    3dfe:	f000 fb7d 	bl	44fc <z_pend_curr>
		if (result == 0) {
    3e02:	b918      	cbnz	r0, 3e0c <k_mem_slab_alloc+0x58>
			*mem = _current->base.swap_data;
    3e04:	4b03      	ldr	r3, [pc, #12]	; (3e14 <k_mem_slab_alloc+0x60>)
    3e06:	689b      	ldr	r3, [r3, #8]
    3e08:	695b      	ldr	r3, [r3, #20]
    3e0a:	6023      	str	r3, [r4, #0]
}
    3e0c:	b002      	add	sp, #8
    3e0e:	bdd0      	pop	{r4, r6, r7, pc}
    3e10:	200008b1 	.word	0x200008b1
    3e14:	20000444 	.word	0x20000444

00003e18 <k_mem_slab_free>:

void k_mem_slab_free(struct k_mem_slab *slab, void **mem)
{
    3e18:	b570      	push	{r4, r5, r6, lr}
    3e1a:	4604      	mov	r4, r0
    3e1c:	460d      	mov	r5, r1
	__asm__ volatile(
    3e1e:	f04f 0320 	mov.w	r3, #32
    3e22:	f3ef 8611 	mrs	r6, BASEPRI
    3e26:	f383 8811 	msr	BASEPRI, r3
    3e2a:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&lock);
	struct k_thread *pending_thread = z_unpend_first_thread(&slab->wait_q);
    3e2e:	f001 ff7e 	bl	5d2e <z_unpend_first_thread>

	if (pending_thread != NULL) {
    3e32:	b158      	cbz	r0, 3e4c <k_mem_slab_free+0x34>
		z_thread_return_value_set_with_data(pending_thread, 0, *mem);
    3e34:	682a      	ldr	r2, [r5, #0]
z_thread_return_value_set_with_data(struct k_thread *thread,
				   unsigned int value,
				   void *data)
{
	arch_thread_return_value_set(thread, value);
	thread->base.swap_data = data;
    3e36:	6142      	str	r2, [r0, #20]
}

static ALWAYS_INLINE void
arch_thread_return_value_set(struct k_thread *thread, unsigned int value)
{
	thread->arch.swap_return_value = value;
    3e38:	2100      	movs	r1, #0
    3e3a:	67c1      	str	r1, [r0, #124]	; 0x7c
		z_ready_thread(pending_thread);
    3e3c:	f001 ff1c 	bl	5c78 <z_ready_thread>
		z_reschedule(&lock, key);
    3e40:	4631      	mov	r1, r6
    3e42:	4809      	ldr	r0, [pc, #36]	; (3e68 <k_mem_slab_free+0x50>)
		**(char ***)mem = slab->free_list;
		slab->free_list = *(char **)mem;
		slab->num_used--;
		k_spin_unlock(&lock, key);
	}
}
    3e44:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		z_reschedule(&lock, key);
    3e48:	f000 b910 	b.w	406c <z_reschedule>
		**(char ***)mem = slab->free_list;
    3e4c:	682b      	ldr	r3, [r5, #0]
    3e4e:	6962      	ldr	r2, [r4, #20]
    3e50:	601a      	str	r2, [r3, #0]
		slab->free_list = *(char **)mem;
    3e52:	682b      	ldr	r3, [r5, #0]
    3e54:	6163      	str	r3, [r4, #20]
		slab->num_used--;
    3e56:	69a3      	ldr	r3, [r4, #24]
    3e58:	3b01      	subs	r3, #1
    3e5a:	61a3      	str	r3, [r4, #24]
	__asm__ volatile(
    3e5c:	f386 8811 	msr	BASEPRI, r6
    3e60:	f3bf 8f6f 	isb	sy
}
    3e64:	bd70      	pop	{r4, r5, r6, pc}
    3e66:	bf00      	nop
    3e68:	200008b1 	.word	0x200008b1

00003e6c <z_impl_k_mutex_lock>:
	}
	return false;
}

int z_impl_k_mutex_lock(struct k_mutex *mutex, k_timeout_t timeout)
{
    3e6c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    3e70:	4604      	mov	r4, r0
    3e72:	4616      	mov	r6, r2
    3e74:	461f      	mov	r7, r3
	__asm__ volatile(
    3e76:	f04f 0320 	mov.w	r3, #32
    3e7a:	f3ef 8811 	mrs	r8, BASEPRI
    3e7e:	f383 8811 	msr	BASEPRI, r3
    3e82:	f3bf 8f6f 	isb	sy
	__ASSERT(!arch_is_in_isr(), "mutexes cannot be used inside ISRs");

	sys_trace_mutex_lock(mutex);
	key = k_spin_lock(&lock);

	if (likely((mutex->lock_count == 0U) || (mutex->owner == _current))) {
    3e86:	68c3      	ldr	r3, [r0, #12]
    3e88:	4a32      	ldr	r2, [pc, #200]	; (3f54 <z_impl_k_mutex_lock+0xe8>)
    3e8a:	b16b      	cbz	r3, 3ea8 <z_impl_k_mutex_lock+0x3c>
    3e8c:	6880      	ldr	r0, [r0, #8]
    3e8e:	6891      	ldr	r1, [r2, #8]
    3e90:	4288      	cmp	r0, r1
    3e92:	d019      	beq.n	3ec8 <z_impl_k_mutex_lock+0x5c>
		sys_trace_end_call(SYS_TRACE_ID_MUTEX_LOCK);

		return 0;
	}

	if (unlikely(K_TIMEOUT_EQ(timeout, K_NO_WAIT))) {
    3e94:	ea56 0307 	orrs.w	r3, r6, r7
    3e98:	d118      	bne.n	3ecc <z_impl_k_mutex_lock+0x60>
	__asm__ volatile(
    3e9a:	f388 8811 	msr	BASEPRI, r8
    3e9e:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);
		sys_trace_end_call(SYS_TRACE_ID_MUTEX_LOCK);
		return -EBUSY;
    3ea2:	f06f 000f 	mvn.w	r0, #15
    3ea6:	e00c      	b.n	3ec2 <z_impl_k_mutex_lock+0x56>
					_current->base.prio :
    3ea8:	6891      	ldr	r1, [r2, #8]
    3eaa:	f991 100e 	ldrsb.w	r1, [r1, #14]
		mutex->owner_orig_prio = (mutex->lock_count == 0U) ?
    3eae:	6121      	str	r1, [r4, #16]
		mutex->lock_count++;
    3eb0:	3301      	adds	r3, #1
    3eb2:	60e3      	str	r3, [r4, #12]
		mutex->owner = _current;
    3eb4:	6893      	ldr	r3, [r2, #8]
    3eb6:	60a3      	str	r3, [r4, #8]
    3eb8:	f388 8811 	msr	BASEPRI, r8
    3ebc:	f3bf 8f6f 	isb	sy
		return 0;
    3ec0:	2000      	movs	r0, #0
		k_spin_unlock(&lock, key);
	}

	sys_trace_end_call(SYS_TRACE_ID_MUTEX_LOCK);
	return -EAGAIN;
}
    3ec2:	b002      	add	sp, #8
    3ec4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
					_current->base.prio :
    3ec8:	6921      	ldr	r1, [r4, #16]
    3eca:	e7f0      	b.n	3eae <z_impl_k_mutex_lock+0x42>
	new_prio = new_prio_for_inheritance(_current->base.prio,
    3ecc:	f990 300e 	ldrsb.w	r3, [r0, #14]
    3ed0:	f991 100e 	ldrsb.w	r1, [r1, #14]
    3ed4:	4299      	cmp	r1, r3
    3ed6:	bfa8      	it	ge
    3ed8:	4619      	movge	r1, r3
    3eda:	ea21 71e1 	bic.w	r1, r1, r1, asr #31
	if (z_is_prio_higher(new_prio, mutex->owner->base.prio)) {
    3ede:	428b      	cmp	r3, r1
    3ee0:	dd2c      	ble.n	3f3c <z_impl_k_mutex_lock+0xd0>
		return z_set_prio(mutex->owner, new_prio);
    3ee2:	f000 fb4d 	bl	4580 <z_set_prio>
    3ee6:	4605      	mov	r5, r0
	int got_mutex = z_pend_curr(&lock, key, &mutex->wait_q, timeout);
    3ee8:	e9cd 6700 	strd	r6, r7, [sp]
    3eec:	481a      	ldr	r0, [pc, #104]	; (3f58 <z_impl_k_mutex_lock+0xec>)
    3eee:	4622      	mov	r2, r4
    3ef0:	4641      	mov	r1, r8
    3ef2:	f000 fb03 	bl	44fc <z_pend_curr>
	if (got_mutex == 0) {
    3ef6:	2800      	cmp	r0, #0
    3ef8:	d0e3      	beq.n	3ec2 <z_impl_k_mutex_lock+0x56>
	__asm__ volatile(
    3efa:	f04f 0320 	mov.w	r3, #32
    3efe:	f3ef 8611 	mrs	r6, BASEPRI
    3f02:	f383 8811 	msr	BASEPRI, r3
    3f06:	f3bf 8f6f 	isb	sy
 * @return true if empty, false otherwise
 */

static inline bool sys_dlist_is_empty(sys_dlist_t *list)
{
	return list->head == list;
    3f0a:	6823      	ldr	r3, [r4, #0]
    3f0c:	6921      	ldr	r1, [r4, #16]
 * @return a pointer to the head element, NULL if list is empty
 */

static inline sys_dnode_t *sys_dlist_peek_head(sys_dlist_t *list)
{
	return sys_dlist_is_empty(list) ? NULL : list->head;
    3f0e:	42a3      	cmp	r3, r4
    3f10:	d007      	beq.n	3f22 <z_impl_k_mutex_lock+0xb6>
		new_prio_for_inheritance(waiter->base.prio, mutex->owner_orig_prio) :
    3f12:	b133      	cbz	r3, 3f22 <z_impl_k_mutex_lock+0xb6>
    3f14:	f993 300e 	ldrsb.w	r3, [r3, #14]
    3f18:	4299      	cmp	r1, r3
    3f1a:	bfa8      	it	ge
    3f1c:	4619      	movge	r1, r3
    3f1e:	ea21 71e1 	bic.w	r1, r1, r1, asr #31
	resched = adjust_owner_prio(mutex, new_prio) || resched;
    3f22:	68a0      	ldr	r0, [r4, #8]
	if (mutex->owner->base.prio != new_prio) {
    3f24:	f990 300e 	ldrsb.w	r3, [r0, #14]
    3f28:	4299      	cmp	r1, r3
    3f2a:	d109      	bne.n	3f40 <z_impl_k_mutex_lock+0xd4>
	if (resched) {
    3f2c:	b16d      	cbz	r5, 3f4a <z_impl_k_mutex_lock+0xde>
		z_reschedule(&lock, key);
    3f2e:	480a      	ldr	r0, [pc, #40]	; (3f58 <z_impl_k_mutex_lock+0xec>)
    3f30:	4631      	mov	r1, r6
    3f32:	f000 f89b 	bl	406c <z_reschedule>
	return -EAGAIN;
    3f36:	f06f 000a 	mvn.w	r0, #10
    3f3a:	e7c2      	b.n	3ec2 <z_impl_k_mutex_lock+0x56>
	bool resched = false;
    3f3c:	2500      	movs	r5, #0
    3f3e:	e7d3      	b.n	3ee8 <z_impl_k_mutex_lock+0x7c>
		return z_set_prio(mutex->owner, new_prio);
    3f40:	f000 fb1e 	bl	4580 <z_set_prio>
	resched = adjust_owner_prio(mutex, new_prio) || resched;
    3f44:	2800      	cmp	r0, #0
    3f46:	d1f2      	bne.n	3f2e <z_impl_k_mutex_lock+0xc2>
    3f48:	e7f0      	b.n	3f2c <z_impl_k_mutex_lock+0xc0>
	__asm__ volatile(
    3f4a:	f386 8811 	msr	BASEPRI, r6
    3f4e:	f3bf 8f6f 	isb	sy
    3f52:	e7f0      	b.n	3f36 <z_impl_k_mutex_lock+0xca>
    3f54:	20000444 	.word	0x20000444
    3f58:	200008b1 	.word	0x200008b1

00003f5c <z_impl_k_mutex_unlock>:
}
#include <syscalls/k_mutex_lock_mrsh.c>
#endif

int z_impl_k_mutex_unlock(struct k_mutex *mutex)
{
    3f5c:	b538      	push	{r3, r4, r5, lr}
	struct k_thread *new_owner;

	__ASSERT(!arch_is_in_isr(), "mutexes cannot be used inside ISRs");

	CHECKIF(mutex->owner == NULL) {
    3f5e:	6883      	ldr	r3, [r0, #8]
{
    3f60:	4604      	mov	r4, r0
	CHECKIF(mutex->owner == NULL) {
    3f62:	2b00      	cmp	r3, #0
    3f64:	d036      	beq.n	3fd4 <z_impl_k_mutex_unlock+0x78>
		return -EINVAL;
	}
	/*
	 * The current thread does not own the mutex.
	 */
	CHECKIF(mutex->owner != _current) {
    3f66:	4a1e      	ldr	r2, [pc, #120]	; (3fe0 <z_impl_k_mutex_unlock+0x84>)
    3f68:	6892      	ldr	r2, [r2, #8]
    3f6a:	4293      	cmp	r3, r2
    3f6c:	d135      	bne.n	3fda <z_impl_k_mutex_unlock+0x7e>
{
#ifdef CONFIG_PREEMPT_ENABLED
	__ASSERT(!arch_is_in_isr(), "");
	__ASSERT(_current->base.sched_locked != 1, "");

	--_current->base.sched_locked;
    3f6e:	7bda      	ldrb	r2, [r3, #15]
    3f70:	3a01      	subs	r2, #1
    3f72:	73da      	strb	r2, [r3, #15]

	/*
	 * If we are the owner and count is greater than 1, then decrement
	 * the count and return and keep current thread as the owner.
	 */
	if (mutex->lock_count - 1U != 0U) {
    3f74:	68c3      	ldr	r3, [r0, #12]
    3f76:	2b01      	cmp	r3, #1
    3f78:	d005      	beq.n	3f86 <z_impl_k_mutex_unlock+0x2a>
		mutex->lock_count--;
    3f7a:	3b01      	subs	r3, #1
    3f7c:	60c3      	str	r3, [r0, #12]
		k_spin_unlock(&lock, key);
	}


k_mutex_unlock_return:
	k_sched_unlock();
    3f7e:	f000 f8d9 	bl	4134 <k_sched_unlock>
	sys_trace_end_call(SYS_TRACE_ID_MUTEX_UNLOCK);

	return 0;
    3f82:	2000      	movs	r0, #0
}
    3f84:	bd38      	pop	{r3, r4, r5, pc}
	__asm__ volatile(
    3f86:	f04f 0320 	mov.w	r3, #32
    3f8a:	f3ef 8511 	mrs	r5, BASEPRI
    3f8e:	f383 8811 	msr	BASEPRI, r3
    3f92:	f3bf 8f6f 	isb	sy
	adjust_owner_prio(mutex, mutex->owner_orig_prio);
    3f96:	6901      	ldr	r1, [r0, #16]
    3f98:	6880      	ldr	r0, [r0, #8]
	if (mutex->owner->base.prio != new_prio) {
    3f9a:	f990 300e 	ldrsb.w	r3, [r0, #14]
    3f9e:	4299      	cmp	r1, r3
    3fa0:	d001      	beq.n	3fa6 <z_impl_k_mutex_unlock+0x4a>
		return z_set_prio(mutex->owner, new_prio);
    3fa2:	f000 faed 	bl	4580 <z_set_prio>
	new_owner = z_unpend_first_thread(&mutex->wait_q);
    3fa6:	4620      	mov	r0, r4
    3fa8:	f001 fec1 	bl	5d2e <z_unpend_first_thread>
	mutex->owner = new_owner;
    3fac:	60a0      	str	r0, [r4, #8]
	if (new_owner != NULL) {
    3fae:	b158      	cbz	r0, 3fc8 <z_impl_k_mutex_unlock+0x6c>
		mutex->owner_orig_prio = new_owner->base.prio;
    3fb0:	f990 200e 	ldrsb.w	r2, [r0, #14]
    3fb4:	6122      	str	r2, [r4, #16]
    3fb6:	2200      	movs	r2, #0
    3fb8:	67c2      	str	r2, [r0, #124]	; 0x7c
		z_ready_thread(new_owner);
    3fba:	f001 fe5d 	bl	5c78 <z_ready_thread>
		z_reschedule(&lock, key);
    3fbe:	4809      	ldr	r0, [pc, #36]	; (3fe4 <z_impl_k_mutex_unlock+0x88>)
    3fc0:	4629      	mov	r1, r5
    3fc2:	f000 f853 	bl	406c <z_reschedule>
    3fc6:	e7da      	b.n	3f7e <z_impl_k_mutex_unlock+0x22>
		mutex->lock_count = 0U;
    3fc8:	60e0      	str	r0, [r4, #12]
	__asm__ volatile(
    3fca:	f385 8811 	msr	BASEPRI, r5
    3fce:	f3bf 8f6f 	isb	sy
    3fd2:	e7d4      	b.n	3f7e <z_impl_k_mutex_unlock+0x22>
		return -EINVAL;
    3fd4:	f06f 0015 	mvn.w	r0, #21
    3fd8:	e7d4      	b.n	3f84 <z_impl_k_mutex_unlock+0x28>
		return -EPERM;
    3fda:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    3fde:	e7d1      	b.n	3f84 <z_impl_k_mutex_unlock+0x28>
    3fe0:	20000444 	.word	0x20000444
    3fe4:	200008b1 	.word	0x200008b1

00003fe8 <z_reset_time_slice>:
 */
static struct k_thread *pending_current;
#endif

void z_reset_time_slice(void)
{
    3fe8:	b510      	push	{r4, lr}
	/* Add the elapsed time since the last announced tick to the
	 * slice count, as we'll see those "expired" ticks arrive in a
	 * FUTURE z_time_slice() call.
	 */
	if (slice_time != 0) {
    3fea:	4c08      	ldr	r4, [pc, #32]	; (400c <z_reset_time_slice+0x24>)
    3fec:	6823      	ldr	r3, [r4, #0]
    3fee:	b15b      	cbz	r3, 4008 <z_reset_time_slice+0x20>
		_current_cpu->slice_ticks = slice_time + z_clock_elapsed();
    3ff0:	f7fd ff4e 	bl	1e90 <z_clock_elapsed>
    3ff4:	4603      	mov	r3, r0
    3ff6:	6820      	ldr	r0, [r4, #0]
    3ff8:	4a05      	ldr	r2, [pc, #20]	; (4010 <z_reset_time_slice+0x28>)
    3ffa:	4403      	add	r3, r0
		z_set_timeout_expiry(slice_time, false);
	}
}
    3ffc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		_current_cpu->slice_ticks = slice_time + z_clock_elapsed();
    4000:	6153      	str	r3, [r2, #20]
		z_set_timeout_expiry(slice_time, false);
    4002:	2100      	movs	r1, #0
    4004:	f001 beed 	b.w	5de2 <z_set_timeout_expiry>
}
    4008:	bd10      	pop	{r4, pc}
    400a:	bf00      	nop
    400c:	20000480 	.word	0x20000480
    4010:	20000444 	.word	0x20000444

00004014 <k_sched_time_slice_set>:

void k_sched_time_slice_set(int32_t slice, int prio)
{
    4014:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    4016:	4605      	mov	r5, r0
    4018:	460c      	mov	r4, r1
	__asm__ volatile(
    401a:	f04f 0320 	mov.w	r3, #32
    401e:	f3ef 8611 	mrs	r6, BASEPRI
    4022:	f383 8811 	msr	BASEPRI, r3
    4026:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
		_current_cpu->slice_ticks = 0;
    402a:	4b0d      	ldr	r3, [pc, #52]	; (4060 <k_sched_time_slice_set+0x4c>)
    402c:	2200      	movs	r2, #0
		} else {
			return t * (to_hz / from_hz);
		}
	} else {
		if (result32) {
			return (uint32_t)((t * to_hz + off) / from_hz);
    402e:	f44f 4700 	mov.w	r7, #32768	; 0x8000
    4032:	f240 30e7 	movw	r0, #999	; 0x3e7
    4036:	2100      	movs	r1, #0
    4038:	615a      	str	r2, [r3, #20]
    403a:	fbe7 0105 	umlal	r0, r1, r7, r5
    403e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    4042:	2300      	movs	r3, #0
    4044:	f7fc f84a 	bl	dc <__aeabi_uldivmod>
		slice_time = k_ms_to_ticks_ceil32(slice);
    4048:	4b06      	ldr	r3, [pc, #24]	; (4064 <k_sched_time_slice_set+0x50>)
    404a:	6018      	str	r0, [r3, #0]
		slice_max_prio = prio;
    404c:	4b06      	ldr	r3, [pc, #24]	; (4068 <k_sched_time_slice_set+0x54>)
    404e:	601c      	str	r4, [r3, #0]
		z_reset_time_slice();
    4050:	f7ff ffca 	bl	3fe8 <z_reset_time_slice>
	__asm__ volatile(
    4054:	f386 8811 	msr	BASEPRI, r6
    4058:	f3bf 8f6f 	isb	sy
	}
}
    405c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    405e:	bf00      	nop
    4060:	20000444 	.word	0x20000444
    4064:	20000480 	.word	0x20000480
    4068:	2000047c 	.word	0x2000047c

0000406c <z_reschedule>:
{
#ifdef CONFIG_SMP
	_current_cpu->swap_ok = 0;
#endif

	return arch_irq_unlocked(key) && !arch_is_in_isr();
    406c:	b949      	cbnz	r1, 4082 <z_reschedule+0x16>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
    406e:	f3ef 8005 	mrs	r0, IPSR
    4072:	b930      	cbnz	r0, 4082 <z_reschedule+0x16>
	return _kernel.ready_q.cache;
    4074:	4b05      	ldr	r3, [pc, #20]	; (408c <z_reschedule+0x20>)
#endif
}

void z_reschedule(struct k_spinlock *lock, k_spinlock_key_t key)
{
	if (resched(key.key) && need_swap()) {
    4076:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    4078:	689b      	ldr	r3, [r3, #8]
    407a:	429a      	cmp	r2, r3
    407c:	d001      	beq.n	4082 <z_reschedule+0x16>
	ret = arch_swap(key);
    407e:	f7fd bfc1 	b.w	2004 <arch_swap>
    4082:	f381 8811 	msr	BASEPRI, r1
    4086:	f3bf 8f6f 	isb	sy
		z_swap(lock, key);
	} else {
		k_spin_unlock(lock, key);
	}
}
    408a:	4770      	bx	lr
    408c:	20000444 	.word	0x20000444

00004090 <k_sched_lock>:
	__asm__ volatile(
    4090:	f04f 0320 	mov.w	r3, #32
    4094:	f3ef 8111 	mrs	r1, BASEPRI
    4098:	f383 8811 	msr	BASEPRI, r3
    409c:	f3bf 8f6f 	isb	sy
	--_current->base.sched_locked;
    40a0:	4b04      	ldr	r3, [pc, #16]	; (40b4 <k_sched_lock+0x24>)
    40a2:	689a      	ldr	r2, [r3, #8]
    40a4:	7bd3      	ldrb	r3, [r2, #15]
    40a6:	3b01      	subs	r3, #1
    40a8:	73d3      	strb	r3, [r2, #15]
	__asm__ volatile(
    40aa:	f381 8811 	msr	BASEPRI, r1
    40ae:	f3bf 8f6f 	isb	sy
void k_sched_lock(void)
{
	LOCKED(&sched_spinlock) {
		z_sched_lock();
	}
}
    40b2:	4770      	bx	lr
    40b4:	20000444 	.word	0x20000444

000040b8 <z_priq_dumb_remove>:
}

void z_priq_dumb_remove(sys_dlist_t *pq, struct k_thread *thread)
{
#if defined(CONFIG_SWAP_NONATOMIC) && defined(CONFIG_SCHED_DUMB)
	if (pq == &_kernel.ready_q.runq && thread == _current &&
    40b8:	4b09      	ldr	r3, [pc, #36]	; (40e0 <z_priq_dumb_remove+0x28>)
    40ba:	f103 022c 	add.w	r2, r3, #44	; 0x2c
    40be:	4282      	cmp	r2, r0
    40c0:	d105      	bne.n	40ce <z_priq_dumb_remove+0x16>
    40c2:	689b      	ldr	r3, [r3, #8]
    40c4:	428b      	cmp	r3, r1
    40c6:	d102      	bne.n	40ce <z_priq_dumb_remove+0x16>
    40c8:	7b4b      	ldrb	r3, [r1, #13]
    40ca:	06db      	lsls	r3, r3, #27
    40cc:	d106      	bne.n	40dc <z_priq_dumb_remove+0x24>
 * @return N/A
 */

static inline void sys_dlist_remove(sys_dnode_t *node)
{
	node->prev->next = node->next;
    40ce:	e9d1 3200 	ldrd	r3, r2, [r1]
    40d2:	6013      	str	r3, [r2, #0]
	node->next->prev = node->prev;
    40d4:	605a      	str	r2, [r3, #4]
	node->next = NULL;
    40d6:	2300      	movs	r3, #0
	node->prev = NULL;
    40d8:	e9c1 3300 	strd	r3, r3, [r1]
#endif

	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));

	sys_dlist_remove(&thread->base.qnode_dlist);
}
    40dc:	4770      	bx	lr
    40de:	bf00      	nop
    40e0:	20000444 	.word	0x20000444

000040e4 <update_cache>:
{
    40e4:	b538      	push	{r3, r4, r5, lr}
    40e6:	4c12      	ldr	r4, [pc, #72]	; (4130 <update_cache+0x4c>)
	if (_current_cpu->pending_abort != NULL) {
    40e8:	6923      	ldr	r3, [r4, #16]
    40ea:	68a2      	ldr	r2, [r4, #8]
{
    40ec:	4601      	mov	r1, r0
	if (_current_cpu->pending_abort != NULL) {
    40ee:	b10b      	cbz	r3, 40f4 <update_cache+0x10>
	return thread ? thread : _current_cpu->idle_thread;
    40f0:	68e5      	ldr	r5, [r4, #12]
    40f2:	e00c      	b.n	410e <update_cache+0x2a>
	thread = _priq_run_best(&_kernel.ready_q.runq);
    40f4:	f104 002c 	add.w	r0, r4, #44	; 0x2c
    40f8:	f001 fdb4 	bl	5c64 <z_priq_dumb_best>
	if (_current->base.thread_state & _THREAD_ABORTING) {
    40fc:	7b53      	ldrb	r3, [r2, #13]
	thread = _priq_run_best(&_kernel.ready_q.runq);
    40fe:	4605      	mov	r5, r0
	if (_current->base.thread_state & _THREAD_ABORTING) {
    4100:	0698      	lsls	r0, r3, #26
		_current->base.thread_state |= _THREAD_DEAD;
    4102:	bf44      	itt	mi
    4104:	f043 0308 	orrmi.w	r3, r3, #8
    4108:	7353      	strbmi	r3, [r2, #13]
	return thread ? thread : _current_cpu->idle_thread;
    410a:	2d00      	cmp	r5, #0
    410c:	d0f0      	beq.n	40f0 <update_cache+0xc>
	if (preempt_ok != 0) {
    410e:	b949      	cbnz	r1, 4124 <update_cache+0x40>
	if (z_is_thread_prevented_from_running(_current)) {
    4110:	7b53      	ldrb	r3, [r2, #13]
    4112:	06db      	lsls	r3, r3, #27
    4114:	d106      	bne.n	4124 <update_cache+0x40>
	if (IS_ENABLED(CONFIG_SWAP_NONATOMIC)
    4116:	69ab      	ldr	r3, [r5, #24]
    4118:	b923      	cbnz	r3, 4124 <update_cache+0x40>
	if (is_preempt(_current) || is_metairq(thread)) {
    411a:	89d3      	ldrh	r3, [r2, #14]
    411c:	2b7f      	cmp	r3, #127	; 0x7f
    411e:	d901      	bls.n	4124 <update_cache+0x40>
		_kernel.ready_q.cache = _current;
    4120:	62a2      	str	r2, [r4, #40]	; 0x28
}
    4122:	bd38      	pop	{r3, r4, r5, pc}
		if (thread != _current) {
    4124:	4295      	cmp	r5, r2
    4126:	d001      	beq.n	412c <update_cache+0x48>
			z_reset_time_slice();
    4128:	f7ff ff5e 	bl	3fe8 <z_reset_time_slice>
		_kernel.ready_q.cache = thread;
    412c:	62a5      	str	r5, [r4, #40]	; 0x28
}
    412e:	e7f8      	b.n	4122 <update_cache+0x3e>
    4130:	20000444 	.word	0x20000444

00004134 <k_sched_unlock>:
{
    4134:	b510      	push	{r4, lr}
	__asm__ volatile(
    4136:	f04f 0320 	mov.w	r3, #32
    413a:	f3ef 8411 	mrs	r4, BASEPRI
    413e:	f383 8811 	msr	BASEPRI, r3
    4142:	f3bf 8f6f 	isb	sy
		++_current->base.sched_locked;
    4146:	4b08      	ldr	r3, [pc, #32]	; (4168 <k_sched_unlock+0x34>)
    4148:	689a      	ldr	r2, [r3, #8]
    414a:	7bd3      	ldrb	r3, [r2, #15]
    414c:	3301      	adds	r3, #1
    414e:	73d3      	strb	r3, [r2, #15]
		update_cache(0);
    4150:	2000      	movs	r0, #0
    4152:	f7ff ffc7 	bl	40e4 <update_cache>
	__asm__ volatile(
    4156:	f384 8811 	msr	BASEPRI, r4
    415a:	f3bf 8f6f 	isb	sy
}
    415e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	z_reschedule_unlocked();
    4162:	f001 bd69 	b.w	5c38 <z_reschedule_unlocked>
    4166:	bf00      	nop
    4168:	20000444 	.word	0x20000444

0000416c <ready_thread>:
{
    416c:	b470      	push	{r4, r5, r6}
	if (!z_is_thread_queued(thread) && z_is_thread_ready(thread)) {
    416e:	f990 200d 	ldrsb.w	r2, [r0, #13]
	return z_is_thread_state_set(thread, _THREAD_QUEUED);
    4172:	7b43      	ldrb	r3, [r0, #13]
    4174:	2a00      	cmp	r2, #0
    4176:	db2c      	blt.n	41d2 <ready_thread+0x66>
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
    4178:	06db      	lsls	r3, r3, #27
    417a:	d12a      	bne.n	41d2 <ready_thread+0x66>

int z_abort_timeout(struct _timeout *to);

static inline bool z_is_inactive_timeout(const struct _timeout *t)
{
	return !sys_dnode_is_linked(&t->node);
    417c:	6983      	ldr	r3, [r0, #24]
    417e:	bb43      	cbnz	r3, 41d2 <ready_thread+0x66>
	return list->head == list;
    4180:	4a15      	ldr	r2, [pc, #84]	; (41d8 <ready_thread+0x6c>)
    4182:	4611      	mov	r1, r2
    4184:	f851 4f2c 	ldr.w	r4, [r1, #44]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
    4188:	428c      	cmp	r4, r1
    418a:	bf18      	it	ne
    418c:	4623      	movne	r3, r4
    418e:	2b00      	cmp	r3, #0
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
    4190:	6b14      	ldr	r4, [r2, #48]	; 0x30
    4192:	bf38      	it	cc
    4194:	2300      	movcc	r3, #0
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    4196:	b1b3      	cbz	r3, 41c6 <ready_thread+0x5a>
	if (thread_1->base.prio < thread_2->base.prio) {
    4198:	f990 600e 	ldrsb.w	r6, [r0, #14]
    419c:	f993 500e 	ldrsb.w	r5, [r3, #14]
    41a0:	42ae      	cmp	r6, r5
    41a2:	db03      	blt.n	41ac <ready_thread+0x40>
	return (node == list->tail) ? NULL : node->next;
    41a4:	42a3      	cmp	r3, r4
    41a6:	d00e      	beq.n	41c6 <ready_thread+0x5a>
    41a8:	681b      	ldr	r3, [r3, #0]
    41aa:	e7f4      	b.n	4196 <ready_thread+0x2a>
	node->prev = successor->prev;
    41ac:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
    41ae:	e9c0 3200 	strd	r3, r2, [r0]
	successor->prev->next = node;
    41b2:	6010      	str	r0, [r2, #0]
	successor->prev = node;
    41b4:	6058      	str	r0, [r3, #4]
	thread->base.thread_state |= states;
    41b6:	7b43      	ldrb	r3, [r0, #13]
    41b8:	f063 037f 	orn	r3, r3, #127	; 0x7f
    41bc:	7343      	strb	r3, [r0, #13]
}
    41be:	bc70      	pop	{r4, r5, r6}
		update_cache(0);
    41c0:	2000      	movs	r0, #0
    41c2:	f7ff bf8f 	b.w	40e4 <update_cache>
	node->prev = list->tail;
    41c6:	e9c0 1400 	strd	r1, r4, [r0]
	list->tail->next = node;
    41ca:	6b13      	ldr	r3, [r2, #48]	; 0x30
    41cc:	6018      	str	r0, [r3, #0]
	list->tail = node;
    41ce:	6310      	str	r0, [r2, #48]	; 0x30
}
    41d0:	e7f1      	b.n	41b6 <ready_thread+0x4a>
}
    41d2:	bc70      	pop	{r4, r5, r6}
    41d4:	4770      	bx	lr
    41d6:	bf00      	nop
    41d8:	20000444 	.word	0x20000444

000041dc <z_sched_start>:
{
    41dc:	b510      	push	{r4, lr}
	__asm__ volatile(
    41de:	f04f 0220 	mov.w	r2, #32
    41e2:	f3ef 8411 	mrs	r4, BASEPRI
    41e6:	f382 8811 	msr	BASEPRI, r2
    41ea:	f3bf 8f6f 	isb	sy
	if (z_has_thread_started(thread)) {
    41ee:	7b42      	ldrb	r2, [r0, #13]
    41f0:	0751      	lsls	r1, r2, #29
    41f2:	d404      	bmi.n	41fe <z_sched_start+0x22>
	__asm__ volatile(
    41f4:	f384 8811 	msr	BASEPRI, r4
    41f8:	f3bf 8f6f 	isb	sy
}
    41fc:	bd10      	pop	{r4, pc}
	thread->base.thread_state &= ~_THREAD_PRESTART;
    41fe:	f022 0204 	bic.w	r2, r2, #4
    4202:	7342      	strb	r2, [r0, #13]
	ready_thread(thread);
    4204:	f7ff ffb2 	bl	416c <ready_thread>
	z_reschedule(&sched_spinlock, key);
    4208:	4621      	mov	r1, r4
    420a:	4802      	ldr	r0, [pc, #8]	; (4214 <z_sched_start+0x38>)
}
    420c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	z_reschedule(&sched_spinlock, key);
    4210:	f7ff bf2c 	b.w	406c <z_reschedule>
    4214:	200008b1 	.word	0x200008b1

00004218 <move_thread_to_end_of_prio_q>:
{
    4218:	b570      	push	{r4, r5, r6, lr}
	if (z_is_thread_queued(thread)) {
    421a:	f990 300d 	ldrsb.w	r3, [r0, #13]
    421e:	2b00      	cmp	r3, #0
{
    4220:	4601      	mov	r1, r0
	if (z_is_thread_queued(thread)) {
    4222:	da02      	bge.n	422a <move_thread_to_end_of_prio_q+0x12>
		_priq_run_remove(&_kernel.ready_q.runq, thread);
    4224:	4817      	ldr	r0, [pc, #92]	; (4284 <move_thread_to_end_of_prio_q+0x6c>)
    4226:	f7ff ff47 	bl	40b8 <z_priq_dumb_remove>
	return list->head == list;
    422a:	4a17      	ldr	r2, [pc, #92]	; (4288 <move_thread_to_end_of_prio_q+0x70>)
    422c:	4610      	mov	r0, r2
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
    422e:	6b14      	ldr	r4, [r2, #48]	; 0x30
	return list->head == list;
    4230:	f850 3f2c 	ldr.w	r3, [r0, #44]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
    4234:	4283      	cmp	r3, r0
    4236:	bf08      	it	eq
    4238:	2300      	moveq	r3, #0
    423a:	2b00      	cmp	r3, #0
    423c:	bf38      	it	cc
    423e:	2300      	movcc	r3, #0
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    4240:	b1d3      	cbz	r3, 4278 <move_thread_to_end_of_prio_q+0x60>
	if (thread_1->base.prio < thread_2->base.prio) {
    4242:	f991 600e 	ldrsb.w	r6, [r1, #14]
    4246:	f993 500e 	ldrsb.w	r5, [r3, #14]
    424a:	42ae      	cmp	r6, r5
    424c:	db03      	blt.n	4256 <move_thread_to_end_of_prio_q+0x3e>
	return (node == list->tail) ? NULL : node->next;
    424e:	42a3      	cmp	r3, r4
    4250:	d012      	beq.n	4278 <move_thread_to_end_of_prio_q+0x60>
    4252:	681b      	ldr	r3, [r3, #0]
    4254:	e7f4      	b.n	4240 <move_thread_to_end_of_prio_q+0x28>
	node->prev = successor->prev;
    4256:	6858      	ldr	r0, [r3, #4]
	node->next = successor;
    4258:	e9c1 3000 	strd	r3, r0, [r1]
	successor->prev->next = node;
    425c:	6001      	str	r1, [r0, #0]
	successor->prev = node;
    425e:	6059      	str	r1, [r3, #4]
	thread->base.thread_state |= states;
    4260:	7b4b      	ldrb	r3, [r1, #13]
	update_cache(thread == _current);
    4262:	6890      	ldr	r0, [r2, #8]
    4264:	f063 037f 	orn	r3, r3, #127	; 0x7f
    4268:	734b      	strb	r3, [r1, #13]
    426a:	1a43      	subs	r3, r0, r1
    426c:	4258      	negs	r0, r3
}
    426e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	update_cache(thread == _current);
    4272:	4158      	adcs	r0, r3
    4274:	f7ff bf36 	b.w	40e4 <update_cache>
	node->prev = list->tail;
    4278:	e9c1 0400 	strd	r0, r4, [r1]
	list->tail->next = node;
    427c:	6b13      	ldr	r3, [r2, #48]	; 0x30
    427e:	6019      	str	r1, [r3, #0]
	list->tail = node;
    4280:	6311      	str	r1, [r2, #48]	; 0x30
}
    4282:	e7ed      	b.n	4260 <move_thread_to_end_of_prio_q+0x48>
    4284:	20000470 	.word	0x20000470
    4288:	20000444 	.word	0x20000444

0000428c <z_time_slice>:
{
    428c:	b570      	push	{r4, r5, r6, lr}
    428e:	4601      	mov	r1, r0
	__asm__ volatile(
    4290:	f04f 0320 	mov.w	r3, #32
    4294:	f3ef 8411 	mrs	r4, BASEPRI
    4298:	f383 8811 	msr	BASEPRI, r3
    429c:	f3bf 8f6f 	isb	sy
	if (pending_current == _current) {
    42a0:	4b16      	ldr	r3, [pc, #88]	; (42fc <z_time_slice+0x70>)
    42a2:	4a17      	ldr	r2, [pc, #92]	; (4300 <z_time_slice+0x74>)
    42a4:	6898      	ldr	r0, [r3, #8]
    42a6:	6815      	ldr	r5, [r2, #0]
    42a8:	42a8      	cmp	r0, r5
    42aa:	461d      	mov	r5, r3
    42ac:	d106      	bne.n	42bc <z_time_slice+0x30>
			z_reset_time_slice();
    42ae:	f7ff fe9b 	bl	3fe8 <z_reset_time_slice>
	__asm__ volatile(
    42b2:	f384 8811 	msr	BASEPRI, r4
    42b6:	f3bf 8f6f 	isb	sy
}
    42ba:	bd70      	pop	{r4, r5, r6, pc}
	pending_current = NULL;
    42bc:	2600      	movs	r6, #0
    42be:	6016      	str	r6, [r2, #0]
	if (slice_time && sliceable(_current)) {
    42c0:	4a10      	ldr	r2, [pc, #64]	; (4304 <z_time_slice+0x78>)
    42c2:	6812      	ldr	r2, [r2, #0]
    42c4:	b1ba      	cbz	r2, 42f6 <z_time_slice+0x6a>
		&& !z_is_idle_thread_object(thread);
    42c6:	89c2      	ldrh	r2, [r0, #14]
    42c8:	2a7f      	cmp	r2, #127	; 0x7f
    42ca:	d814      	bhi.n	42f6 <z_time_slice+0x6a>
		&& !z_is_thread_prevented_from_running(thread)
    42cc:	7b42      	ldrb	r2, [r0, #13]
    42ce:	06d2      	lsls	r2, r2, #27
    42d0:	d111      	bne.n	42f6 <z_time_slice+0x6a>
		&& !z_is_prio_higher(thread->base.prio, slice_max_prio)
    42d2:	4a0d      	ldr	r2, [pc, #52]	; (4308 <z_time_slice+0x7c>)
    42d4:	f990 600e 	ldrsb.w	r6, [r0, #14]
    42d8:	6812      	ldr	r2, [r2, #0]
    42da:	4296      	cmp	r6, r2
    42dc:	db0b      	blt.n	42f6 <z_time_slice+0x6a>
		&& !z_is_idle_thread_object(thread);
    42de:	4a0b      	ldr	r2, [pc, #44]	; (430c <z_time_slice+0x80>)
    42e0:	4290      	cmp	r0, r2
    42e2:	d008      	beq.n	42f6 <z_time_slice+0x6a>
		if (ticks >= _current_cpu->slice_ticks) {
    42e4:	695a      	ldr	r2, [r3, #20]
    42e6:	428a      	cmp	r2, r1
    42e8:	dc02      	bgt.n	42f0 <z_time_slice+0x64>
			move_thread_to_end_of_prio_q(_current);
    42ea:	f7ff ff95 	bl	4218 <move_thread_to_end_of_prio_q>
    42ee:	e7de      	b.n	42ae <z_time_slice+0x22>
			_current_cpu->slice_ticks -= ticks;
    42f0:	1a52      	subs	r2, r2, r1
    42f2:	615a      	str	r2, [r3, #20]
    42f4:	e7dd      	b.n	42b2 <z_time_slice+0x26>
		_current_cpu->slice_ticks = 0;
    42f6:	2300      	movs	r3, #0
    42f8:	616b      	str	r3, [r5, #20]
    42fa:	e7da      	b.n	42b2 <z_time_slice+0x26>
    42fc:	20000444 	.word	0x20000444
    4300:	20000478 	.word	0x20000478
    4304:	20000480 	.word	0x20000480
    4308:	2000047c 	.word	0x2000047c
    430c:	20000168 	.word	0x20000168

00004310 <z_impl_k_thread_suspend>:
{
    4310:	b570      	push	{r4, r5, r6, lr}
    4312:	4604      	mov	r4, r0
	z_add_timeout(&th->base.timeout, z_thread_timeout, ticks);
}

static inline int z_abort_thread_timeout(struct k_thread *thread)
{
	return z_abort_timeout(&thread->base.timeout);
    4314:	3018      	adds	r0, #24
    4316:	f001 fd3e 	bl	5d96 <z_abort_timeout>
	__asm__ volatile(
    431a:	f04f 0320 	mov.w	r3, #32
    431e:	f3ef 8611 	mrs	r6, BASEPRI
    4322:	f383 8811 	msr	BASEPRI, r3
    4326:	f3bf 8f6f 	isb	sy
		if (z_is_thread_queued(thread)) {
    432a:	f994 300d 	ldrsb.w	r3, [r4, #13]
    432e:	2b00      	cmp	r3, #0
    4330:	da07      	bge.n	4342 <z_impl_k_thread_suspend+0x32>
			_priq_run_remove(&_kernel.ready_q.runq, thread);
    4332:	480f      	ldr	r0, [pc, #60]	; (4370 <z_impl_k_thread_suspend+0x60>)
    4334:	4621      	mov	r1, r4
    4336:	f7ff febf 	bl	40b8 <z_priq_dumb_remove>
	thread->base.thread_state &= ~states;
    433a:	7b63      	ldrb	r3, [r4, #13]
    433c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    4340:	7363      	strb	r3, [r4, #13]
		update_cache(thread == _current);
    4342:	4d0c      	ldr	r5, [pc, #48]	; (4374 <z_impl_k_thread_suspend+0x64>)
	thread->base.thread_state |= _THREAD_SUSPENDED;
    4344:	7b63      	ldrb	r3, [r4, #13]
    4346:	68a8      	ldr	r0, [r5, #8]
    4348:	f043 0310 	orr.w	r3, r3, #16
    434c:	7363      	strb	r3, [r4, #13]
    434e:	1b03      	subs	r3, r0, r4
    4350:	4258      	negs	r0, r3
    4352:	4158      	adcs	r0, r3
    4354:	f7ff fec6 	bl	40e4 <update_cache>
	__asm__ volatile(
    4358:	f386 8811 	msr	BASEPRI, r6
    435c:	f3bf 8f6f 	isb	sy
	if (thread == _current) {
    4360:	68ab      	ldr	r3, [r5, #8]
    4362:	42a3      	cmp	r3, r4
    4364:	d103      	bne.n	436e <z_impl_k_thread_suspend+0x5e>
}
    4366:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		z_reschedule_unlocked();
    436a:	f001 bc65 	b.w	5c38 <z_reschedule_unlocked>
}
    436e:	bd70      	pop	{r4, r5, r6, pc}
    4370:	20000470 	.word	0x20000470
    4374:	20000444 	.word	0x20000444

00004378 <z_thread_single_abort>:
{
    4378:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    437c:	4604      	mov	r4, r0
	__asm__ volatile(
    437e:	f04f 0320 	mov.w	r3, #32
    4382:	f3ef 8211 	mrs	r2, BASEPRI
    4386:	f383 8811 	msr	BASEPRI, r3
    438a:	f3bf 8f6f 	isb	sy
	if ((thread->base.thread_state &
    438e:	7b43      	ldrb	r3, [r0, #13]
    4390:	f013 0f28 	tst.w	r3, #40	; 0x28
    4394:	d005      	beq.n	43a2 <z_thread_single_abort+0x2a>
	__asm__ volatile(
    4396:	f382 8811 	msr	BASEPRI, r2
    439a:	f3bf 8f6f 	isb	sy
}
    439e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	thread->base.thread_state |= _THREAD_ABORTING;
    43a2:	f043 0320 	orr.w	r3, r3, #32
    43a6:	7343      	strb	r3, [r0, #13]
    43a8:	f382 8811 	msr	BASEPRI, r2
    43ac:	f3bf 8f6f 	isb	sy
    43b0:	3018      	adds	r0, #24
    43b2:	f001 fcf0 	bl	5d96 <z_abort_timeout>
	__asm__ volatile(
    43b6:	f04f 0320 	mov.w	r3, #32
    43ba:	f3ef 8611 	mrs	r6, BASEPRI
    43be:	f383 8811 	msr	BASEPRI, r3
    43c2:	f3bf 8f6f 	isb	sy
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
    43c6:	7b63      	ldrb	r3, [r4, #13]
    43c8:	06d8      	lsls	r0, r3, #27
    43ca:	d116      	bne.n	43fa <z_thread_single_abort+0x82>
		if (z_is_thread_ready(thread)) {
    43cc:	69a2      	ldr	r2, [r4, #24]
    43ce:	b9a2      	cbnz	r2, 43fa <z_thread_single_abort+0x82>
			if (z_is_thread_queued(thread)) {
    43d0:	0619      	lsls	r1, r3, #24
    43d2:	d507      	bpl.n	43e4 <z_thread_single_abort+0x6c>
				_priq_run_remove(&_kernel.ready_q.runq,
    43d4:	4826      	ldr	r0, [pc, #152]	; (4470 <z_thread_single_abort+0xf8>)
    43d6:	4621      	mov	r1, r4
    43d8:	f7ff fe6e 	bl	40b8 <z_priq_dumb_remove>
	thread->base.thread_state &= ~states;
    43dc:	7b63      	ldrb	r3, [r4, #13]
    43de:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    43e2:	7363      	strb	r3, [r4, #13]
			update_cache(thread == _current);
    43e4:	4b23      	ldr	r3, [pc, #140]	; (4474 <z_thread_single_abort+0xfc>)
    43e6:	6898      	ldr	r0, [r3, #8]
    43e8:	1b02      	subs	r2, r0, r4
    43ea:	4250      	negs	r0, r2
    43ec:	4150      	adcs	r0, r2
    43ee:	f7ff fe79 	bl	40e4 <update_cache>
	sys_dlist_init(&w->waitq);
}

static inline struct k_thread *z_waitq_head(_wait_q_t *w)
{
	return (struct k_thread *)sys_dlist_peek_head(&w->waitq);
    43f2:	f104 0830 	add.w	r8, r4, #48	; 0x30
			waiter->base.pended_on = NULL;
    43f6:	2700      	movs	r7, #0
    43f8:	e01d      	b.n	4436 <z_thread_single_abort+0xbe>
			if (z_is_thread_pending(thread)) {
    43fa:	079b      	lsls	r3, r3, #30
    43fc:	d5f9      	bpl.n	43f2 <z_thread_single_abort+0x7a>
				_priq_wait_remove(&pended_on(thread)->waitq,
    43fe:	68a0      	ldr	r0, [r4, #8]
    4400:	4621      	mov	r1, r4
    4402:	f7ff fe59 	bl	40b8 <z_priq_dumb_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
    4406:	7b63      	ldrb	r3, [r4, #13]
    4408:	f023 0302 	bic.w	r3, r3, #2
    440c:	7363      	strb	r3, [r4, #13]
				thread->base.pended_on = NULL;
    440e:	2300      	movs	r3, #0
    4410:	60a3      	str	r3, [r4, #8]
    4412:	e7ee      	b.n	43f2 <z_thread_single_abort+0x7a>
    4414:	f105 0018 	add.w	r0, r5, #24
    4418:	f001 fcbd 	bl	5d96 <z_abort_timeout>
			_priq_wait_remove(&pended_on(waiter)->waitq, waiter);
    441c:	68a8      	ldr	r0, [r5, #8]
    441e:	4629      	mov	r1, r5
    4420:	f7ff fe4a 	bl	40b8 <z_priq_dumb_remove>
    4424:	7b6b      	ldrb	r3, [r5, #13]
			waiter->base.pended_on = NULL;
    4426:	60af      	str	r7, [r5, #8]
    4428:	f023 0302 	bic.w	r3, r3, #2
    442c:	736b      	strb	r3, [r5, #13]
    442e:	67ef      	str	r7, [r5, #124]	; 0x7c
			ready_thread(waiter);
    4430:	4628      	mov	r0, r5
    4432:	f7ff fe9b 	bl	416c <ready_thread>
	return list->head == list;
    4436:	6b25      	ldr	r5, [r4, #48]	; 0x30
	return sys_dlist_is_empty(list) ? NULL : list->head;
    4438:	4545      	cmp	r5, r8
    443a:	d001      	beq.n	4440 <z_thread_single_abort+0xc8>
		while ((waiter = z_waitq_head(&thread->base.join_waiters)) !=
    443c:	2d00      	cmp	r5, #0
    443e:	d1e9      	bne.n	4414 <z_thread_single_abort+0x9c>
		if (z_is_idle_thread_object(_current)) {
    4440:	4b0c      	ldr	r3, [pc, #48]	; (4474 <z_thread_single_abort+0xfc>)
    4442:	689a      	ldr	r2, [r3, #8]
    4444:	4b0c      	ldr	r3, [pc, #48]	; (4478 <z_thread_single_abort+0x100>)
    4446:	429a      	cmp	r2, r3
    4448:	d102      	bne.n	4450 <z_thread_single_abort+0xd8>
			update_cache(1);
    444a:	2001      	movs	r0, #1
    444c:	f7ff fe4a 	bl	40e4 <update_cache>
		thread->base.thread_state |= _THREAD_DEAD;
    4450:	7b63      	ldrb	r3, [r4, #13]
    4452:	f043 0308 	orr.w	r3, r3, #8
    4456:	7363      	strb	r3, [r4, #13]
		fn_abort = thread->fn_abort;
    4458:	6e23      	ldr	r3, [r4, #96]	; 0x60
	__asm__ volatile(
    445a:	f386 8811 	msr	BASEPRI, r6
    445e:	f3bf 8f6f 	isb	sy
	if (fn_abort != NULL) {
    4462:	2b00      	cmp	r3, #0
    4464:	d09b      	beq.n	439e <z_thread_single_abort+0x26>
		fn_abort(thread);
    4466:	4620      	mov	r0, r4
}
    4468:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		fn_abort(thread);
    446c:	4718      	bx	r3
    446e:	bf00      	nop
    4470:	20000470 	.word	0x20000470
    4474:	20000444 	.word	0x20000444
    4478:	20000168 	.word	0x20000168

0000447c <unready_thread>:
{
    447c:	b508      	push	{r3, lr}
	if (z_is_thread_queued(thread)) {
    447e:	f990 300d 	ldrsb.w	r3, [r0, #13]
    4482:	2b00      	cmp	r3, #0
{
    4484:	4601      	mov	r1, r0
	if (z_is_thread_queued(thread)) {
    4486:	da06      	bge.n	4496 <unready_thread+0x1a>
		_priq_run_remove(&_kernel.ready_q.runq, thread);
    4488:	4807      	ldr	r0, [pc, #28]	; (44a8 <unready_thread+0x2c>)
    448a:	f7ff fe15 	bl	40b8 <z_priq_dumb_remove>
	thread->base.thread_state &= ~states;
    448e:	7b4b      	ldrb	r3, [r1, #13]
    4490:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    4494:	734b      	strb	r3, [r1, #13]
	update_cache(thread == _current);
    4496:	4b05      	ldr	r3, [pc, #20]	; (44ac <unready_thread+0x30>)
    4498:	6898      	ldr	r0, [r3, #8]
    449a:	1a43      	subs	r3, r0, r1
    449c:	4258      	negs	r0, r3
    449e:	4158      	adcs	r0, r3
}
    44a0:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	update_cache(thread == _current);
    44a4:	f7ff be1e 	b.w	40e4 <update_cache>
    44a8:	20000470 	.word	0x20000470
    44ac:	20000444 	.word	0x20000444

000044b0 <pend>:
{
    44b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    44b4:	4606      	mov	r6, r0
    44b6:	4614      	mov	r4, r2
    44b8:	461d      	mov	r5, r3
	__asm__ volatile(
    44ba:	f04f 0320 	mov.w	r3, #32
    44be:	f3ef 8711 	mrs	r7, BASEPRI
    44c2:	f383 8811 	msr	BASEPRI, r3
    44c6:	f3bf 8f6f 	isb	sy
		add_to_waitq_locked(thread, wait_q);
    44ca:	f001 fc05 	bl	5cd8 <add_to_waitq_locked>
	__asm__ volatile(
    44ce:	f387 8811 	msr	BASEPRI, r7
    44d2:	f3bf 8f6f 	isb	sy
	if (!K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    44d6:	1c6b      	adds	r3, r5, #1
    44d8:	bf08      	it	eq
    44da:	f1b4 3fff 	cmpeq.w	r4, #4294967295	; 0xffffffff
    44de:	d008      	beq.n	44f2 <pend+0x42>
	z_add_timeout(&th->base.timeout, z_thread_timeout, ticks);
    44e0:	4622      	mov	r2, r4
    44e2:	462b      	mov	r3, r5
    44e4:	f106 0018 	add.w	r0, r6, #24
    44e8:	4903      	ldr	r1, [pc, #12]	; (44f8 <pend+0x48>)
}
    44ea:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    44ee:	f000 ba75 	b.w	49dc <z_add_timeout>
    44f2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    44f6:	bf00      	nop
    44f8:	00005c99 	.word	0x00005c99

000044fc <z_pend_curr>:
{
    44fc:	b510      	push	{r4, lr}
	pending_current = _current;
    44fe:	4b07      	ldr	r3, [pc, #28]	; (451c <z_pend_curr+0x20>)
    4500:	6898      	ldr	r0, [r3, #8]
    4502:	4b07      	ldr	r3, [pc, #28]	; (4520 <z_pend_curr+0x24>)
{
    4504:	460c      	mov	r4, r1
	pending_current = _current;
    4506:	6018      	str	r0, [r3, #0]
{
    4508:	4611      	mov	r1, r2
	pend(_current, wait_q, timeout);
    450a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
    450e:	f7ff ffcf 	bl	44b0 <pend>
    4512:	4620      	mov	r0, r4
}
    4514:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    4518:	f7fd bd74 	b.w	2004 <arch_swap>
    451c:	20000444 	.word	0x20000444
    4520:	20000478 	.word	0x20000478

00004524 <z_tick_sleep.part.0>:
	z_impl_k_yield();
}
#include <syscalls/k_yield_mrsh.c>
#endif

static int32_t z_tick_sleep(int32_t ticks)
    4524:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    4526:	4605      	mov	r5, r0
#else
	ticks += _TICK_ALIGN;
	timeout = (k_ticks_t) ticks;
#endif

	expected_wakeup_time = ticks + z_tick_get_32();
    4528:	f001 fc75 	bl	5e16 <z_tick_get_32>
    452c:	182c      	adds	r4, r5, r0
	__asm__ volatile(
    452e:	f04f 0320 	mov.w	r3, #32
    4532:	f3ef 8711 	mrs	r7, BASEPRI
    4536:	f383 8811 	msr	BASEPRI, r3
    453a:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&sched_spinlock);

#if defined(CONFIG_TIMESLICING) && defined(CONFIG_SWAP_NONATOMIC)
	pending_current = _current;
    453e:	4e0d      	ldr	r6, [pc, #52]	; (4574 <z_tick_sleep.part.0+0x50>)
    4540:	4b0d      	ldr	r3, [pc, #52]	; (4578 <z_tick_sleep.part.0+0x54>)
    4542:	68b0      	ldr	r0, [r6, #8]
    4544:	6018      	str	r0, [r3, #0]
#endif
	unready_thread(_current);
    4546:	f7ff ff99 	bl	447c <unready_thread>
	z_add_thread_timeout(_current, timeout);
    454a:	68b0      	ldr	r0, [r6, #8]
    454c:	490b      	ldr	r1, [pc, #44]	; (457c <z_tick_sleep.part.0+0x58>)
    454e:	462a      	mov	r2, r5
    4550:	17eb      	asrs	r3, r5, #31
    4552:	3018      	adds	r0, #24
    4554:	f000 fa42 	bl	49dc <z_add_timeout>
	z_mark_thread_as_suspended(_current);
    4558:	68b2      	ldr	r2, [r6, #8]
	thread->base.thread_state |= _THREAD_SUSPENDED;
    455a:	7b53      	ldrb	r3, [r2, #13]
    455c:	f043 0310 	orr.w	r3, r3, #16
    4560:	7353      	strb	r3, [r2, #13]
    4562:	4638      	mov	r0, r7
    4564:	f7fd fd4e 	bl	2004 <arch_swap>

	(void)z_swap(&sched_spinlock, key);

	__ASSERT(!z_is_thread_state_set(_current, _THREAD_SUSPENDED), "");

	ticks = expected_wakeup_time - z_tick_get_32();
    4568:	f001 fc55 	bl	5e16 <z_tick_get_32>
    456c:	1a20      	subs	r0, r4, r0
		return ticks;
	}
#endif

	return 0;
}
    456e:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
    4572:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    4574:	20000444 	.word	0x20000444
    4578:	20000478 	.word	0x20000478
    457c:	00005c99 	.word	0x00005c99

00004580 <z_set_prio>:
{
    4580:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    4584:	4604      	mov	r4, r0
    4586:	f04f 0320 	mov.w	r3, #32
    458a:	f3ef 8811 	mrs	r8, BASEPRI
    458e:	f383 8811 	msr	BASEPRI, r3
    4592:	f3bf 8f6f 	isb	sy
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
    4596:	7b43      	ldrb	r3, [r0, #13]
    4598:	06db      	lsls	r3, r3, #27
    459a:	b24e      	sxtb	r6, r1
    459c:	d12e      	bne.n	45fc <z_set_prio+0x7c>
	return !sys_dnode_is_linked(&t->node);
    459e:	6985      	ldr	r5, [r0, #24]
		if (need_sched) {
    45a0:	bb65      	cbnz	r5, 45fc <z_set_prio+0x7c>
				_priq_run_remove(&_kernel.ready_q.runq, thread);
    45a2:	4f18      	ldr	r7, [pc, #96]	; (4604 <z_set_prio+0x84>)
    45a4:	4621      	mov	r1, r4
    45a6:	f107 002c 	add.w	r0, r7, #44	; 0x2c
    45aa:	f7ff fd85 	bl	40b8 <z_priq_dumb_remove>
	return list->head == list;
    45ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
    45b0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
				thread->base.prio = prio;
    45b2:	73a6      	strb	r6, [r4, #14]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    45b4:	4283      	cmp	r3, r0
    45b6:	bf18      	it	ne
    45b8:	461d      	movne	r5, r3
    45ba:	2d00      	cmp	r5, #0
    45bc:	bf38      	it	cc
    45be:	2500      	movcc	r5, #0
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    45c0:	b1b5      	cbz	r5, 45f0 <z_set_prio+0x70>
	if (thread_1->base.prio < thread_2->base.prio) {
    45c2:	f995 100e 	ldrsb.w	r1, [r5, #14]
    45c6:	42b1      	cmp	r1, r6
    45c8:	dc03      	bgt.n	45d2 <z_set_prio+0x52>
	return (node == list->tail) ? NULL : node->next;
    45ca:	42aa      	cmp	r2, r5
    45cc:	d010      	beq.n	45f0 <z_set_prio+0x70>
    45ce:	682d      	ldr	r5, [r5, #0]
    45d0:	e7f6      	b.n	45c0 <z_set_prio+0x40>
	node->prev = successor->prev;
    45d2:	686a      	ldr	r2, [r5, #4]
	node->next = successor;
    45d4:	e9c4 5200 	strd	r5, r2, [r4]
	successor->prev->next = node;
    45d8:	6014      	str	r4, [r2, #0]
	successor->prev = node;
    45da:	606c      	str	r4, [r5, #4]
			update_cache(1);
    45dc:	2001      	movs	r0, #1
    45de:	f7ff fd81 	bl	40e4 <update_cache>
    45e2:	2001      	movs	r0, #1
	__asm__ volatile(
    45e4:	f388 8811 	msr	BASEPRI, r8
    45e8:	f3bf 8f6f 	isb	sy
}
    45ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	node->prev = list->tail;
    45f0:	e9c4 0200 	strd	r0, r2, [r4]
	list->tail->next = node;
    45f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    45f6:	601c      	str	r4, [r3, #0]
	list->tail = node;
    45f8:	633c      	str	r4, [r7, #48]	; 0x30
}
    45fa:	e7ef      	b.n	45dc <z_set_prio+0x5c>
			thread->base.prio = prio;
    45fc:	73a6      	strb	r6, [r4, #14]
    45fe:	2000      	movs	r0, #0
    4600:	e7f0      	b.n	45e4 <z_set_prio+0x64>
    4602:	bf00      	nop
    4604:	20000444 	.word	0x20000444

00004608 <z_sched_init>:
	list->head = (sys_dnode_t *)list;
    4608:	4b04      	ldr	r3, [pc, #16]	; (461c <z_sched_init+0x14>)
	k_sched_time_slice_set(CONFIG_TIMESLICE_SIZE,
    460a:	2100      	movs	r1, #0
    460c:	f103 022c 	add.w	r2, r3, #44	; 0x2c
	list->tail = (sys_dnode_t *)list;
    4610:	e9c3 220b 	strd	r2, r2, [r3, #44]	; 0x2c
    4614:	4608      	mov	r0, r1
    4616:	f7ff bcfd 	b.w	4014 <k_sched_time_slice_set>
    461a:	bf00      	nop
    461c:	20000444 	.word	0x20000444

00004620 <z_impl_k_yield>:
{
    4620:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (!z_is_idle_thread_object(_current)) {
    4622:	4c24      	ldr	r4, [pc, #144]	; (46b4 <z_impl_k_yield+0x94>)
    4624:	4b24      	ldr	r3, [pc, #144]	; (46b8 <z_impl_k_yield+0x98>)
    4626:	68a2      	ldr	r2, [r4, #8]
    4628:	429a      	cmp	r2, r3
    462a:	d030      	beq.n	468e <z_impl_k_yield+0x6e>
	__asm__ volatile(
    462c:	f04f 0320 	mov.w	r3, #32
    4630:	f3ef 8511 	mrs	r5, BASEPRI
    4634:	f383 8811 	msr	BASEPRI, r3
    4638:	f3bf 8f6f 	isb	sy
				_priq_run_remove(&_kernel.ready_q.runq,
    463c:	68a1      	ldr	r1, [r4, #8]
    463e:	f104 002c 	add.w	r0, r4, #44	; 0x2c
    4642:	f7ff fd39 	bl	40b8 <z_priq_dumb_remove>
	return list->head == list;
    4646:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
			_priq_run_add(&_kernel.ready_q.runq, _current);
    4648:	68a2      	ldr	r2, [r4, #8]
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
    464a:	6b21      	ldr	r1, [r4, #48]	; 0x30
	return sys_dlist_is_empty(list) ? NULL : list->head;
    464c:	4283      	cmp	r3, r0
    464e:	bf08      	it	eq
    4650:	2300      	moveq	r3, #0
    4652:	2b00      	cmp	r3, #0
    4654:	bf38      	it	cc
    4656:	2300      	movcc	r3, #0
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    4658:	b32b      	cbz	r3, 46a6 <z_impl_k_yield+0x86>
	if (thread_1->base.prio < thread_2->base.prio) {
    465a:	f992 700e 	ldrsb.w	r7, [r2, #14]
    465e:	f993 600e 	ldrsb.w	r6, [r3, #14]
    4662:	42b7      	cmp	r7, r6
    4664:	db03      	blt.n	466e <z_impl_k_yield+0x4e>
	return (node == list->tail) ? NULL : node->next;
    4666:	428b      	cmp	r3, r1
    4668:	d01d      	beq.n	46a6 <z_impl_k_yield+0x86>
    466a:	681b      	ldr	r3, [r3, #0]
    466c:	e7f4      	b.n	4658 <z_impl_k_yield+0x38>
	node->prev = successor->prev;
    466e:	6859      	ldr	r1, [r3, #4]
	node->next = successor;
    4670:	e9c2 3100 	strd	r3, r1, [r2]
	successor->prev->next = node;
    4674:	600a      	str	r2, [r1, #0]
	successor->prev = node;
    4676:	605a      	str	r2, [r3, #4]
	thread->base.thread_state |= states;
    4678:	7b53      	ldrb	r3, [r2, #13]
    467a:	f063 037f 	orn	r3, r3, #127	; 0x7f
    467e:	7353      	strb	r3, [r2, #13]
			update_cache(1);
    4680:	2001      	movs	r0, #1
    4682:	f7ff fd2f 	bl	40e4 <update_cache>
	__asm__ volatile(
    4686:	f385 8811 	msr	BASEPRI, r5
    468a:	f3bf 8f6f 	isb	sy
	__asm__ volatile(
    468e:	f04f 0320 	mov.w	r3, #32
    4692:	f3ef 8011 	mrs	r0, BASEPRI
    4696:	f383 8811 	msr	BASEPRI, r3
    469a:	f3bf 8f6f 	isb	sy
}
    469e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    46a2:	f7fd bcaf 	b.w	2004 <arch_swap>
	node->prev = list->tail;
    46a6:	e9c2 0100 	strd	r0, r1, [r2]
	list->tail->next = node;
    46aa:	6b23      	ldr	r3, [r4, #48]	; 0x30
    46ac:	601a      	str	r2, [r3, #0]
	list->tail = node;
    46ae:	6322      	str	r2, [r4, #48]	; 0x30
}
    46b0:	e7e2      	b.n	4678 <z_impl_k_yield+0x58>
    46b2:	bf00      	nop
    46b4:	20000444 	.word	0x20000444
    46b8:	20000168 	.word	0x20000168

000046bc <z_impl_k_sleep>:

int32_t z_impl_k_sleep(k_timeout_t timeout)
{
    46bc:	460b      	mov	r3, r1

	__ASSERT(!arch_is_in_isr(), "");
	sys_trace_void(SYS_TRACE_ID_SLEEP);

	/* in case of K_FOREVER, we suspend */
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    46be:	3301      	adds	r3, #1
    46c0:	bf08      	it	eq
    46c2:	f1b0 3fff 	cmpeq.w	r0, #4294967295	; 0xffffffff
{
    46c6:	b510      	push	{r4, lr}
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    46c8:	d106      	bne.n	46d8 <z_impl_k_sleep+0x1c>
		k_thread_suspend(_current);
    46ca:	4b0b      	ldr	r3, [pc, #44]	; (46f8 <z_impl_k_sleep+0x3c>)
    46cc:	6898      	ldr	r0, [r3, #8]
	z_impl_k_thread_suspend(thread);
    46ce:	f7ff fe1f 	bl	4310 <z_impl_k_thread_suspend>
		return (int32_t) K_TICKS_FOREVER;
    46d2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
#endif

	ticks = z_tick_sleep(ticks);
	sys_trace_end_call(SYS_TRACE_ID_SLEEP);
	return k_ticks_to_ms_floor64(ticks);
}
    46d6:	bd10      	pop	{r4, pc}
	ticks = z_tick_sleep(ticks);
    46d8:	4604      	mov	r4, r0
	if (ticks == 0) {
    46da:	b948      	cbnz	r0, 46f0 <z_impl_k_sleep+0x34>
	z_impl_k_yield();
    46dc:	f7ff ffa0 	bl	4620 <z_impl_k_yield>
		} else {
			return (t * to_hz + off) / from_hz;
    46e0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
    46e4:	fb84 3400 	smull	r3, r4, r4, r0
    46e8:	0bd8      	lsrs	r0, r3, #15
    46ea:	ea40 4044 	orr.w	r0, r0, r4, lsl #17
	return k_ticks_to_ms_floor64(ticks);
    46ee:	e7f2      	b.n	46d6 <z_impl_k_sleep+0x1a>
    46f0:	f7ff ff18 	bl	4524 <z_tick_sleep.part.0>
    46f4:	4604      	mov	r4, r0
    46f6:	e7f3      	b.n	46e0 <z_impl_k_sleep+0x24>
    46f8:	20000444 	.word	0x20000444

000046fc <z_impl_k_current_get>:

#ifdef CONFIG_SMP
	arch_irq_unlock(k);
#endif
	return ret;
}
    46fc:	4b01      	ldr	r3, [pc, #4]	; (4704 <z_impl_k_current_get+0x8>)
    46fe:	6898      	ldr	r0, [r3, #8]
    4700:	4770      	bx	lr
    4702:	bf00      	nop
    4704:	20000444 	.word	0x20000444

00004708 <z_impl_k_sem_give>:
	ARG_UNUSED(sem);
#endif
}

void z_impl_k_sem_give(struct k_sem *sem)
{
    4708:	b538      	push	{r3, r4, r5, lr}
    470a:	4604      	mov	r4, r0
    470c:	f04f 0320 	mov.w	r3, #32
    4710:	f3ef 8511 	mrs	r5, BASEPRI
    4714:	f383 8811 	msr	BASEPRI, r3
    4718:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&lock);
	struct k_thread *thread;

	sys_trace_semaphore_give(sem);
	thread = z_unpend_first_thread(&sem->wait_q);
    471c:	f001 fb07 	bl	5d2e <z_unpend_first_thread>

	if (thread != NULL) {
    4720:	b148      	cbz	r0, 4736 <z_impl_k_sem_give+0x2e>
    4722:	2200      	movs	r2, #0
    4724:	67c2      	str	r2, [r0, #124]	; 0x7c
		arch_thread_return_value_set(thread, 0);
		z_ready_thread(thread);
    4726:	f001 faa7 	bl	5c78 <z_ready_thread>
	} else {
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
		handle_poll_events(sem);
	}

	z_reschedule(&lock, key);
    472a:	4629      	mov	r1, r5
    472c:	4805      	ldr	r0, [pc, #20]	; (4744 <z_impl_k_sem_give+0x3c>)
	sys_trace_end_call(SYS_TRACE_ID_SEMA_GIVE);
}
    472e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_reschedule(&lock, key);
    4732:	f7ff bc9b 	b.w	406c <z_reschedule>
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
    4736:	e9d4 3202 	ldrd	r3, r2, [r4, #8]
    473a:	429a      	cmp	r2, r3
    473c:	bf18      	it	ne
    473e:	3301      	addne	r3, #1
    4740:	60a3      	str	r3, [r4, #8]
		handle_poll_events(sem);
    4742:	e7f2      	b.n	472a <z_impl_k_sem_give+0x22>
    4744:	200008b1 	.word	0x200008b1

00004748 <z_impl_k_sem_take>:
}
#include <syscalls/k_sem_give_mrsh.c>
#endif

int z_impl_k_sem_take(struct k_sem *sem, k_timeout_t timeout)
{
    4748:	b537      	push	{r0, r1, r2, r4, r5, lr}
    474a:	4614      	mov	r4, r2
    474c:	461d      	mov	r5, r3
    474e:	f04f 0320 	mov.w	r3, #32
    4752:	f3ef 8111 	mrs	r1, BASEPRI
    4756:	f383 8811 	msr	BASEPRI, r3
    475a:	f3bf 8f6f 	isb	sy
		  K_TIMEOUT_EQ(timeout, K_NO_WAIT)), "");

	k_spinlock_key_t key = k_spin_lock(&lock);
	sys_trace_semaphore_take(sem);

	if (likely(sem->count > 0U)) {
    475e:	6883      	ldr	r3, [r0, #8]
    4760:	b143      	cbz	r3, 4774 <z_impl_k_sem_take+0x2c>
		sem->count--;
    4762:	3b01      	subs	r3, #1
    4764:	6083      	str	r3, [r0, #8]
	__asm__ volatile(
    4766:	f381 8811 	msr	BASEPRI, r1
    476a:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);
		ret = 0;
    476e:	2000      	movs	r0, #0
	ret = z_pend_curr(&lock, key, &sem->wait_q, timeout);

out:
	sys_trace_end_call(SYS_TRACE_ID_SEMA_TAKE);
	return ret;
}
    4770:	b003      	add	sp, #12
    4772:	bd30      	pop	{r4, r5, pc}
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
    4774:	ea54 0305 	orrs.w	r3, r4, r5
    4778:	d106      	bne.n	4788 <z_impl_k_sem_take+0x40>
    477a:	f381 8811 	msr	BASEPRI, r1
    477e:	f3bf 8f6f 	isb	sy
		ret = -EBUSY;
    4782:	f06f 000f 	mvn.w	r0, #15
    4786:	e7f3      	b.n	4770 <z_impl_k_sem_take+0x28>
	ret = z_pend_curr(&lock, key, &sem->wait_q, timeout);
    4788:	4602      	mov	r2, r0
    478a:	e9cd 4500 	strd	r4, r5, [sp]
    478e:	4802      	ldr	r0, [pc, #8]	; (4798 <z_impl_k_sem_take+0x50>)
    4790:	f7ff feb4 	bl	44fc <z_pend_curr>
	return ret;
    4794:	e7ec      	b.n	4770 <z_impl_k_sem_take+0x28>
    4796:	bf00      	nop
    4798:	200008b1 	.word	0x200008b1

0000479c <z_setup_new_thread>:
char *z_setup_new_thread(struct k_thread *new_thread,
			 k_thread_stack_t *stack, size_t stack_size,
			 k_thread_entry_t entry,
			 void *p1, void *p2, void *p3,
			 int prio, uint32_t options, const char *name)
{
    479c:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
	sys_dlist_init(&w->waitq);
    47a0:	f100 0530 	add.w	r5, r0, #48	; 0x30
	list->tail = (sys_dnode_t *)list;
    47a4:	e9c0 550c 	strd	r5, r5, [r0, #48]	; 0x30
void z_init_thread_base(struct _thread_base *thread_base, int priority,
		       uint32_t initial_state, unsigned int options)
{
	/* k_q_node is initialized upon first insertion in a list */

	thread_base->user_options = (uint8_t)options;
    47a8:	9d0e      	ldr	r5, [sp, #56]	; 0x38
    47aa:	7305      	strb	r5, [r0, #12]
	thread_base->thread_state = (uint8_t)initial_state;
    47ac:	2504      	movs	r5, #4
    47ae:	7345      	strb	r5, [r0, #13]
{
    47b0:	460f      	mov	r7, r1

	thread_base->prio = priority;
    47b2:	9d0d      	ldr	r5, [sp, #52]	; 0x34
    47b4:	7385      	strb	r5, [r0, #14]
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
    47b6:	1dd6      	adds	r6, r2, #7

	thread_base->sched_locked = 0U;
    47b8:	2500      	movs	r5, #0
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
    47ba:	9a0c      	ldr	r2, [sp, #48]	; 0x30
	thread_base->sched_locked = 0U;
    47bc:	73c5      	strb	r5, [r0, #15]
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
    47be:	f026 0607 	bic.w	r6, r6, #7

#define K_KERNEL_STACK_SIZEOF(sym) (sizeof(sym) - K_KERNEL_STACK_RESERVED)

static inline char *Z_KERNEL_STACK_BUFFER(k_thread_stack_t *sym)
{
	return (char *)sym + K_KERNEL_STACK_RESERVED;
    47c2:	3720      	adds	r7, #32
	node->prev = NULL;
    47c4:	e9c0 5506 	strd	r5, r5, [r0, #24]
	new_thread->stack_info.size = stack_buf_size;
    47c8:	e9c0 761a 	strd	r7, r6, [r0, #104]	; 0x68
	new_thread->stack_info.delta = delta;
    47cc:	6705      	str	r5, [r0, #112]	; 0x70
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
    47ce:	f106 0820 	add.w	r8, r6, #32
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
    47d2:	9202      	str	r2, [sp, #8]
    47d4:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    47d6:	9201      	str	r2, [sp, #4]
	stack_ptr = (char *)stack + stack_obj_size;
    47d8:	4488      	add	r8, r1
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
    47da:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    47dc:	9200      	str	r2, [sp, #0]
    47de:	4642      	mov	r2, r8
{
    47e0:	4604      	mov	r4, r0
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
    47e2:	f7fd fc5f 	bl	20a4 <arch_new_thread>
	if (!_current) {
    47e6:	4b05      	ldr	r3, [pc, #20]	; (47fc <z_setup_new_thread+0x60>)
    47e8:	689b      	ldr	r3, [r3, #8]
	new_thread->fn_abort = NULL;
    47ea:	e9c4 5517 	strd	r5, r5, [r4, #92]	; 0x5c
	if (!_current) {
    47ee:	b103      	cbz	r3, 47f2 <z_setup_new_thread+0x56>
	new_thread->resource_pool = _current->resource_pool;
    47f0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
	return stack_ptr;
    47f2:	6763      	str	r3, [r4, #116]	; 0x74
}
    47f4:	4640      	mov	r0, r8
    47f6:	b004      	add	sp, #16
    47f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    47fc:	20000444 	.word	0x20000444

00004800 <z_impl_k_thread_create>:
{
    4800:	b5f0      	push	{r4, r5, r6, r7, lr}
    4802:	b087      	sub	sp, #28
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
    4804:	2500      	movs	r5, #0
    4806:	9505      	str	r5, [sp, #20]
    4808:	9d10      	ldr	r5, [sp, #64]	; 0x40
    480a:	9504      	str	r5, [sp, #16]
    480c:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
    480e:	9503      	str	r5, [sp, #12]
    4810:	9d0e      	ldr	r5, [sp, #56]	; 0x38
    4812:	9502      	str	r5, [sp, #8]
{
    4814:	e9dd 6712 	ldrd	r6, r7, [sp, #72]	; 0x48
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
    4818:	9d0d      	ldr	r5, [sp, #52]	; 0x34
    481a:	9501      	str	r5, [sp, #4]
    481c:	9d0c      	ldr	r5, [sp, #48]	; 0x30
    481e:	9500      	str	r5, [sp, #0]
{
    4820:	4604      	mov	r4, r0
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
    4822:	f7ff ffbb 	bl	479c <z_setup_new_thread>
	if (!K_TIMEOUT_EQ(delay, K_FOREVER)) {
    4826:	1c7b      	adds	r3, r7, #1
    4828:	bf08      	it	eq
    482a:	f1b6 3fff 	cmpeq.w	r6, #4294967295	; 0xffffffff
    482e:	d005      	beq.n	483c <z_impl_k_thread_create+0x3c>
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
    4830:	ea56 0307 	orrs.w	r3, r6, r7
    4834:	d105      	bne.n	4842 <z_impl_k_thread_create+0x42>
	z_sched_start(thread);
    4836:	4620      	mov	r0, r4
    4838:	f7ff fcd0 	bl	41dc <z_sched_start>
}
    483c:	4620      	mov	r0, r4
    483e:	b007      	add	sp, #28
    4840:	bdf0      	pop	{r4, r5, r6, r7, pc}
	z_add_timeout(&th->base.timeout, z_thread_timeout, ticks);
    4842:	4904      	ldr	r1, [pc, #16]	; (4854 <z_impl_k_thread_create+0x54>)
    4844:	4632      	mov	r2, r6
    4846:	463b      	mov	r3, r7
    4848:	f104 0018 	add.w	r0, r4, #24
    484c:	f000 f8c6 	bl	49dc <z_add_timeout>
    4850:	e7f4      	b.n	483c <z_impl_k_thread_create+0x3c>
    4852:	bf00      	nop
    4854:	00005c99 	.word	0x00005c99

00004858 <z_init_static_threads>:
{
    4858:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	_FOREACH_STATIC_THREAD(thread_data) {
    485c:	4e2a      	ldr	r6, [pc, #168]	; (4908 <z_init_static_threads+0xb0>)
    485e:	4d2b      	ldr	r5, [pc, #172]	; (490c <z_init_static_threads+0xb4>)
{
    4860:	b086      	sub	sp, #24
    4862:	46b0      	mov	r8, r6
	_FOREACH_STATIC_THREAD(thread_data) {
    4864:	42b5      	cmp	r5, r6
    4866:	f105 0430 	add.w	r4, r5, #48	; 0x30
    486a:	d310      	bcc.n	488e <z_init_static_threads+0x36>
	k_sched_lock();
    486c:	f7ff fc10 	bl	4090 <k_sched_lock>
	_FOREACH_STATIC_THREAD(thread_data) {
    4870:	4c26      	ldr	r4, [pc, #152]	; (490c <z_init_static_threads+0xb4>)
    4872:	f8df a09c 	ldr.w	sl, [pc, #156]	; 4910 <z_init_static_threads+0xb8>
    4876:	f44f 4900 	mov.w	r9, #32768	; 0x8000
    487a:	f240 36e7 	movw	r6, #999	; 0x3e7
    487e:	2700      	movs	r7, #0
    4880:	4544      	cmp	r4, r8
    4882:	d321      	bcc.n	48c8 <z_init_static_threads+0x70>
}
    4884:	b006      	add	sp, #24
    4886:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	k_sched_unlock();
    488a:	f7ff bc53 	b.w	4134 <k_sched_unlock>
		z_setup_new_thread(
    488e:	f854 3c04 	ldr.w	r3, [r4, #-4]
    4892:	9305      	str	r3, [sp, #20]
    4894:	f854 3c10 	ldr.w	r3, [r4, #-16]
    4898:	9304      	str	r3, [sp, #16]
    489a:	f854 3c14 	ldr.w	r3, [r4, #-20]
    489e:	9303      	str	r3, [sp, #12]
    48a0:	f854 3c18 	ldr.w	r3, [r4, #-24]
    48a4:	9302      	str	r3, [sp, #8]
    48a6:	f854 3c1c 	ldr.w	r3, [r4, #-28]
    48aa:	9301      	str	r3, [sp, #4]
    48ac:	f854 3c20 	ldr.w	r3, [r4, #-32]
    48b0:	9300      	str	r3, [sp, #0]
    48b2:	e954 230a 	ldrd	r2, r3, [r4, #-40]	; 0x28
    48b6:	e954 010c 	ldrd	r0, r1, [r4, #-48]	; 0x30
    48ba:	f7ff ff6f 	bl	479c <z_setup_new_thread>
		thread_data->init_thread->init_data = thread_data;
    48be:	f854 3c30 	ldr.w	r3, [r4, #-48]
    48c2:	65dd      	str	r5, [r3, #92]	; 0x5c
    48c4:	4625      	mov	r5, r4
    48c6:	e7cd      	b.n	4864 <z_init_static_threads+0xc>
		if (thread_data->init_delay != K_TICKS_FOREVER) {
    48c8:	6a63      	ldr	r3, [r4, #36]	; 0x24
    48ca:	1c5a      	adds	r2, r3, #1
    48cc:	d00d      	beq.n	48ea <z_init_static_threads+0x92>
					    K_MSEC(thread_data->init_delay));
    48ce:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
    48d2:	4630      	mov	r0, r6
    48d4:	4639      	mov	r1, r7
    48d6:	fbc9 0103 	smlal	r0, r1, r9, r3
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
    48da:	42b9      	cmp	r1, r7
    48dc:	bf08      	it	eq
    48de:	42b0      	cmpeq	r0, r6
			schedule_new_thread(thread_data->init_thread,
    48e0:	6825      	ldr	r5, [r4, #0]
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
    48e2:	d104      	bne.n	48ee <z_init_static_threads+0x96>
	z_sched_start(thread);
    48e4:	4628      	mov	r0, r5
    48e6:	f7ff fc79 	bl	41dc <z_sched_start>
	_FOREACH_STATIC_THREAD(thread_data) {
    48ea:	3430      	adds	r4, #48	; 0x30
    48ec:	e7c8      	b.n	4880 <z_init_static_threads+0x28>
    48ee:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    48f2:	2300      	movs	r3, #0
    48f4:	f7fb fbf2 	bl	dc <__aeabi_uldivmod>
    48f8:	4602      	mov	r2, r0
    48fa:	460b      	mov	r3, r1
    48fc:	f105 0018 	add.w	r0, r5, #24
    4900:	4651      	mov	r1, sl
    4902:	f000 f86b 	bl	49dc <z_add_timeout>
    4906:	e7f0      	b.n	48ea <z_init_static_threads+0x92>
    4908:	2000008c 	.word	0x2000008c
    490c:	2000008c 	.word	0x2000008c
    4910:	00005c99 	.word	0x00005c99

00004914 <z_self_abort>:
#include <syscall_handler.h>
#include <logging/log.h>
LOG_MODULE_DECLARE(os);

FUNC_NORETURN void z_self_abort(void)
{
    4914:	b508      	push	{r3, lr}
	__asm__ volatile(
    4916:	f04f 0320 	mov.w	r3, #32
    491a:	f3ef 8411 	mrs	r4, BASEPRI
    491e:	f383 8811 	msr	BASEPRI, r3
    4922:	f3bf 8f6f 	isb	sy
	 * while we set this up
	 */
	key = arch_irq_lock();
	cpu = _current_cpu;
	__ASSERT(cpu->pending_abort == NULL, "already have a thread to abort");
	cpu->pending_abort = _current;
    4926:	4b04      	ldr	r3, [pc, #16]	; (4938 <z_self_abort+0x24>)
    4928:	6898      	ldr	r0, [r3, #8]
    492a:	6118      	str	r0, [r3, #16]
	z_impl_k_thread_suspend(thread);
    492c:	f7ff fcf0 	bl	4310 <z_impl_k_thread_suspend>
    4930:	4620      	mov	r0, r4
    4932:	f7fd fb67 	bl	2004 <arch_swap>
		_current, cpu->idle_thread);

	k_thread_suspend(_current);
	z_swap_irqlock(key);
	__ASSERT(false, "should never get here");
	CODE_UNREACHABLE;
    4936:	bf00      	nop
    4938:	20000444 	.word	0x20000444

0000493c <elapsed>:
	sys_dlist_remove(&t->node);
}

static int32_t elapsed(void)
{
	return announce_remaining == 0 ? z_clock_elapsed() : 0U;
    493c:	4b03      	ldr	r3, [pc, #12]	; (494c <elapsed+0x10>)
    493e:	681b      	ldr	r3, [r3, #0]
    4940:	b90b      	cbnz	r3, 4946 <elapsed+0xa>
    4942:	f7fd baa5 	b.w	1e90 <z_clock_elapsed>
}
    4946:	2000      	movs	r0, #0
    4948:	4770      	bx	lr
    494a:	bf00      	nop
    494c:	20000484 	.word	0x20000484

00004950 <remove_timeout>:
{
    4950:	b530      	push	{r4, r5, lr}
    4952:	6803      	ldr	r3, [r0, #0]
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
    4954:	b168      	cbz	r0, 4972 <remove_timeout+0x22>
    4956:	4a0a      	ldr	r2, [pc, #40]	; (4980 <remove_timeout+0x30>)
	return (node == list->tail) ? NULL : node->next;
    4958:	6852      	ldr	r2, [r2, #4]
    495a:	4290      	cmp	r0, r2
    495c:	d009      	beq.n	4972 <remove_timeout+0x22>
	if (next(t) != NULL) {
    495e:	b143      	cbz	r3, 4972 <remove_timeout+0x22>
		next(t)->dticks += t->dticks;
    4960:	e9d3 2104 	ldrd	r2, r1, [r3, #16]
    4964:	e9d0 4504 	ldrd	r4, r5, [r0, #16]
    4968:	1912      	adds	r2, r2, r4
    496a:	eb45 0101 	adc.w	r1, r5, r1
    496e:	e9c3 2104 	strd	r2, r1, [r3, #16]
	node->prev->next = node->next;
    4972:	6842      	ldr	r2, [r0, #4]
    4974:	6013      	str	r3, [r2, #0]
	node->next->prev = node->prev;
    4976:	605a      	str	r2, [r3, #4]
	node->next = NULL;
    4978:	2300      	movs	r3, #0
	node->prev = NULL;
    497a:	e9c0 3300 	strd	r3, r3, [r0]
}
    497e:	bd30      	pop	{r4, r5, pc}
    4980:	20000030 	.word	0x20000030

00004984 <next_timeout>:

static int32_t next_timeout(void)
{
    4984:	b538      	push	{r3, r4, r5, lr}
	return list->head == list;
    4986:	4b13      	ldr	r3, [pc, #76]	; (49d4 <next_timeout+0x50>)
    4988:	681c      	ldr	r4, [r3, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    498a:	429c      	cmp	r4, r3
    498c:	bf08      	it	eq
    498e:	2400      	moveq	r4, #0
	struct _timeout *to = first();
	int32_t ticks_elapsed = elapsed();
    4990:	f7ff ffd4 	bl	493c <elapsed>
    4994:	4605      	mov	r5, r0
	int32_t ret = to == NULL ? MAX_WAIT
    4996:	b1bc      	cbz	r4, 49c8 <next_timeout+0x44>
		: CLAMP(to->dticks - ticks_elapsed, 0, MAX_WAIT);
    4998:	e9d4 0104 	ldrd	r0, r1, [r4, #16]
    499c:	1b40      	subs	r0, r0, r5
    499e:	eb61 71e5 	sbc.w	r1, r1, r5, asr #31
	int32_t ret = to == NULL ? MAX_WAIT
    49a2:	2801      	cmp	r0, #1
    49a4:	f171 0300 	sbcs.w	r3, r1, #0
    49a8:	db11      	blt.n	49ce <next_timeout+0x4a>
		: CLAMP(to->dticks - ticks_elapsed, 0, MAX_WAIT);
    49aa:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
    49ae:	2300      	movs	r3, #0
    49b0:	4282      	cmp	r2, r0
    49b2:	eb73 0401 	sbcs.w	r4, r3, r1
    49b6:	da00      	bge.n	49ba <next_timeout+0x36>
    49b8:	4610      	mov	r0, r2

#ifdef CONFIG_TIMESLICING
	if (_current_cpu->slice_ticks && _current_cpu->slice_ticks < ret) {
    49ba:	4b07      	ldr	r3, [pc, #28]	; (49d8 <next_timeout+0x54>)
    49bc:	695b      	ldr	r3, [r3, #20]
    49be:	b113      	cbz	r3, 49c6 <next_timeout+0x42>
    49c0:	4298      	cmp	r0, r3
    49c2:	bfa8      	it	ge
    49c4:	4618      	movge	r0, r3
		ret = _current_cpu->slice_ticks;
	}
#endif
	return ret;
}
    49c6:	bd38      	pop	{r3, r4, r5, pc}
	int32_t ret = to == NULL ? MAX_WAIT
    49c8:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
    49cc:	e7f5      	b.n	49ba <next_timeout+0x36>
    49ce:	2000      	movs	r0, #0
    49d0:	e7f3      	b.n	49ba <next_timeout+0x36>
    49d2:	bf00      	nop
    49d4:	20000030 	.word	0x20000030
    49d8:	20000444 	.word	0x20000444

000049dc <z_add_timeout>:

void z_add_timeout(struct _timeout *to, _timeout_func_t fn,
		   k_timeout_t timeout)
{
    49dc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    49e0:	9101      	str	r1, [sp, #4]
    49e2:	4619      	mov	r1, r3
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    49e4:	1c4b      	adds	r3, r1, #1
    49e6:	bf08      	it	eq
    49e8:	f1b2 3fff 	cmpeq.w	r2, #4294967295	; 0xffffffff
{
    49ec:	4682      	mov	sl, r0
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    49ee:	d06c      	beq.n	4aca <z_add_timeout+0xee>
#endif

#ifdef CONFIG_LEGACY_TIMEOUT_API
	k_ticks_t ticks = timeout;
#else
	k_ticks_t ticks = timeout.ticks + 1;
    49f0:	1c54      	adds	r4, r2, #1

	if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) && Z_TICK_ABS(ticks) >= 0) {
    49f2:	f06f 0301 	mvn.w	r3, #1
	k_ticks_t ticks = timeout.ticks + 1;
    49f6:	f141 0500 	adc.w	r5, r1, #0
	if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) && Z_TICK_ABS(ticks) >= 0) {
    49fa:	f04f 3bff 	mov.w	fp, #4294967295	; 0xffffffff
    49fe:	ebb3 0804 	subs.w	r8, r3, r4
    4a02:	eb6b 0905 	sbc.w	r9, fp, r5
    4a06:	f1b8 0f00 	cmp.w	r8, #0
    4a0a:	f179 0300 	sbcs.w	r3, r9, #0
    4a0e:	db0f      	blt.n	4a30 <z_add_timeout+0x54>
		ticks = Z_TICK_ABS(ticks) - (curr_tick + elapsed());
    4a10:	f7ff ff94 	bl	493c <elapsed>
    4a14:	4a33      	ldr	r2, [pc, #204]	; (4ae4 <z_add_timeout+0x108>)
    4a16:	e9d2 1c00 	ldrd	r1, ip, [r2]
    4a1a:	f06f 0301 	mvn.w	r3, #1
    4a1e:	1a5b      	subs	r3, r3, r1
    4a20:	eb6b 020c 	sbc.w	r2, fp, ip
    4a24:	1b1e      	subs	r6, r3, r4
    4a26:	eb62 0705 	sbc.w	r7, r2, r5
    4a2a:	1a34      	subs	r4, r6, r0
    4a2c:	eb67 75e0 	sbc.w	r5, r7, r0, asr #31
	}
#endif

	__ASSERT(!sys_dnode_is_linked(&to->node), "");
	to->fn = fn;
    4a30:	9b01      	ldr	r3, [sp, #4]
    4a32:	f8ca 3008 	str.w	r3, [sl, #8]
    4a36:	f04f 0320 	mov.w	r3, #32
    4a3a:	f3ef 8611 	mrs	r6, BASEPRI
    4a3e:	f383 8811 	msr	BASEPRI, r3
    4a42:	f3bf 8f6f 	isb	sy
	ticks = MAX(1, ticks);

	LOCKED(&timeout_lock) {
		struct _timeout *t;

		to->dticks = ticks + elapsed();
    4a46:	f7ff ff79 	bl	493c <elapsed>
	ticks = MAX(1, ticks);
    4a4a:	2c01      	cmp	r4, #1
    4a4c:	f175 0300 	sbcs.w	r3, r5, #0
	return list->head == list;
    4a50:	4b25      	ldr	r3, [pc, #148]	; (4ae8 <z_add_timeout+0x10c>)
    4a52:	bfb8      	it	lt
    4a54:	2401      	movlt	r4, #1
    4a56:	681a      	ldr	r2, [r3, #0]
    4a58:	bfb8      	it	lt
    4a5a:	2500      	movlt	r5, #0
		to->dticks = ticks + elapsed();
    4a5c:	1824      	adds	r4, r4, r0
    4a5e:	eb45 75e0 	adc.w	r5, r5, r0, asr #31
	return sys_dlist_is_empty(list) ? NULL : list->head;
    4a62:	429a      	cmp	r2, r3
    4a64:	e9ca 4504 	strd	r4, r5, [sl, #16]
    4a68:	d001      	beq.n	4a6e <z_add_timeout+0x92>
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
    4a6a:	685f      	ldr	r7, [r3, #4]
		for (t = first(); t != NULL; t = next(t)) {
    4a6c:	b952      	cbnz	r2, 4a84 <z_add_timeout+0xa8>
	node->prev = list->tail;
    4a6e:	685a      	ldr	r2, [r3, #4]
    4a70:	f8ca 2004 	str.w	r2, [sl, #4]
	list->tail->next = node;
    4a74:	685a      	ldr	r2, [r3, #4]
	node->next = list;
    4a76:	f8ca 3000 	str.w	r3, [sl]
	list->tail->next = node;
    4a7a:	f8c2 a000 	str.w	sl, [r2]
	list->tail = node;
    4a7e:	f8c3 a004 	str.w	sl, [r3, #4]
}
    4a82:	e014      	b.n	4aae <z_add_timeout+0xd2>
			if (t->dticks > to->dticks) {
    4a84:	e9d2 8904 	ldrd	r8, r9, [r2, #16]
    4a88:	e9da 4504 	ldrd	r4, r5, [sl, #16]
    4a8c:	4544      	cmp	r4, r8
    4a8e:	eb75 0109 	sbcs.w	r1, r5, r9
    4a92:	da1d      	bge.n	4ad0 <z_add_timeout+0xf4>
				t->dticks -= to->dticks;
    4a94:	ebb8 0004 	subs.w	r0, r8, r4
    4a98:	eb69 0105 	sbc.w	r1, r9, r5
    4a9c:	e9c2 0104 	strd	r0, r1, [r2, #16]
	node->prev = successor->prev;
    4aa0:	6851      	ldr	r1, [r2, #4]
	node->next = successor;
    4aa2:	e9ca 2100 	strd	r2, r1, [sl]
	successor->prev->next = node;
    4aa6:	f8c1 a000 	str.w	sl, [r1]
	successor->prev = node;
    4aaa:	f8c2 a004 	str.w	sl, [r2, #4]
	return list->head == list;
    4aae:	681a      	ldr	r2, [r3, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    4ab0:	429a      	cmp	r2, r3
    4ab2:	d006      	beq.n	4ac2 <z_add_timeout+0xe6>

		if (t == NULL) {
			sys_dlist_append(&timeout_list, &to->node);
		}

		if (to == first()) {
    4ab4:	4592      	cmp	sl, r2
    4ab6:	d104      	bne.n	4ac2 <z_add_timeout+0xe6>
			z_clock_set_timeout(next_timeout(), false);
    4ab8:	f7ff ff64 	bl	4984 <next_timeout>
    4abc:	2100      	movs	r1, #0
    4abe:	f7fd f981 	bl	1dc4 <z_clock_set_timeout>
	__asm__ volatile(
    4ac2:	f386 8811 	msr	BASEPRI, r6
    4ac6:	f3bf 8f6f 	isb	sy
		}
	}
}
    4aca:	b003      	add	sp, #12
    4acc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			to->dticks -= t->dticks;
    4ad0:	ebb4 0008 	subs.w	r0, r4, r8
    4ad4:	eb65 0109 	sbc.w	r1, r5, r9
	return (node == list->tail) ? NULL : node->next;
    4ad8:	42ba      	cmp	r2, r7
    4ada:	e9ca 0104 	strd	r0, r1, [sl, #16]
    4ade:	d0c6      	beq.n	4a6e <z_add_timeout+0x92>
    4ae0:	6812      	ldr	r2, [r2, #0]
    4ae2:	e7c3      	b.n	4a6c <z_add_timeout+0x90>
    4ae4:	20000268 	.word	0x20000268
    4ae8:	20000030 	.word	0x20000030

00004aec <z_clock_announce>:
		}
	}
}

void z_clock_announce(int32_t ticks)
{
    4aec:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    4af0:	4606      	mov	r6, r0
#ifdef CONFIG_TIMESLICING
	z_time_slice(ticks);
    4af2:	f7ff fbcb 	bl	428c <z_time_slice>
	__asm__ volatile(
    4af6:	f04f 0320 	mov.w	r3, #32
    4afa:	f3ef 8411 	mrs	r4, BASEPRI
    4afe:	f383 8811 	msr	BASEPRI, r3
    4b02:	f3bf 8f6f 	isb	sy
#endif

	k_spinlock_key_t key = k_spin_lock(&timeout_lock);

	announce_remaining = ticks;
    4b06:	4d2c      	ldr	r5, [pc, #176]	; (4bb8 <z_clock_announce+0xcc>)
    4b08:	f8df a0b0 	ldr.w	sl, [pc, #176]	; 4bbc <z_clock_announce+0xd0>
	return list->head == list;
    4b0c:	f8df b0b0 	ldr.w	fp, [pc, #176]	; 4bc0 <z_clock_announce+0xd4>
    4b10:	602e      	str	r6, [r5, #0]

	while (first() != NULL && first()->dticks <= announce_remaining) {
    4b12:	4651      	mov	r1, sl
    4b14:	f8d5 c000 	ldr.w	ip, [r5]
    4b18:	f8db 0000 	ldr.w	r0, [fp]
    4b1c:	4662      	mov	r2, ip
    4b1e:	17d3      	asrs	r3, r2, #31
	return sys_dlist_is_empty(list) ? NULL : list->head;
    4b20:	4558      	cmp	r0, fp
    4b22:	e9da 8900 	ldrd	r8, r9, [sl]
    4b26:	e9cd 2300 	strd	r2, r3, [sp]
    4b2a:	d00d      	beq.n	4b48 <z_clock_announce+0x5c>
    4b2c:	b160      	cbz	r0, 4b48 <z_clock_announce+0x5c>
    4b2e:	e9d0 6704 	ldrd	r6, r7, [r0, #16]
    4b32:	45b4      	cmp	ip, r6
    4b34:	41bb      	sbcs	r3, r7
    4b36:	da1e      	bge.n	4b76 <z_clock_announce+0x8a>
		t->fn(t);
		key = k_spin_lock(&timeout_lock);
	}

	if (first() != NULL) {
		first()->dticks -= announce_remaining;
    4b38:	9b00      	ldr	r3, [sp, #0]
    4b3a:	ebb6 0c03 	subs.w	ip, r6, r3
    4b3e:	9b01      	ldr	r3, [sp, #4]
    4b40:	eb67 0603 	sbc.w	r6, r7, r3
    4b44:	e9c0 c604 	strd	ip, r6, [r0, #16]
	}

	curr_tick += announce_remaining;
    4b48:	9b00      	ldr	r3, [sp, #0]
    4b4a:	eb13 0208 	adds.w	r2, r3, r8
    4b4e:	9b01      	ldr	r3, [sp, #4]
	announce_remaining = 0;
    4b50:	f04f 0600 	mov.w	r6, #0
	curr_tick += announce_remaining;
    4b54:	eb43 0309 	adc.w	r3, r3, r9
    4b58:	e9c1 2300 	strd	r2, r3, [r1]
	announce_remaining = 0;
    4b5c:	602e      	str	r6, [r5, #0]

	z_clock_set_timeout(next_timeout(), false);
    4b5e:	f7ff ff11 	bl	4984 <next_timeout>
    4b62:	4631      	mov	r1, r6
    4b64:	f7fd f92e 	bl	1dc4 <z_clock_set_timeout>
	__asm__ volatile(
    4b68:	f384 8811 	msr	BASEPRI, r4
    4b6c:	f3bf 8f6f 	isb	sy

	k_spin_unlock(&timeout_lock, key);
}
    4b70:	b003      	add	sp, #12
    4b72:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		curr_tick += dt;
    4b76:	eb18 0806 	adds.w	r8, r8, r6
		t->dticks = 0;
    4b7a:	f04f 0200 	mov.w	r2, #0
    4b7e:	f04f 0300 	mov.w	r3, #0
		curr_tick += dt;
    4b82:	eb49 79e6 	adc.w	r9, r9, r6, asr #31
		t->dticks = 0;
    4b86:	e9c0 2304 	strd	r2, r3, [r0, #16]
		announce_remaining -= dt;
    4b8a:	ebac 0606 	sub.w	r6, ip, r6
		curr_tick += dt;
    4b8e:	e9ca 8900 	strd	r8, r9, [sl]
		announce_remaining -= dt;
    4b92:	602e      	str	r6, [r5, #0]
		remove_timeout(t);
    4b94:	f7ff fedc 	bl	4950 <remove_timeout>
    4b98:	f384 8811 	msr	BASEPRI, r4
    4b9c:	f3bf 8f6f 	isb	sy
		t->fn(t);
    4ba0:	6883      	ldr	r3, [r0, #8]
    4ba2:	4798      	blx	r3
	__asm__ volatile(
    4ba4:	f04f 0320 	mov.w	r3, #32
    4ba8:	f3ef 8411 	mrs	r4, BASEPRI
    4bac:	f383 8811 	msr	BASEPRI, r3
    4bb0:	f3bf 8f6f 	isb	sy

	/* Note that we need to use the underlying arch-specific lock
	 * implementation.  The "irq_lock()" API in SMP context is
	 * actually a wrapper for a global spinlock!
	 */
	k.key = arch_irq_lock();
    4bb4:	4901      	ldr	r1, [pc, #4]	; (4bbc <z_clock_announce+0xd0>)
#endif

#ifdef CONFIG_SPIN_VALIDATE
	z_spin_lock_set_owner(l);
#endif
	return k;
    4bb6:	e7ad      	b.n	4b14 <z_clock_announce+0x28>
    4bb8:	20000484 	.word	0x20000484
    4bbc:	20000268 	.word	0x20000268
    4bc0:	20000030 	.word	0x20000030

00004bc4 <z_tick_get>:

int64_t z_tick_get(void)
{
    4bc4:	b510      	push	{r4, lr}
    4bc6:	f04f 0320 	mov.w	r3, #32
    4bca:	f3ef 8411 	mrs	r4, BASEPRI
    4bce:	f383 8811 	msr	BASEPRI, r3
    4bd2:	f3bf 8f6f 	isb	sy
	uint64_t t = 0U;

	LOCKED(&timeout_lock) {
		t = curr_tick + z_clock_elapsed();
    4bd6:	f7fd f95b 	bl	1e90 <z_clock_elapsed>
    4bda:	4b06      	ldr	r3, [pc, #24]	; (4bf4 <z_tick_get+0x30>)
    4bdc:	e9d3 2300 	ldrd	r2, r3, [r3]
    4be0:	1812      	adds	r2, r2, r0
    4be2:	f143 0300 	adc.w	r3, r3, #0
	__asm__ volatile(
    4be6:	f384 8811 	msr	BASEPRI, r4
    4bea:	f3bf 8f6f 	isb	sy
	}
	return t;
}
    4bee:	4610      	mov	r0, r2
    4bf0:	4619      	mov	r1, r3
    4bf2:	bd10      	pop	{r4, pc}
    4bf4:	20000268 	.word	0x20000268

00004bf8 <z_timer_expiration_handler>:
 * @param t  Timeout used by the timer.
 *
 * @return N/A
 */
void z_timer_expiration_handler(struct _timeout *t)
{
    4bf8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}

	/*
	 * if the timer is periodic, start it again; don't add _TICK_ALIGN
	 * since we're already aligned to a tick boundary
	 */
	if (!K_TIMEOUT_EQ(timer->period, K_NO_WAIT) &&
    4bfa:	e9d0 230a 	ldrd	r2, r3, [r0, #40]	; 0x28
    4bfe:	1c56      	adds	r6, r2, #1
    4c00:	f143 0700 	adc.w	r7, r3, #0
    4c04:	2f00      	cmp	r7, #0
    4c06:	bf08      	it	eq
    4c08:	2e02      	cmpeq	r6, #2
{
    4c0a:	4604      	mov	r4, r0
	if (!K_TIMEOUT_EQ(timer->period, K_NO_WAIT) &&
    4c0c:	d302      	bcc.n	4c14 <z_timer_expiration_handler+0x1c>
	    !K_TIMEOUT_EQ(timer->period, K_FOREVER)) {
		z_add_timeout(&timer->timeout, z_timer_expiration_handler,
    4c0e:	490c      	ldr	r1, [pc, #48]	; (4c40 <z_timer_expiration_handler+0x48>)
    4c10:	f7ff fee4 	bl	49dc <z_add_timeout>
			     timer->period);
	}

	/* update timer's status */
	timer->status += 1U;
    4c14:	6b23      	ldr	r3, [r4, #48]	; 0x30
    4c16:	3301      	adds	r3, #1
    4c18:	6323      	str	r3, [r4, #48]	; 0x30

	/* invoke timer expiry function */
	if (timer->expiry_fn != NULL) {
    4c1a:	6a23      	ldr	r3, [r4, #32]
    4c1c:	b10b      	cbz	r3, 4c22 <z_timer_expiration_handler+0x2a>
		timer->expiry_fn(timer);
    4c1e:	4620      	mov	r0, r4
    4c20:	4798      	blx	r3
	return list->head == list;
    4c22:	f854 5f18 	ldr.w	r5, [r4, #24]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
    4c26:	42a5      	cmp	r5, r4
    4c28:	d008      	beq.n	4c3c <z_timer_expiration_handler+0x44>
	}

	thread = z_waitq_head(&timer->wait_q);

	if (thread == NULL) {
    4c2a:	b13d      	cbz	r5, 4c3c <z_timer_expiration_handler+0x44>
	 * place a thread can be taken off this pend queue, and b) the
	 * only place a thread can be put on the pend queue is at
	 * thread level, which of course cannot interrupt the current
	 * context.
	 */
	z_unpend_thread_no_timeout(thread);
    4c2c:	4628      	mov	r0, r5
    4c2e:	f000 ffe7 	bl	5c00 <z_unpend_thread_no_timeout>

	z_ready_thread(thread);
    4c32:	4628      	mov	r0, r5
    4c34:	f001 f820 	bl	5c78 <z_ready_thread>
    4c38:	2300      	movs	r3, #0
    4c3a:	67eb      	str	r3, [r5, #124]	; 0x7c

	arch_thread_return_value_set(thread, 0);
}
    4c3c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    4c3e:	bf00      	nop
    4c40:	00004bf9 	.word	0x00004bf9

00004c44 <z_impl_k_timer_start>:
}


void z_impl_k_timer_start(struct k_timer *timer, k_timeout_t duration,
			  k_timeout_t period)
{
    4c44:	e92d 4f73 	stmdb	sp!, {r0, r1, r4, r5, r6, r8, r9, sl, fp, lr}
    4c48:	4619      	mov	r1, r3
    4c4a:	4606      	mov	r6, r0
	if (K_TIMEOUT_EQ(duration, K_FOREVER)) {
    4c4c:	1c4c      	adds	r4, r1, #1
{
    4c4e:	4610      	mov	r0, r2
	if (K_TIMEOUT_EQ(duration, K_FOREVER)) {
    4c50:	bf08      	it	eq
    4c52:	f1b0 3fff 	cmpeq.w	r0, #4294967295	; 0xffffffff
{
    4c56:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
    4c5a:	4680      	mov	r8, r0
    4c5c:	4689      	mov	r9, r1
	if (K_TIMEOUT_EQ(duration, K_FOREVER)) {
    4c5e:	d047      	beq.n	4cf0 <z_impl_k_timer_start+0xac>
    4c60:	4614      	mov	r4, r2
    4c62:	461d      	mov	r5, r3
	 * for backwards compatibility.  This is unfortunate
	 * (i.e. k_timer_start() doesn't treat its initial sleep
	 * argument the same way k_sleep() does), but historical.  The
	 * timer_api test relies on this behavior.
	 */
	if (period.ticks != 0 && Z_TICK_ABS(period.ticks) < 0) {
    4c64:	ea54 0305 	orrs.w	r3, r4, r5
    4c68:	d016      	beq.n	4c98 <z_impl_k_timer_start+0x54>
    4c6a:	f06f 0301 	mvn.w	r3, #1
    4c6e:	ebb3 0a02 	subs.w	sl, r3, r2
    4c72:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    4c76:	eb63 0b05 	sbc.w	fp, r3, r5
    4c7a:	f1ba 0f00 	cmp.w	sl, #0
    4c7e:	f17b 0300 	sbcs.w	r3, fp, #0
    4c82:	da09      	bge.n	4c98 <z_impl_k_timer_start+0x54>
		period.ticks = MAX(period.ticks - 1, 1);
    4c84:	f112 34ff 	adds.w	r4, r2, #4294967295	; 0xffffffff
    4c88:	f145 35ff 	adc.w	r5, r5, #4294967295	; 0xffffffff
    4c8c:	2c01      	cmp	r4, #1
    4c8e:	f175 0300 	sbcs.w	r3, r5, #0
    4c92:	bfbc      	itt	lt
    4c94:	2401      	movlt	r4, #1
    4c96:	2500      	movlt	r5, #0
	}
	if (Z_TICK_ABS(duration.ticks) < 0) {
    4c98:	f06f 0301 	mvn.w	r3, #1
    4c9c:	1a1b      	subs	r3, r3, r0
    4c9e:	9300      	str	r3, [sp, #0]
    4ca0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    4ca4:	eb63 0301 	sbc.w	r3, r3, r1
    4ca8:	9301      	str	r3, [sp, #4]
    4caa:	e9dd 2300 	ldrd	r2, r3, [sp]
    4cae:	2a00      	cmp	r2, #0
    4cb0:	f173 0300 	sbcs.w	r3, r3, #0
    4cb4:	da0c      	bge.n	4cd0 <z_impl_k_timer_start+0x8c>
		duration.ticks = MAX(duration.ticks - 1, 0);
    4cb6:	f110 38ff 	adds.w	r8, r0, #4294967295	; 0xffffffff
    4cba:	f141 39ff 	adc.w	r9, r1, #4294967295	; 0xffffffff
    4cbe:	f1b8 0f00 	cmp.w	r8, #0
    4cc2:	f179 0300 	sbcs.w	r3, r9, #0
    4cc6:	bfbc      	itt	lt
    4cc8:	f04f 0800 	movlt.w	r8, #0
    4ccc:	f04f 0900 	movlt.w	r9, #0
	}
#endif

	(void)z_abort_timeout(&timer->timeout);
    4cd0:	4630      	mov	r0, r6
    4cd2:	f001 f860 	bl	5d96 <z_abort_timeout>
	timer->period = period;
	timer->status = 0U;
    4cd6:	2300      	movs	r3, #0

	z_add_timeout(&timer->timeout, z_timer_expiration_handler,
    4cd8:	4907      	ldr	r1, [pc, #28]	; (4cf8 <z_impl_k_timer_start+0xb4>)
	timer->status = 0U;
    4cda:	6333      	str	r3, [r6, #48]	; 0x30
	z_add_timeout(&timer->timeout, z_timer_expiration_handler,
    4cdc:	4642      	mov	r2, r8
    4cde:	464b      	mov	r3, r9
    4ce0:	4630      	mov	r0, r6
	timer->period = period;
    4ce2:	e9c6 450a 	strd	r4, r5, [r6, #40]	; 0x28
		     duration);
}
    4ce6:	b002      	add	sp, #8
    4ce8:	e8bd 4f70 	ldmia.w	sp!, {r4, r5, r6, r8, r9, sl, fp, lr}
	z_add_timeout(&timer->timeout, z_timer_expiration_handler,
    4cec:	f7ff be76 	b.w	49dc <z_add_timeout>
}
    4cf0:	b002      	add	sp, #8
    4cf2:	e8bd 8f70 	ldmia.w	sp!, {r4, r5, r6, r8, r9, sl, fp, pc}
    4cf6:	bf00      	nop
    4cf8:	00004bf9 	.word	0x00004bf9

00004cfc <statics_init>:
	z_waitq_init(&h->wait_q);
	sys_heap_init(&h->heap, mem, bytes);
}

static int statics_init(const struct device *unused)
{
    4cfc:	b538      	push	{r3, r4, r5, lr}
	ARG_UNUSED(unused);
	Z_STRUCT_SECTION_FOREACH(k_heap, h) {
    4cfe:	4c06      	ldr	r4, [pc, #24]	; (4d18 <statics_init+0x1c>)
    4d00:	4d06      	ldr	r5, [pc, #24]	; (4d1c <statics_init+0x20>)
    4d02:	42ac      	cmp	r4, r5
    4d04:	d301      	bcc.n	4d0a <statics_init+0xe>
		k_heap_init(h, h->heap.init_mem, h->heap.init_bytes);
	}
	return 0;
}
    4d06:	2000      	movs	r0, #0
    4d08:	bd38      	pop	{r3, r4, r5, pc}
		k_heap_init(h, h->heap.init_mem, h->heap.init_bytes);
    4d0a:	e9d4 1201 	ldrd	r1, r2, [r4, #4]
    4d0e:	4620      	mov	r0, r4
    4d10:	f001 f8b3 	bl	5e7a <k_heap_init>
	Z_STRUCT_SECTION_FOREACH(k_heap, h) {
    4d14:	3414      	adds	r4, #20
    4d16:	e7f4      	b.n	4d02 <statics_init+0x6>
    4d18:	2000008c 	.word	0x2000008c
    4d1c:	2000008c 	.word	0x2000008c

00004d20 <sys_notify_validate>:

int sys_notify_validate(struct sys_notify *notify)
{
	int rv = 0;

	if (notify == NULL) {
    4d20:	4603      	mov	r3, r0
    4d22:	b158      	cbz	r0, 4d3c <sys_notify_validate+0x1c>
	uint32_t method = notify->flags >> SYS_NOTIFY_METHOD_POS;
    4d24:	6842      	ldr	r2, [r0, #4]
	return method & SYS_NOTIFY_METHOD_MASK;
    4d26:	f002 0203 	and.w	r2, r2, #3
		return -EINVAL;
	}

	/* Validate configuration based on mode */
	switch (sys_notify_get_method(notify)) {
    4d2a:	2a01      	cmp	r2, #1
    4d2c:	d003      	beq.n	4d36 <sys_notify_validate+0x16>
    4d2e:	2a03      	cmp	r2, #3
    4d30:	d104      	bne.n	4d3c <sys_notify_validate+0x1c>
	case SYS_NOTIFY_METHOD_SPINWAIT:
		break;
	case SYS_NOTIFY_METHOD_CALLBACK:
		if (notify->method.callback == NULL) {
    4d32:	6802      	ldr	r2, [r0, #0]
    4d34:	b112      	cbz	r2, 4d3c <sys_notify_validate+0x1c>
		break;
	}

	/* Clear the result here instead of in all callers. */
	if (rv == 0) {
		notify->result = 0;
    4d36:	2000      	movs	r0, #0
    4d38:	6098      	str	r0, [r3, #8]
    4d3a:	4770      	bx	lr
		return -EINVAL;
    4d3c:	f06f 0015 	mvn.w	r0, #21
	}

	return rv;
}
    4d40:	4770      	bx	lr

00004d42 <sys_notify_finalize>:
	uint32_t method = notify->flags >> SYS_NOTIFY_METHOD_POS;
    4d42:	6842      	ldr	r2, [r0, #4]
	uint32_t method = sys_notify_get_method(notify);

	/* Store the result and capture secondary notification
	 * information.
	 */
	notify->result = res;
    4d44:	6081      	str	r1, [r0, #8]
	return method & SYS_NOTIFY_METHOD_MASK;
    4d46:	f002 0203 	and.w	r2, r2, #3
	switch (method) {
    4d4a:	2a03      	cmp	r2, #3
    4d4c:	f04f 0200 	mov.w	r2, #0
{
    4d50:	4603      	mov	r3, r0
	case SYS_NOTIFY_METHOD_SPINWAIT:
		break;
	case SYS_NOTIFY_METHOD_CALLBACK:
		rv = notify->method.callback;
    4d52:	bf0c      	ite	eq
    4d54:	6800      	ldreq	r0, [r0, #0]
	sys_notify_generic_callback rv = 0;
    4d56:	4610      	movne	r0, r2
	/* Mark completion by clearing the flags field to the
	 * completed state, releasing any spin-waiters, then complete
	 * secondary notification.
	 */
	compiler_barrier();
	notify->flags = SYS_NOTIFY_METHOD_COMPLETED;
    4d58:	605a      	str	r2, [r3, #4]
	if (IS_ENABLED(CONFIG_POLL) && (sig != NULL)) {
		k_poll_signal_raise(sig, res);
	}

	return rv;
}
    4d5a:	4770      	bx	lr

00004d5c <arch_printk_char_out>:
}
    4d5c:	2000      	movs	r0, #0
    4d5e:	4770      	bx	lr

00004d60 <str_out>:
{
    4d60:	b530      	push	{r4, r5, lr}
    4d62:	688a      	ldr	r2, [r1, #8]
	if (ctx->str == NULL || ctx->count >= ctx->max) {
    4d64:	680c      	ldr	r4, [r1, #0]
    4d66:	1c55      	adds	r5, r2, #1
    4d68:	b114      	cbz	r4, 4d70 <str_out+0x10>
    4d6a:	684b      	ldr	r3, [r1, #4]
    4d6c:	4293      	cmp	r3, r2
    4d6e:	dc01      	bgt.n	4d74 <str_out+0x14>
		ctx->count++;
    4d70:	608d      	str	r5, [r1, #8]
}
    4d72:	bd30      	pop	{r4, r5, pc}
	if (ctx->count == ctx->max - 1) {
    4d74:	3b01      	subs	r3, #1
    4d76:	4293      	cmp	r3, r2
		ctx->str[ctx->count++] = '\0';
    4d78:	bf08      	it	eq
    4d7a:	2200      	moveq	r2, #0
    4d7c:	608d      	str	r5, [r1, #8]
    4d7e:	bf0c      	ite	eq
    4d80:	54e2      	strbeq	r2, [r4, r3]
		ctx->str[ctx->count++] = c;
    4d82:	54a0      	strbne	r0, [r4, r2]
    4d84:	e7f5      	b.n	4d72 <str_out+0x12>

00004d86 <printk>:
{
    4d86:	b40f      	push	{r0, r1, r2, r3}
    4d88:	b507      	push	{r0, r1, r2, lr}
    4d8a:	a904      	add	r1, sp, #16
    4d8c:	f851 0b04 	ldr.w	r0, [r1], #4
	va_start(ap, fmt);
    4d90:	9101      	str	r1, [sp, #4]
		vprintk(fmt, ap);
    4d92:	f7fb fbd7 	bl	544 <vprintk>
}
    4d96:	b003      	add	sp, #12
    4d98:	f85d eb04 	ldr.w	lr, [sp], #4
    4d9c:	b004      	add	sp, #16
    4d9e:	4770      	bx	lr

00004da0 <snprintk>:
{
    4da0:	b40c      	push	{r2, r3}
    4da2:	b507      	push	{r0, r1, r2, lr}
    4da4:	ab04      	add	r3, sp, #16
    4da6:	f853 2b04 	ldr.w	r2, [r3], #4
	va_start(ap, fmt);
    4daa:	9301      	str	r3, [sp, #4]
	ret = vsnprintk(str, size, fmt, ap);
    4dac:	f7fb fbd8 	bl	560 <vsnprintk>
}
    4db0:	b003      	add	sp, #12
    4db2:	f85d eb04 	ldr.w	lr, [sp], #4
    4db6:	b002      	add	sp, #8
    4db8:	4770      	bx	lr

00004dba <process_recheck>:
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    4dba:	8b03      	ldrh	r3, [r0, #24]
	if ((state == ONOFF_STATE_OFF)
    4dbc:	f013 0307 	ands.w	r3, r3, #7
    4dc0:	d105      	bne.n	4dce <process_recheck+0x14>
	    && !sys_slist_is_empty(&mgr->clients)) {
    4dc2:	6803      	ldr	r3, [r0, #0]
    4dc4:	2b00      	cmp	r3, #0
		evt = EVT_START;
    4dc6:	bf0c      	ite	eq
    4dc8:	2000      	moveq	r0, #0
    4dca:	2003      	movne	r0, #3
    4dcc:	4770      	bx	lr
	} else if ((state == ONOFF_STATE_ON)
    4dce:	2b02      	cmp	r3, #2
    4dd0:	d105      	bne.n	4dde <process_recheck+0x24>
		   && (mgr->refs == 0U)) {
    4dd2:	8b43      	ldrh	r3, [r0, #26]
    4dd4:	2b00      	cmp	r3, #0
		evt = EVT_STOP;
    4dd6:	bf14      	ite	ne
    4dd8:	2000      	movne	r0, #0
    4dda:	2004      	moveq	r0, #4
    4ddc:	4770      	bx	lr
	} else if ((state == ONOFF_STATE_ERROR)
    4dde:	2b01      	cmp	r3, #1
    4de0:	d105      	bne.n	4dee <process_recheck+0x34>
		   && !sys_slist_is_empty(&mgr->clients)) {
    4de2:	6803      	ldr	r3, [r0, #0]
    4de4:	2b00      	cmp	r3, #0
		evt = EVT_RESET;
    4de6:	bf0c      	ite	eq
    4de8:	2000      	moveq	r0, #0
    4dea:	2005      	movne	r0, #5
    4dec:	4770      	bx	lr
	int evt = EVT_NOP;
    4dee:	2000      	movs	r0, #0
}
    4df0:	4770      	bx	lr

00004df2 <notify_one>:
{
    4df2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    4df6:	460d      	mov	r5, r1
    4df8:	4607      	mov	r7, r0
		(onoff_client_callback)sys_notify_finalize(&cli->notify, res);
    4dfa:	4619      	mov	r1, r3
    4dfc:	1d28      	adds	r0, r5, #4
{
    4dfe:	4690      	mov	r8, r2
    4e00:	461e      	mov	r6, r3
		(onoff_client_callback)sys_notify_finalize(&cli->notify, res);
    4e02:	f7ff ff9e 	bl	4d42 <sys_notify_finalize>
	if (cb) {
    4e06:	4604      	mov	r4, r0
    4e08:	b138      	cbz	r0, 4e1a <notify_one+0x28>
		cb(mgr, cli, state, res);
    4e0a:	4633      	mov	r3, r6
    4e0c:	4642      	mov	r2, r8
    4e0e:	4629      	mov	r1, r5
    4e10:	4638      	mov	r0, r7
    4e12:	46a4      	mov	ip, r4
}
    4e14:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		cb(mgr, cli, state, res);
    4e18:	4760      	bx	ip
}
    4e1a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00004e1e <transition_complete>:
{
    4e1e:	b410      	push	{r4}
	__asm__ volatile(
    4e20:	f04f 0420 	mov.w	r4, #32
    4e24:	f3ef 8211 	mrs	r2, BASEPRI
    4e28:	f384 8811 	msr	BASEPRI, r4
    4e2c:	f3bf 8f6f 	isb	sy
	mgr->last_res = res;
    4e30:	6141      	str	r1, [r0, #20]
}
    4e32:	bc10      	pop	{r4}
	process_event(mgr, EVT_COMPLETE, key);
    4e34:	2101      	movs	r1, #1
    4e36:	f7fb bba7 	b.w	588 <process_event>

00004e3a <validate_args>:
{
    4e3a:	b510      	push	{r4, lr}
    4e3c:	460c      	mov	r4, r1
	if ((mgr == NULL) || (cli == NULL)) {
    4e3e:	b140      	cbz	r0, 4e52 <validate_args+0x18>
    4e40:	b139      	cbz	r1, 4e52 <validate_args+0x18>
	int rv = sys_notify_validate(&cli->notify);
    4e42:	1d08      	adds	r0, r1, #4
    4e44:	f7ff ff6c 	bl	4d20 <sys_notify_validate>
	if ((rv == 0)
    4e48:	b928      	cbnz	r0, 4e56 <validate_args+0x1c>
	    && ((cli->notify.flags
    4e4a:	68a3      	ldr	r3, [r4, #8]
    4e4c:	f033 0303 	bics.w	r3, r3, #3
    4e50:	d001      	beq.n	4e56 <validate_args+0x1c>
		rv = -EINVAL;
    4e52:	f06f 0015 	mvn.w	r0, #21
}
    4e56:	bd10      	pop	{r4, pc}

00004e58 <onoff_manager_init>:
{
    4e58:	b538      	push	{r3, r4, r5, lr}
    4e5a:	460c      	mov	r4, r1
	if ((mgr == NULL)
    4e5c:	4605      	mov	r5, r0
    4e5e:	b158      	cbz	r0, 4e78 <onoff_manager_init+0x20>
	    || (transitions == NULL)
    4e60:	b151      	cbz	r1, 4e78 <onoff_manager_init+0x20>
	    || (transitions->start == NULL)
    4e62:	680b      	ldr	r3, [r1, #0]
    4e64:	b143      	cbz	r3, 4e78 <onoff_manager_init+0x20>
	    || (transitions->stop == NULL)) {
    4e66:	684b      	ldr	r3, [r1, #4]
    4e68:	b133      	cbz	r3, 4e78 <onoff_manager_init+0x20>
	*mgr = (struct onoff_manager)ONOFF_MANAGER_INITIALIZER(transitions);
    4e6a:	221c      	movs	r2, #28
    4e6c:	2100      	movs	r1, #0
    4e6e:	f000 fd66 	bl	593e <memset>
    4e72:	612c      	str	r4, [r5, #16]
	return 0;
    4e74:	2000      	movs	r0, #0
}
    4e76:	bd38      	pop	{r3, r4, r5, pc}
		return -EINVAL;
    4e78:	f06f 0015 	mvn.w	r0, #21
    4e7c:	e7fb      	b.n	4e76 <onoff_manager_init+0x1e>

00004e7e <onoff_request>:

int onoff_request(struct onoff_manager *mgr,
		  struct onoff_client *cli)
{
    4e7e:	b570      	push	{r4, r5, r6, lr}
    4e80:	4604      	mov	r4, r0
    4e82:	460e      	mov	r6, r1
	bool add_client = false;        /* add client to pending list */
	bool start = false;             /* trigger a start transition */
	bool notify = false;            /* do client notification */
	int rv = validate_args(mgr, cli);
    4e84:	f7ff ffd9 	bl	4e3a <validate_args>

	if (rv < 0) {
    4e88:	1e05      	subs	r5, r0, #0
    4e8a:	db31      	blt.n	4ef0 <onoff_request+0x72>
    4e8c:	f04f 0320 	mov.w	r3, #32
    4e90:	f3ef 8111 	mrs	r1, BASEPRI
    4e94:	f383 8811 	msr	BASEPRI, r3
    4e98:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&mgr->lock);
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;

	/* Reject if this would overflow the reference count. */
	if (mgr->refs == SERVICE_REFS_MAX) {
    4e9c:	8b63      	ldrh	r3, [r4, #26]
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    4e9e:	8b20      	ldrh	r0, [r4, #24]
	if (mgr->refs == SERVICE_REFS_MAX) {
    4ea0:	f64f 75ff 	movw	r5, #65535	; 0xffff
    4ea4:	42ab      	cmp	r3, r5
    4ea6:	f000 0207 	and.w	r2, r0, #7
    4eaa:	d02e      	beq.n	4f0a <onoff_request+0x8c>
		rv = -EAGAIN;
		goto out;
	}

	rv = state;
	if (state == ONOFF_STATE_ON) {
    4eac:	2a02      	cmp	r2, #2
    4eae:	d10e      	bne.n	4ece <onoff_request+0x50>
		/* Increment reference count, notify in exit */
		notify = true;
		mgr->refs += 1U;
    4eb0:	3301      	adds	r3, #1
    4eb2:	8363      	strh	r3, [r4, #26]
	rv = state;
    4eb4:	4615      	mov	r5, r2
		notify = true;
    4eb6:	2301      	movs	r3, #1
	__asm__ volatile(
    4eb8:	f381 8811 	msr	BASEPRI, r1
    4ebc:	f3bf 8f6f 	isb	sy
	if (start) {
		process_event(mgr, EVT_RECHECK, key);
	} else {
		k_spin_unlock(&mgr->lock, key);

		if (notify) {
    4ec0:	b1b3      	cbz	r3, 4ef0 <onoff_request+0x72>
			notify_one(mgr, cli, state, 0);
    4ec2:	2300      	movs	r3, #0
    4ec4:	4631      	mov	r1, r6
    4ec6:	4620      	mov	r0, r4
    4ec8:	f7ff ff93 	bl	4df2 <notify_one>
    4ecc:	e010      	b.n	4ef0 <onoff_request+0x72>
	} else if ((state == ONOFF_STATE_OFF)
    4ece:	0783      	lsls	r3, r0, #30
    4ed0:	d001      	beq.n	4ed6 <onoff_request+0x58>
		   || (state == ONOFF_STATE_TO_ON)) {
    4ed2:	2a06      	cmp	r2, #6
    4ed4:	d10e      	bne.n	4ef4 <onoff_request+0x76>
	parent->next = child;
    4ed6:	2300      	movs	r3, #0
    4ed8:	6033      	str	r3, [r6, #0]
Z_GENLIST_APPEND(slist, snode)
    4eda:	6863      	ldr	r3, [r4, #4]
    4edc:	b993      	cbnz	r3, 4f04 <onoff_request+0x86>
	list->head = node;
    4ede:	e9c4 6600 	strd	r6, r6, [r4]
	if (start) {
    4ee2:	4615      	mov	r5, r2
    4ee4:	b962      	cbnz	r2, 4f00 <onoff_request+0x82>
		process_event(mgr, EVT_RECHECK, key);
    4ee6:	460a      	mov	r2, r1
    4ee8:	4620      	mov	r0, r4
    4eea:	2102      	movs	r1, #2
    4eec:	f7fb fb4c 	bl	588 <process_event>
		}
	}

	return rv;
}
    4ef0:	4628      	mov	r0, r5
    4ef2:	bd70      	pop	{r4, r5, r6, pc}
		rv = -EIO;
    4ef4:	2a05      	cmp	r2, #5
    4ef6:	bf0c      	ite	eq
    4ef8:	f06f 0522 	mvneq.w	r5, #34	; 0x22
    4efc:	f06f 0504 	mvnne.w	r5, #4
    4f00:	2300      	movs	r3, #0
    4f02:	e7d9      	b.n	4eb8 <onoff_request+0x3a>
	parent->next = child;
    4f04:	601e      	str	r6, [r3, #0]
	list->tail = node;
    4f06:	6066      	str	r6, [r4, #4]
}
    4f08:	e7eb      	b.n	4ee2 <onoff_request+0x64>
		rv = -EAGAIN;
    4f0a:	f06f 050a 	mvn.w	r5, #10
    4f0e:	e7f7      	b.n	4f00 <onoff_request+0x82>

00004f10 <z_thread_entry>:
 * This routine does not return, and is marked as such so the compiler won't
 * generate preamble code that is only used by functions that actually return.
 */
FUNC_NORETURN void z_thread_entry(k_thread_entry_t entry,
				 void *p1, void *p2, void *p3)
{
    4f10:	4604      	mov	r4, r0
    4f12:	b508      	push	{r3, lr}
    4f14:	4608      	mov	r0, r1
    4f16:	4611      	mov	r1, r2
	entry(p1, p2, p3);
    4f18:	461a      	mov	r2, r3
    4f1a:	47a0      	blx	r4
	return z_impl_k_current_get();
    4f1c:	f7ff fbee 	bl	46fc <z_impl_k_current_get>
	z_impl_k_thread_abort(thread);
    4f20:	f7fd fc40 	bl	27a4 <z_impl_k_thread_abort>

00004f24 <chunk_field>:
				 enum chunk_fields f)
{
	chunk_unit_t *buf = chunk_buf(h);
	void *cmem = &buf[c];

	if (big_heap(h)) {
    4f24:	6883      	ldr	r3, [r0, #8]
	void *cmem = &buf[c];
    4f26:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
	if (big_heap(h)) {
    4f2a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
		return ((uint32_t *)cmem)[f];
    4f2e:	bf2c      	ite	cs
    4f30:	f851 0022 	ldrcs.w	r0, [r1, r2, lsl #2]
	} else {
		return ((uint16_t *)cmem)[f];
    4f34:	f831 0012 	ldrhcc.w	r0, [r1, r2, lsl #1]
	}
}
    4f38:	4770      	bx	lr

00004f3a <chunk_set>:
			     enum chunk_fields f, chunkid_t val)
{
	CHECK(c <= h->len);

	chunk_unit_t *buf = chunk_buf(h);
	void *cmem = &buf[c];
    4f3a:	eb00 01c1 	add.w	r1, r0, r1, lsl #3

	if (big_heap(h)) {
    4f3e:	6880      	ldr	r0, [r0, #8]
    4f40:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
		CHECK(val == (uint32_t)val);
		((uint32_t *)cmem)[f] = val;
    4f44:	bf2c      	ite	cs
    4f46:	f841 3022 	strcs.w	r3, [r1, r2, lsl #2]
	} else {
		CHECK(val == (uint16_t)val);
		((uint16_t *)cmem)[f] = val;
    4f4a:	f821 3012 	strhcc.w	r3, [r1, r2, lsl #1]
	}
}
    4f4e:	4770      	bx	lr

00004f50 <chunk_size>:
{
	return chunk_field(h, c, SIZE_AND_USED) & 1U;
}

static inline size_t chunk_size(struct z_heap *h, chunkid_t c)
{
    4f50:	b508      	push	{r3, lr}
	return chunk_field(h, c, SIZE_AND_USED) >> 1;
    4f52:	2201      	movs	r2, #1
    4f54:	f7ff ffe6 	bl	4f24 <chunk_field>
}
    4f58:	0840      	lsrs	r0, r0, #1
    4f5a:	bd08      	pop	{r3, pc}

00004f5c <set_chunk_used>:
static inline void set_chunk_used(struct z_heap *h, chunkid_t c, bool used)
{
	chunk_unit_t *buf = chunk_buf(h);
	void *cmem = &buf[c];

	if (big_heap(h)) {
    4f5c:	6883      	ldr	r3, [r0, #8]
    4f5e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
	void *cmem = &buf[c];
    4f62:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
	if (big_heap(h)) {
    4f66:	d308      	bcc.n	4f7a <set_chunk_used+0x1e>
		if (used) {
    4f68:	684b      	ldr	r3, [r1, #4]
    4f6a:	b11a      	cbz	r2, 4f74 <set_chunk_used+0x18>
			((uint32_t *)cmem)[SIZE_AND_USED] |= 1U;
    4f6c:	f043 0301 	orr.w	r3, r3, #1
		} else {
			((uint32_t *)cmem)[SIZE_AND_USED] &= ~1U;
    4f70:	604b      	str	r3, [r1, #4]
    4f72:	4770      	bx	lr
    4f74:	f023 0301 	bic.w	r3, r3, #1
    4f78:	e7fa      	b.n	4f70 <set_chunk_used+0x14>
		}
	} else {
		if (used) {
    4f7a:	884b      	ldrh	r3, [r1, #2]
    4f7c:	b11a      	cbz	r2, 4f86 <set_chunk_used+0x2a>
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
    4f7e:	f043 0301 	orr.w	r3, r3, #1
		} else {
			((uint16_t *)cmem)[SIZE_AND_USED] &= ~1U;
    4f82:	804b      	strh	r3, [r1, #2]
		}
	}
}
    4f84:	4770      	bx	lr
			((uint16_t *)cmem)[SIZE_AND_USED] &= ~1U;
    4f86:	f023 0301 	bic.w	r3, r3, #1
    4f8a:	e7fa      	b.n	4f82 <set_chunk_used+0x26>

00004f8c <set_chunk_size>:
 * when its size is modified, and potential set_chunk_used() is always
 * invoked after set_chunk_size().
 */
static inline void set_chunk_size(struct z_heap *h, chunkid_t c, size_t size)
{
	chunk_set(h, c, SIZE_AND_USED, size << 1);
    4f8c:	0053      	lsls	r3, r2, #1
    4f8e:	2201      	movs	r2, #1
    4f90:	f7ff bfd3 	b.w	4f3a <chunk_set>

00004f94 <bucket_idx>:
	return big_heap(h) && chunk_size(h, c) == 1U;
}

static inline size_t chunk_header_bytes(struct z_heap *h)
{
	return big_heap(h) ? 8 : 4;
    4f94:	6880      	ldr	r0, [r0, #8]
	return bytes_to_chunksz(h, 1);
}

static inline int bucket_idx(struct z_heap *h, size_t sz)
{
	size_t usable_sz = sz - min_chunk_size(h) + 1;
    4f96:	3101      	adds	r1, #1
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
    4f98:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
    4f9c:	bf2c      	ite	cs
    4f9e:	2002      	movcs	r0, #2
    4fa0:	2001      	movcc	r0, #1
	size_t usable_sz = sz - min_chunk_size(h) + 1;
    4fa2:	1a08      	subs	r0, r1, r0
	return 31 - __builtin_clz(usable_sz);
    4fa4:	fab0 f080 	clz	r0, r0
}
    4fa8:	f1c0 001f 	rsb	r0, r0, #31
    4fac:	4770      	bx	lr

00004fae <free_list_add>:
		set_prev_free_chunk(h, second, c);
	}
}

static void free_list_add(struct z_heap *h, chunkid_t c)
{
    4fae:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    4fb2:	4604      	mov	r4, r0
    4fb4:	460d      	mov	r5, r1
	return sizeof(void *) > 4U || chunks > 0x7fffU;
    4fb6:	f7ff ffcb 	bl	4f50 <chunk_size>
	return big_heap(h) && chunk_size(h, c) == 1U;
    4fba:	68a3      	ldr	r3, [r4, #8]
    4fbc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
    4fc0:	4601      	mov	r1, r0
    4fc2:	d301      	bcc.n	4fc8 <free_list_add+0x1a>
	if (!solo_free_header(h, c)) {
    4fc4:	2801      	cmp	r0, #1
    4fc6:	d035      	beq.n	5034 <free_list_add+0x86>
		int bidx = bucket_idx(h, chunk_size(h, c));
    4fc8:	4620      	mov	r0, r4
    4fca:	f7ff ffe3 	bl	4f94 <bucket_idx>
	if (b->next == 0U) {
    4fce:	eb04 0280 	add.w	r2, r4, r0, lsl #2
    4fd2:	6916      	ldr	r6, [r2, #16]
    4fd4:	b99e      	cbnz	r6, 4ffe <free_list_add+0x50>
		h->avail_buckets |= (1 << bidx);
    4fd6:	2301      	movs	r3, #1
    4fd8:	fa03 f000 	lsl.w	r0, r3, r0
    4fdc:	68e3      	ldr	r3, [r4, #12]
    4fde:	4303      	orrs	r3, r0
    4fe0:	60e3      	str	r3, [r4, #12]
	chunk_set(h, c, FREE_PREV, prev);
    4fe2:	4629      	mov	r1, r5
		b->next = c;
    4fe4:	6115      	str	r5, [r2, #16]
    4fe6:	462b      	mov	r3, r5
    4fe8:	2202      	movs	r2, #2
    4fea:	4620      	mov	r0, r4
    4fec:	f7ff ffa5 	bl	4f3a <chunk_set>
	chunk_set(h, c, FREE_NEXT, next);
    4ff0:	2203      	movs	r2, #3
    4ff2:	4629      	mov	r1, r5
	chunk_set(h, c, FREE_PREV, prev);
    4ff4:	4620      	mov	r0, r4
		free_list_add_bidx(h, c, bidx);
	}
}
    4ff6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    4ffa:	f7ff bf9e 	b.w	4f3a <chunk_set>
	return chunk_field(h, c, FREE_PREV);
    4ffe:	2202      	movs	r2, #2
    5000:	4631      	mov	r1, r6
    5002:	4620      	mov	r0, r4
    5004:	f7ff ff8e 	bl	4f24 <chunk_field>
	chunk_set(h, c, FREE_PREV, prev);
    5008:	2202      	movs	r2, #2
    500a:	4603      	mov	r3, r0
	return chunk_field(h, c, FREE_PREV);
    500c:	4607      	mov	r7, r0
	chunk_set(h, c, FREE_PREV, prev);
    500e:	4629      	mov	r1, r5
    5010:	4620      	mov	r0, r4
    5012:	f7ff ff92 	bl	4f3a <chunk_set>
	chunk_set(h, c, FREE_NEXT, next);
    5016:	4633      	mov	r3, r6
    5018:	2203      	movs	r2, #3
    501a:	4629      	mov	r1, r5
    501c:	4620      	mov	r0, r4
    501e:	f7ff ff8c 	bl	4f3a <chunk_set>
    5022:	2203      	movs	r2, #3
    5024:	4639      	mov	r1, r7
    5026:	462b      	mov	r3, r5
    5028:	4620      	mov	r0, r4
    502a:	f7ff ff86 	bl	4f3a <chunk_set>
	chunk_set(h, c, FREE_PREV, prev);
    502e:	2202      	movs	r2, #2
    5030:	4631      	mov	r1, r6
    5032:	e7df      	b.n	4ff4 <free_list_add+0x46>
    5034:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00005038 <sys_heap_init>:
	return big_heap_bytes(size) ? 8 : 4;
    5038:	f5b2 2f80 	cmp.w	r2, #262144	; 0x40000
	set_chunk_used(h, c, true);
	return mem;
}

void sys_heap_init(struct sys_heap *heap, void *mem, size_t bytes)
{
    503c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    503e:	bf2c      	ite	cs
    5040:	2508      	movcs	r5, #8
    5042:	2504      	movcc	r5, #4
	/* Must fit in a 32 bit count of HUNK_UNIT */
	__ASSERT(bytes / CHUNK_UNIT <= 0xffffffffU, "heap size is too big");

	/* Reserve the final marker chunk's header */
	__ASSERT(bytes > heap_footer_bytes(bytes), "heap size is too small");
	bytes -= heap_footer_bytes(bytes);
    5044:	1b55      	subs	r5, r2, r5

	/* Round the start up, the end down */
	uintptr_t addr = ROUND_UP(mem, CHUNK_UNIT);
    5046:	1dcc      	adds	r4, r1, #7
	uintptr_t end = ROUND_DOWN((uint8_t *)mem + bytes, CHUNK_UNIT);
    5048:	440d      	add	r5, r1
	uintptr_t addr = ROUND_UP(mem, CHUNK_UNIT);
    504a:	f024 0407 	bic.w	r4, r4, #7
	uintptr_t end = ROUND_DOWN((uint8_t *)mem + bytes, CHUNK_UNIT);
    504e:	f025 0507 	bic.w	r5, r5, #7
	CHECK(end > addr);
	__ASSERT(buf_sz > chunksz(sizeof(struct z_heap)), "heap size is too small");

	struct z_heap *h = (struct z_heap *)addr;
	heap->heap = h;
	h->chunk0_hdr_area = 0;
    5052:	2200      	movs	r2, #0
    5054:	2300      	movs	r3, #0
	size_t buf_sz = (end - addr) / CHUNK_UNIT;
    5056:	1b2d      	subs	r5, r5, r4
	heap->heap = h;
    5058:	6004      	str	r4, [r0, #0]
	size_t buf_sz = (end - addr) / CHUNK_UNIT;
    505a:	08ed      	lsrs	r5, r5, #3
	h->chunk0_hdr_area = 0;
    505c:	e9c4 2300 	strd	r2, r3, [r4]
	h->len = buf_sz;
	h->avail_buckets = 0;
    5060:	2300      	movs	r3, #0

	int nb_buckets = bucket_idx(h, buf_sz) + 1;
    5062:	4629      	mov	r1, r5
	h->len = buf_sz;
    5064:	60a5      	str	r5, [r4, #8]
	h->avail_buckets = 0;
    5066:	60e3      	str	r3, [r4, #12]
	int nb_buckets = bucket_idx(h, buf_sz) + 1;
    5068:	4620      	mov	r0, r4
    506a:	f7ff ff93 	bl	4f94 <bucket_idx>
	size_t chunk0_size = chunksz(sizeof(struct z_heap) +
    506e:	0086      	lsls	r6, r0, #2
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
    5070:	361b      	adds	r6, #27
	int nb_buckets = bucket_idx(h, buf_sz) + 1;
    5072:	1c41      	adds	r1, r0, #1
    5074:	08f6      	lsrs	r6, r6, #3
				     nb_buckets * sizeof(struct z_heap_bucket));

	__ASSERT(chunk0_size + min_chunk_size(h) < buf_sz, "heap size is too small");

	for (int i = 0; i < nb_buckets; i++) {
    5076:	f104 0210 	add.w	r2, r4, #16
		h->buckets[i].next = 0;
    507a:	4618      	mov	r0, r3
	for (int i = 0; i < nb_buckets; i++) {
    507c:	428b      	cmp	r3, r1
    507e:	db29      	blt.n	50d4 <sys_heap_init+0x9c>
	}

	/* chunk containing our struct z_heap */
	set_chunk_size(h, 0, chunk0_size);
    5080:	4632      	mov	r2, r6
    5082:	4620      	mov	r0, r4
    5084:	2100      	movs	r1, #0
    5086:	f7ff ff81 	bl	4f8c <set_chunk_size>
	set_chunk_used(h, 0, true);

	/* chunk containing the free heap */
	set_chunk_size(h, chunk0_size, buf_sz - chunk0_size);
    508a:	1baf      	subs	r7, r5, r6
	set_chunk_used(h, 0, true);
    508c:	4620      	mov	r0, r4
    508e:	2201      	movs	r2, #1
    5090:	2100      	movs	r1, #0
    5092:	f7ff ff63 	bl	4f5c <set_chunk_used>
	set_chunk_size(h, chunk0_size, buf_sz - chunk0_size);
    5096:	463a      	mov	r2, r7
    5098:	4631      	mov	r1, r6
    509a:	f7ff ff77 	bl	4f8c <set_chunk_size>
	chunk_set(h, c, LEFT_SIZE, size);
    509e:	4633      	mov	r3, r6
    50a0:	4631      	mov	r1, r6
    50a2:	4620      	mov	r0, r4
    50a4:	2200      	movs	r2, #0
    50a6:	f7ff ff48 	bl	4f3a <chunk_set>
	set_left_chunk_size(h, chunk0_size, chunk0_size);

	/* the end marker chunk */
	set_chunk_size(h, buf_sz, 0);
    50aa:	4629      	mov	r1, r5
    50ac:	4620      	mov	r0, r4
    50ae:	2200      	movs	r2, #0
    50b0:	f7ff ff6c 	bl	4f8c <set_chunk_size>
    50b4:	463b      	mov	r3, r7
    50b6:	4629      	mov	r1, r5
    50b8:	4620      	mov	r0, r4
    50ba:	2200      	movs	r2, #0
    50bc:	f7ff ff3d 	bl	4f3a <chunk_set>
	set_left_chunk_size(h, buf_sz, buf_sz - chunk0_size);
	set_chunk_used(h, buf_sz, true);
    50c0:	4629      	mov	r1, r5
    50c2:	4620      	mov	r0, r4
    50c4:	2201      	movs	r2, #1
    50c6:	f7ff ff49 	bl	4f5c <set_chunk_used>

	free_list_add(h, chunk0_size);
    50ca:	4631      	mov	r1, r6
}
    50cc:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	free_list_add(h, chunk0_size);
    50d0:	f7ff bf6d 	b.w	4fae <free_list_add>
		h->buckets[i].next = 0;
    50d4:	f842 0b04 	str.w	r0, [r2], #4
	for (int i = 0; i < nb_buckets; i++) {
    50d8:	3301      	adds	r3, #1
    50da:	e7cf      	b.n	507c <sys_heap_init+0x44>

000050dc <encode_uint>:
{
    50dc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    50e0:	4699      	mov	r9, r3
	bool upcase = isupper((int)conv->specifier);
    50e2:	78d3      	ldrb	r3, [r2, #3]
{
    50e4:	4614      	mov	r4, r2
	switch (specifier) {
    50e6:	2b6f      	cmp	r3, #111	; 0x6f
	return (int)(((unsigned)(a)-(unsigned)'A') < 26U);
    50e8:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
{
    50ec:	4606      	mov	r6, r0
    50ee:	460f      	mov	r7, r1
    50f0:	9201      	str	r2, [sp, #4]
	switch (specifier) {
    50f2:	d02d      	beq.n	5150 <encode_uint+0x74>
    50f4:	d828      	bhi.n	5148 <encode_uint+0x6c>
		return 16;
    50f6:	2b58      	cmp	r3, #88	; 0x58
    50f8:	bf14      	ite	ne
    50fa:	250a      	movne	r5, #10
    50fc:	2510      	moveq	r5, #16
	char *bp = bps + (bpe - bps);
    50fe:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
		unsigned int lsv = (unsigned int)(value % radix);
    5102:	46aa      	mov	sl, r5
    5104:	f04f 0b00 	mov.w	fp, #0
    5108:	4652      	mov	r2, sl
    510a:	465b      	mov	r3, fp
    510c:	4630      	mov	r0, r6
    510e:	4639      	mov	r1, r7
    5110:	f7fa ffe4 	bl	dc <__aeabi_uldivmod>
		*--bp = (lsv <= 9) ? ('0' + lsv)
    5114:	2a09      	cmp	r2, #9
    5116:	b2d3      	uxtb	r3, r2
    5118:	d81f      	bhi.n	515a <encode_uint+0x7e>
    511a:	3330      	adds	r3, #48	; 0x30
	} while ((value != 0) && (bps < bp));
    511c:	455f      	cmp	r7, fp
		*--bp = (lsv <= 9) ? ('0' + lsv)
    511e:	b2db      	uxtb	r3, r3
	} while ((value != 0) && (bps < bp));
    5120:	bf08      	it	eq
    5122:	4556      	cmpeq	r6, sl
		*--bp = (lsv <= 9) ? ('0' + lsv)
    5124:	f808 3d01 	strb.w	r3, [r8, #-1]!
	} while ((value != 0) && (bps < bp));
    5128:	d301      	bcc.n	512e <encode_uint+0x52>
    512a:	45c8      	cmp	r8, r9
    512c:	d812      	bhi.n	5154 <encode_uint+0x78>
	if (conv->flag_hash) {
    512e:	7823      	ldrb	r3, [r4, #0]
    5130:	069b      	lsls	r3, r3, #26
    5132:	d505      	bpl.n	5140 <encode_uint+0x64>
		if (radix == 8) {
    5134:	2d08      	cmp	r5, #8
    5136:	d116      	bne.n	5166 <encode_uint+0x8a>
			conv->altform_0 = true;
    5138:	78a3      	ldrb	r3, [r4, #2]
    513a:	f043 0308 	orr.w	r3, r3, #8
			conv->altform_0c = true;
    513e:	70a3      	strb	r3, [r4, #2]
}
    5140:	4640      	mov	r0, r8
    5142:	b003      	add	sp, #12
    5144:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	switch (specifier) {
    5148:	f003 03f7 	and.w	r3, r3, #247	; 0xf7
		return 16;
    514c:	2b70      	cmp	r3, #112	; 0x70
    514e:	e7d3      	b.n	50f8 <encode_uint+0x1c>
	switch (specifier) {
    5150:	2508      	movs	r5, #8
    5152:	e7d4      	b.n	50fe <encode_uint+0x22>
		value /= radix;
    5154:	4606      	mov	r6, r0
    5156:	460f      	mov	r7, r1
    5158:	e7d6      	b.n	5108 <encode_uint+0x2c>
		*--bp = (lsv <= 9) ? ('0' + lsv)
    515a:	9a01      	ldr	r2, [sp, #4]
    515c:	2a19      	cmp	r2, #25
    515e:	bf94      	ite	ls
    5160:	3337      	addls	r3, #55	; 0x37
    5162:	3357      	addhi	r3, #87	; 0x57
    5164:	e7da      	b.n	511c <encode_uint+0x40>
		} else if (radix == 16) {
    5166:	2d10      	cmp	r5, #16
    5168:	d1ea      	bne.n	5140 <encode_uint+0x64>
			conv->altform_0c = true;
    516a:	78a3      	ldrb	r3, [r4, #2]
    516c:	f043 0310 	orr.w	r3, r3, #16
    5170:	e7e5      	b.n	513e <encode_uint+0x62>

00005172 <outs>:
{
    5172:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    5176:	4607      	mov	r7, r0
    5178:	4688      	mov	r8, r1
    517a:	4615      	mov	r5, r2
    517c:	461e      	mov	r6, r3
	while ((sp < ep) || ((ep == NULL) && *sp)) {
    517e:	4614      	mov	r4, r2
    5180:	42b4      	cmp	r4, r6
    5182:	eba4 0005 	sub.w	r0, r4, r5
    5186:	d302      	bcc.n	518e <outs+0x1c>
    5188:	b93e      	cbnz	r6, 519a <outs+0x28>
    518a:	7823      	ldrb	r3, [r4, #0]
    518c:	b12b      	cbz	r3, 519a <outs+0x28>
		int rc = out((int)*sp++, ctx);
    518e:	f814 0b01 	ldrb.w	r0, [r4], #1
    5192:	4641      	mov	r1, r8
    5194:	47b8      	blx	r7
		if (rc < 0) {
    5196:	2800      	cmp	r0, #0
    5198:	daf2      	bge.n	5180 <outs+0xe>
}
    519a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0000519e <_ConfigAbsSyms>:
GEN_ABSOLUTE_SYM(CONFIG_OUTPUT_PRINT_MEMORY_USAGE, 1);
GEN_ABSOLUTE_SYM(CONFIG_BUILD_OUTPUT_BIN, 1);
GEN_ABSOLUTE_SYM(CONFIG_REBOOT, 1);
GEN_ABSOLUTE_SYM(CONFIG_COMPAT_INCLUDES, 1);

GEN_ABS_SYM_END
    519e:	4770      	bx	lr

000051a0 <log_list_init>:

#include "log_list.h"

void log_list_init(struct log_list_t *list)
{
	list->tail = NULL;
    51a0:	2300      	movs	r3, #0
	list->head = NULL;
    51a2:	e9c0 3300 	strd	r3, r3, [r0]
}
    51a6:	4770      	bx	lr

000051a8 <log_list_add_tail>:

void log_list_add_tail(struct log_list_t *list, struct log_msg *msg)
{
	if (list->head == NULL) {
    51a8:	6803      	ldr	r3, [r0, #0]
    51aa:	b923      	cbnz	r3, 51b6 <log_list_add_tail+0xe>
		list->head = msg;
    51ac:	6001      	str	r1, [r0, #0]
	} else {
		list->tail->next = msg;
	}

	list->tail = msg;
	msg->next = NULL;
    51ae:	2300      	movs	r3, #0
	list->tail = msg;
    51b0:	6041      	str	r1, [r0, #4]
	msg->next = NULL;
    51b2:	600b      	str	r3, [r1, #0]
}
    51b4:	4770      	bx	lr
		list->tail->next = msg;
    51b6:	6843      	ldr	r3, [r0, #4]
    51b8:	6019      	str	r1, [r3, #0]
    51ba:	e7f8      	b.n	51ae <log_list_add_tail+0x6>

000051bc <log_list_head_peek>:

struct log_msg *log_list_head_peek(struct log_list_t *list)
{
	return list->head;
}
    51bc:	6800      	ldr	r0, [r0, #0]
    51be:	4770      	bx	lr

000051c0 <log_list_head_get>:

struct log_msg *log_list_head_get(struct log_list_t *list)
{
    51c0:	4603      	mov	r3, r0
	struct log_msg *msg = list->head;
    51c2:	6800      	ldr	r0, [r0, #0]

	if (list->head != NULL) {
    51c4:	b108      	cbz	r0, 51ca <log_list_head_get+0xa>
		list->head = list->head->next;
    51c6:	6802      	ldr	r2, [r0, #0]
    51c8:	601a      	str	r2, [r3, #0]
	}

	return msg;
}
    51ca:	4770      	bx	lr

000051cc <z_log_msg_std_alloc>:
/** @brief Allocate chunk for standard log message.
 *
 *  @return Allocated chunk of NULL.
 */
static inline struct log_msg *z_log_msg_std_alloc(void)
{
    51cc:	b508      	push	{r3, lr}
	struct  log_msg *msg = (struct  log_msg *)log_msg_chunk_alloc();
    51ce:	f7fc f8db 	bl	1388 <log_msg_chunk_alloc>

	if (msg != NULL) {
    51d2:	b118      	cbz	r0, 51dc <z_log_msg_std_alloc+0x10>
		/* all fields reset to 0, reference counter to 1 */
		msg->hdr.ref_cnt = 1;
    51d4:	2301      	movs	r3, #1
    51d6:	6043      	str	r3, [r0, #4]
		msg->hdr.params.raw = 0U;
    51d8:	2300      	movs	r3, #0
    51da:	8103      	strh	r3, [r0, #8]
			msg->hdr.ids.source_id = 0;
		}
	}

	return msg;
}
    51dc:	bd08      	pop	{r3, pc}

000051de <k_cycle_get_32_wrapper>:
#ifndef _ASMLANGUAGE
extern uint32_t z_timer_cycle_get_32(void);

static inline uint32_t arch_k_cycle_get_32(void)
{
	return z_timer_cycle_get_32();
    51de:	f7fc be71 	b.w	1ec4 <z_timer_cycle_get_32>

000051e2 <dummy_timestamp>:
    51e2:	2000      	movs	r0, #0
    51e4:	4770      	bx	lr

000051e6 <z_log_get_s_mask>:
{
    51e6:	b5f0      	push	{r4, r5, r6, r7, lr}
    51e8:	4605      	mov	r5, r0
	uint32_t mask = 0;
    51ea:	2000      	movs	r0, #0
	uint32_t arg = 0;
    51ec:	4603      	mov	r3, r0
	bool arm = false;
    51ee:	4602      	mov	r2, r0
				mask |= BIT(arg);
    51f0:	2701      	movs	r7, #1
	while ((curr = *str++) && arg < nargs) {
    51f2:	f815 4b01 	ldrb.w	r4, [r5], #1
    51f6:	b10c      	cbz	r4, 51fc <z_log_get_s_mask+0x16>
    51f8:	428b      	cmp	r3, r1
    51fa:	d300      	bcc.n	51fe <z_log_get_s_mask+0x18>
}
    51fc:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if (curr == '%') {
    51fe:	2c25      	cmp	r4, #37	; 0x25
    5200:	d102      	bne.n	5208 <z_log_get_s_mask+0x22>
			arm = !arm;
    5202:	f082 0201 	eor.w	r2, r2, #1
    5206:	e7f4      	b.n	51f2 <z_log_get_s_mask+0xc>
		} else if (arm && isalpha((int)curr)) {
    5208:	2a00      	cmp	r2, #0
    520a:	d0f2      	beq.n	51f2 <z_log_get_s_mask+0xc>
	return (int)((((unsigned)c|32u)-(unsigned)'a') < 26U);
    520c:	f044 0620 	orr.w	r6, r4, #32
    5210:	3e61      	subs	r6, #97	; 0x61
    5212:	2e19      	cmp	r6, #25
    5214:	d8ed      	bhi.n	51f2 <z_log_get_s_mask+0xc>
			if (curr == 's') {
    5216:	2c73      	cmp	r4, #115	; 0x73
				mask |= BIT(arg);
    5218:	bf04      	itt	eq
    521a:	fa07 f203 	lsleq.w	r2, r7, r3
    521e:	4310      	orreq	r0, r2
			arg++;
    5220:	3301      	adds	r3, #1
			arm = false;
    5222:	2200      	movs	r2, #0
    5224:	e7e5      	b.n	51f2 <z_log_get_s_mask+0xc>

00005226 <log_0>:
{
    5226:	b538      	push	{r3, r4, r5, lr}
    5228:	4605      	mov	r5, r0
    522a:	460c      	mov	r4, r1
 *
 *  @return Pointer to allocated head of the message or NULL.
 */
static inline struct log_msg *log_msg_create_0(const char *str)
{
	struct log_msg *msg = z_log_msg_std_alloc();
    522c:	f7ff ffce 	bl	51cc <z_log_msg_std_alloc>

	if (msg != NULL) {
    5230:	b128      	cbz	r0, 523e <log_0+0x18>
		msg->str = str;
    5232:	6105      	str	r5, [r0, #16]
		msg_finalize(msg, src_level);
    5234:	4621      	mov	r1, r4
}
    5236:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		msg_finalize(msg, src_level);
    523a:	f7fb bfbf 	b.w	11bc <msg_finalize>
}
    523e:	bd38      	pop	{r3, r4, r5, pc}

00005240 <log_1>:
{
    5240:	b570      	push	{r4, r5, r6, lr}
    5242:	4606      	mov	r6, r0
    5244:	460d      	mov	r5, r1
    5246:	4614      	mov	r4, r2
 *  @return Pointer to allocated head of the message or NULL.
 */
static inline struct log_msg *log_msg_create_1(const char *str,
					       log_arg_t arg1)
{
	struct  log_msg *msg = z_log_msg_std_alloc();
    5248:	f7ff ffc0 	bl	51cc <z_log_msg_std_alloc>

	if (msg != NULL) {
    524c:	b158      	cbz	r0, 5266 <log_1+0x26>
		msg->str = str;
		msg->hdr.params.std.nargs = 1U;
    524e:	7a42      	ldrb	r2, [r0, #9]
		msg->str = str;
    5250:	6106      	str	r6, [r0, #16]
		msg->hdr.params.std.nargs = 1U;
    5252:	2101      	movs	r1, #1
    5254:	f361 1207 	bfi	r2, r1, #4, #4
    5258:	7242      	strb	r2, [r0, #9]
		msg->payload.single.args[0] = arg1;
    525a:	6145      	str	r5, [r0, #20]
		msg_finalize(msg, src_level);
    525c:	4621      	mov	r1, r4
}
    525e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		msg_finalize(msg, src_level);
    5262:	f7fb bfab 	b.w	11bc <msg_finalize>
}
    5266:	bd70      	pop	{r4, r5, r6, pc}

00005268 <log_2>:
{
    5268:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    526c:	4680      	mov	r8, r0
    526e:	460f      	mov	r7, r1
    5270:	4616      	mov	r6, r2
    5272:	461d      	mov	r5, r3
 */
static inline struct log_msg *log_msg_create_2(const char *str,
					       log_arg_t arg1,
					       log_arg_t arg2)
{
	struct  log_msg *msg = z_log_msg_std_alloc();
    5274:	f7ff ffaa 	bl	51cc <z_log_msg_std_alloc>

	if (msg != NULL) {
    5278:	b168      	cbz	r0, 5296 <log_2+0x2e>
		msg->str = str;
		msg->hdr.params.std.nargs = 2U;
    527a:	7a43      	ldrb	r3, [r0, #9]
		msg->str = str;
    527c:	f8c0 8010 	str.w	r8, [r0, #16]
		msg->hdr.params.std.nargs = 2U;
    5280:	2202      	movs	r2, #2
    5282:	f362 1307 	bfi	r3, r2, #4, #4
    5286:	7243      	strb	r3, [r0, #9]
		msg->payload.single.args[0] = arg1;
		msg->payload.single.args[1] = arg2;
    5288:	e9c0 7605 	strd	r7, r6, [r0, #20]
		msg_finalize(msg, src_level);
    528c:	4629      	mov	r1, r5
}
    528e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		msg_finalize(msg, src_level);
    5292:	f7fb bf93 	b.w	11bc <msg_finalize>
}
    5296:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0000529a <log_3>:
{
    529a:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    529e:	4680      	mov	r8, r0
    52a0:	f8bd 9020 	ldrh.w	r9, [sp, #32]
    52a4:	460f      	mov	r7, r1
    52a6:	4616      	mov	r6, r2
    52a8:	461d      	mov	r5, r3
static inline struct log_msg *log_msg_create_3(const char *str,
					       log_arg_t arg1,
					       log_arg_t arg2,
					       log_arg_t arg3)
{
	struct  log_msg *msg = z_log_msg_std_alloc();
    52aa:	f7ff ff8f 	bl	51cc <z_log_msg_std_alloc>

	if (msg != NULL) {
    52ae:	b170      	cbz	r0, 52ce <log_3+0x34>
		msg->str = str;
		msg->hdr.params.std.nargs = 3U;
    52b0:	7a43      	ldrb	r3, [r0, #9]
		msg->str = str;
    52b2:	f8c0 8010 	str.w	r8, [r0, #16]
		msg->hdr.params.std.nargs = 3U;
    52b6:	2203      	movs	r2, #3
    52b8:	f362 1307 	bfi	r3, r2, #4, #4
    52bc:	7243      	strb	r3, [r0, #9]
		msg->payload.single.args[0] = arg1;
		msg->payload.single.args[1] = arg2;
    52be:	e9c0 7605 	strd	r7, r6, [r0, #20]
		msg->payload.single.args[2] = arg3;
    52c2:	61c5      	str	r5, [r0, #28]
		msg_finalize(msg, src_level);
    52c4:	4649      	mov	r1, r9
}
    52c6:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
		msg_finalize(msg, src_level);
    52ca:	f7fb bf77 	b.w	11bc <msg_finalize>
}
    52ce:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

000052d2 <log_msg_hexdump_data_op>:
static void log_msg_hexdump_data_op(struct log_msg *msg,
				    uint8_t *data,
				    size_t *length,
				    size_t offset,
				    bool put_op)
{
    52d2:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    52d6:	461c      	mov	r4, r3
	uint32_t available_len = msg->hdr.params.hexdump.length;
    52d8:	8903      	ldrh	r3, [r0, #8]
{
    52da:	f89d 7020 	ldrb.w	r7, [sp, #32]
    52de:	460e      	mov	r6, r1
    52e0:	4611      	mov	r1, r2
	uint32_t available_len = msg->hdr.params.hexdump.length;
    52e2:	f3c3 028d 	ubfx	r2, r3, #2, #14
	uint8_t *head_data;
	uint32_t chunk_len;
	uint32_t req_len;
	uint32_t cpy_len;

	if (offset >= available_len) {
    52e6:	42a2      	cmp	r2, r4
    52e8:	d803      	bhi.n	52f2 <log_msg_hexdump_data_op+0x20>
		*length = 0;
    52ea:	2300      	movs	r3, #0
    52ec:	600b      	str	r3, [r1, #0]
		offset = 0;
		cont = cont->next;
		req_len -= cpy_len;
		data += cpy_len;
	}
}
    52ee:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	if ((offset + *length) > available_len) {
    52f2:	680b      	ldr	r3, [r1, #0]
    52f4:	4423      	add	r3, r4
    52f6:	4293      	cmp	r3, r2
		*length = available_len - offset;
    52f8:	bf84      	itt	hi
    52fa:	1b13      	subhi	r3, r2, r4
    52fc:	600b      	strhi	r3, [r1, #0]
	if (available_len > LOG_MSG_HEXDUMP_BYTES_SINGLE_CHUNK) {
    52fe:	2a0c      	cmp	r2, #12
	req_len = *length;
    5300:	f8d1 9000 	ldr.w	r9, [r1]
	if (available_len > LOG_MSG_HEXDUMP_BYTES_SINGLE_CHUNK) {
    5304:	d92a      	bls.n	535c <log_msg_hexdump_data_op+0x8a>
	if (offset < chunk_len) {
    5306:	2c07      	cmp	r4, #7
		cont = msg->payload.ext.next;
    5308:	f8d0 8014 	ldr.w	r8, [r0, #20]
	if (offset < chunk_len) {
    530c:	d82d      	bhi.n	536a <log_msg_hexdump_data_op+0x98>
		head_data = msg->payload.ext.data.bytes;
    530e:	3018      	adds	r0, #24
		chunk_len = LOG_MSG_HEXDUMP_BYTES_HEAD_CHUNK;
    5310:	2208      	movs	r2, #8
		cpy_len = req_len > chunk_len ? chunk_len : req_len;
    5312:	454a      	cmp	r2, r9
    5314:	bf28      	it	cs
    5316:	464a      	movcs	r2, r9
    5318:	4615      	mov	r5, r2
		if (put_op) {
    531a:	4420      	add	r0, r4
    531c:	b317      	cbz	r7, 5364 <log_msg_hexdump_data_op+0x92>
			(void)memcpy(&head_data[offset], data, cpy_len);
    531e:	4631      	mov	r1, r6
			(void)memcpy(data, &head_data[offset], cpy_len);
    5320:	f000 fae2 	bl	58e8 <memcpy>
		req_len -= cpy_len;
    5324:	eba9 0905 	sub.w	r9, r9, r5
		data += cpy_len;
    5328:	442e      	add	r6, r5
	while ((req_len > 0) && (cont != NULL)) {
    532a:	f1b9 0f00 	cmp.w	r9, #0
    532e:	d0de      	beq.n	52ee <log_msg_hexdump_data_op+0x1c>
    5330:	f1b8 0f00 	cmp.w	r8, #0
    5334:	d0db      	beq.n	52ee <log_msg_hexdump_data_op+0x1c>
		chunk_len = HEXDUMP_BYTES_CONT_MSG - offset;
    5336:	f1c4 051c 	rsb	r5, r4, #28
		cpy_len = req_len > chunk_len ? chunk_len : req_len;
    533a:	454d      	cmp	r5, r9
    533c:	bf28      	it	cs
    533e:	464d      	movcs	r5, r9
		if (put_op) {
    5340:	1d20      	adds	r0, r4, #4
    5342:	4440      	add	r0, r8
			(void)memcpy(&cont->payload.bytes[offset],
    5344:	462a      	mov	r2, r5
		if (put_op) {
    5346:	b1bf      	cbz	r7, 5378 <log_msg_hexdump_data_op+0xa6>
			(void)memcpy(&cont->payload.bytes[offset],
    5348:	4631      	mov	r1, r6
			(void)memcpy(data, &cont->payload.bytes[offset],
    534a:	f000 facd 	bl	58e8 <memcpy>
		req_len -= cpy_len;
    534e:	eba9 0905 	sub.w	r9, r9, r5
		cont = cont->next;
    5352:	f8d8 8000 	ldr.w	r8, [r8]
		data += cpy_len;
    5356:	442e      	add	r6, r5
		offset = 0;
    5358:	2400      	movs	r4, #0
    535a:	e7e6      	b.n	532a <log_msg_hexdump_data_op+0x58>
		head_data = msg->payload.single.bytes;
    535c:	3014      	adds	r0, #20
	struct log_msg_cont *cont = NULL;
    535e:	f04f 0800 	mov.w	r8, #0
    5362:	e7d6      	b.n	5312 <log_msg_hexdump_data_op+0x40>
			(void)memcpy(data, &head_data[offset], cpy_len);
    5364:	4601      	mov	r1, r0
    5366:	4630      	mov	r0, r6
    5368:	e7da      	b.n	5320 <log_msg_hexdump_data_op+0x4e>
		offset -= chunk_len;
    536a:	3c08      	subs	r4, #8
		while (offset >= chunk_len) {
    536c:	2c1b      	cmp	r4, #27
    536e:	d9dc      	bls.n	532a <log_msg_hexdump_data_op+0x58>
			cont = cont->next;
    5370:	f8d8 8000 	ldr.w	r8, [r8]
			offset -= chunk_len;
    5374:	3c1c      	subs	r4, #28
    5376:	e7f9      	b.n	536c <log_msg_hexdump_data_op+0x9a>
			(void)memcpy(data, &cont->payload.bytes[offset],
    5378:	4601      	mov	r1, r0
    537a:	4630      	mov	r0, r6
    537c:	e7e5      	b.n	534a <log_msg_hexdump_data_op+0x78>

0000537e <log_msg_get>:
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
    537e:	3004      	adds	r0, #4
    5380:	f3bf 8f5b 	dmb	ish
    5384:	e850 3f00 	ldrex	r3, [r0]
    5388:	3301      	adds	r3, #1
    538a:	e840 3200 	strex	r2, r3, [r0]
    538e:	2a00      	cmp	r2, #0
    5390:	d1f8      	bne.n	5384 <log_msg_get+0x6>
    5392:	f3bf 8f5b 	dmb	ish
}
    5396:	4770      	bx	lr

00005398 <log_msg_nargs_get>:
	return msg->hdr.params.std.nargs;
    5398:	7a40      	ldrb	r0, [r0, #9]
}
    539a:	0900      	lsrs	r0, r0, #4
    539c:	4770      	bx	lr

0000539e <log_msg_arg_get>:
	if (arg_idx >= msg->hdr.params.std.nargs) {
    539e:	7a43      	ldrb	r3, [r0, #9]
    53a0:	ebb1 1f13 	cmp.w	r1, r3, lsr #4
    53a4:	ea4f 1213 	mov.w	r2, r3, lsr #4
    53a8:	d216      	bcs.n	53d8 <log_msg_arg_get+0x3a>
	if (msg->hdr.params.std.nargs <= LOG_MSG_NARGS_SINGLE_CHUNK) {
    53aa:	2a03      	cmp	r2, #3
    53ac:	d803      	bhi.n	53b6 <log_msg_arg_get+0x18>
		arg = msg->payload.single.args[arg_idx];
    53ae:	eb00 0181 	add.w	r1, r0, r1, lsl #2
    53b2:	6948      	ldr	r0, [r1, #20]
    53b4:	4770      	bx	lr
	if (arg_idx < LOG_MSG_NARGS_HEAD_CHUNK) {
    53b6:	2901      	cmp	r1, #1
    53b8:	d803      	bhi.n	53c2 <log_msg_arg_get+0x24>
		return msg->payload.ext.data.args[arg_idx];
    53ba:	eb00 0181 	add.w	r1, r0, r1, lsl #2
    53be:	6988      	ldr	r0, [r1, #24]
    53c0:	4770      	bx	lr
	cont = msg->payload.ext.next;
    53c2:	6943      	ldr	r3, [r0, #20]
	arg_idx -= LOG_MSG_NARGS_HEAD_CHUNK;
    53c4:	3902      	subs	r1, #2
	while (arg_idx >= ARGS_CONT_MSG) {
    53c6:	2906      	cmp	r1, #6
    53c8:	d803      	bhi.n	53d2 <log_msg_arg_get+0x34>
	return cont->payload.args[arg_idx];
    53ca:	eb03 0181 	add.w	r1, r3, r1, lsl #2
    53ce:	6848      	ldr	r0, [r1, #4]
    53d0:	4770      	bx	lr
		cont = cont->next;
    53d2:	681b      	ldr	r3, [r3, #0]
		arg_idx -= ARGS_CONT_MSG;
    53d4:	3907      	subs	r1, #7
		cont = cont->next;
    53d6:	e7f6      	b.n	53c6 <log_msg_arg_get+0x28>
		return 0;
    53d8:	2000      	movs	r0, #0
}
    53da:	4770      	bx	lr

000053dc <log_msg_put>:
{
    53dc:	4603      	mov	r3, r0
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
    53de:	1d02      	adds	r2, r0, #4
    53e0:	f3bf 8f5b 	dmb	ish
    53e4:	e852 1f00 	ldrex	r1, [r2]
    53e8:	3901      	subs	r1, #1
    53ea:	e842 1c00 	strex	ip, r1, [r2]
    53ee:	f1bc 0f00 	cmp.w	ip, #0
    53f2:	d1f7      	bne.n	53e4 <log_msg_put+0x8>
    53f4:	f3bf 8f5b 	dmb	ish
	if (msg->hdr.ref_cnt == 0) {
    53f8:	685b      	ldr	r3, [r3, #4]
    53fa:	b90b      	cbnz	r3, 5400 <log_msg_put+0x24>
		msg_free(msg);
    53fc:	f7fb bfd8 	b.w	13b0 <msg_free>
}
    5400:	4770      	bx	lr

00005402 <log_msg_str_get>:
}
    5402:	6900      	ldr	r0, [r0, #16]
    5404:	4770      	bx	lr

00005406 <log_msg_hexdump_data_get>:

void log_msg_hexdump_data_get(struct log_msg *msg,
			      uint8_t *data,
			      size_t *length,
			      size_t offset)
{
    5406:	b513      	push	{r0, r1, r4, lr}
	log_msg_hexdump_data_op(msg, data, length, offset, false);
    5408:	2400      	movs	r4, #0
    540a:	9400      	str	r4, [sp, #0]
    540c:	f7ff ff61 	bl	52d2 <log_msg_hexdump_data_op>
}
    5410:	b002      	add	sp, #8
    5412:	bd10      	pop	{r4, pc}

00005414 <buffer_write>:
{
    5414:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    5416:	4606      	mov	r6, r0
    5418:	460d      	mov	r5, r1
    541a:	4614      	mov	r4, r2
    541c:	461f      	mov	r7, r3
		processed = outf(buf, len, ctx);
    541e:	4621      	mov	r1, r4
    5420:	4628      	mov	r0, r5
    5422:	463a      	mov	r2, r7
    5424:	47b0      	blx	r6
	} while (len != 0);
    5426:	1a24      	subs	r4, r4, r0
		buf += processed;
    5428:	4405      	add	r5, r0
	} while (len != 0);
    542a:	d1f8      	bne.n	541e <buffer_write+0xa>
}
    542c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0000542e <std_print>:
{
    542e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    5432:	b08e      	sub	sp, #56	; 0x38
    5434:	af0e      	add	r7, sp, #56	; 0x38
    5436:	4680      	mov	r8, r0
    5438:	460d      	mov	r5, r1
	const char *str = log_msg_str_get(msg);
    543a:	f7ff ffe2 	bl	5402 <log_msg_str_get>
    543e:	4606      	mov	r6, r0
	uint32_t nargs = log_msg_nargs_get(msg);
    5440:	4640      	mov	r0, r8
    5442:	f7ff ffa9 	bl	5398 <log_msg_nargs_get>
	uint32_t *args = alloca(sizeof(uint32_t)*nargs);
    5446:	0083      	lsls	r3, r0, #2
    5448:	3307      	adds	r3, #7
    544a:	f023 0307 	bic.w	r3, r3, #7
    544e:	ebad 0d03 	sub.w	sp, sp, r3
	uint32_t nargs = log_msg_nargs_get(msg);
    5452:	4682      	mov	sl, r0
	uint32_t *args = alloca(sizeof(uint32_t)*nargs);
    5454:	ac0e      	add	r4, sp, #56	; 0x38
	for (i = 0; i < nargs; i++) {
    5456:	f04f 0900 	mov.w	r9, #0
    545a:	45d1      	cmp	r9, sl
    545c:	d116      	bne.n	548c <std_print+0x5e>
	switch (log_msg_nargs_get(msg)) {
    545e:	4640      	mov	r0, r8
    5460:	f7ff ff9a 	bl	5398 <log_msg_nargs_get>
    5464:	280f      	cmp	r0, #15
    5466:	d81e      	bhi.n	54a6 <std_print+0x78>
    5468:	e8df f010 	tbh	[pc, r0, lsl #1]
    546c:	00200019 	.word	0x00200019
    5470:	002d0026 	.word	0x002d0026
    5474:	00410036 	.word	0x00410036
    5478:	005d004e 	.word	0x005d004e
    547c:	0081006e 	.word	0x0081006e
    5480:	00ad0096 	.word	0x00ad0096
    5484:	00e100c6 	.word	0x00e100c6
    5488:	011d00fe 	.word	0x011d00fe
		args[i] = log_msg_arg_get(msg, i);
    548c:	4649      	mov	r1, r9
    548e:	4640      	mov	r0, r8
    5490:	f7ff ff85 	bl	539e <log_msg_arg_get>
    5494:	f844 0029 	str.w	r0, [r4, r9, lsl #2]
	for (i = 0; i < nargs; i++) {
    5498:	f109 0901 	add.w	r9, r9, #1
    549c:	e7dd      	b.n	545a <std_print+0x2c>
		print_formatted(log_output, str);
    549e:	4631      	mov	r1, r6
    54a0:	4628      	mov	r0, r5
    54a2:	f7fb ffc3 	bl	142c <print_formatted>
}
    54a6:	46bd      	mov	sp, r7
    54a8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		print_formatted(log_output, str, args[0]);
    54ac:	6822      	ldr	r2, [r4, #0]
    54ae:	4631      	mov	r1, r6
    54b0:	4628      	mov	r0, r5
    54b2:	f7fb ffbb 	bl	142c <print_formatted>
		break;
    54b6:	e7f6      	b.n	54a6 <std_print+0x78>
		print_formatted(log_output, str, args[0], args[1]);
    54b8:	e9d4 2300 	ldrd	r2, r3, [r4]
    54bc:	4631      	mov	r1, r6
    54be:	4628      	mov	r0, r5
    54c0:	f7fb ffb4 	bl	142c <print_formatted>
		break;
    54c4:	e7ef      	b.n	54a6 <std_print+0x78>
		print_formatted(log_output, str, args[0], args[1], args[2]);
    54c6:	68a3      	ldr	r3, [r4, #8]
    54c8:	9300      	str	r3, [sp, #0]
    54ca:	e9d4 2300 	ldrd	r2, r3, [r4]
    54ce:	4631      	mov	r1, r6
    54d0:	4628      	mov	r0, r5
    54d2:	f7fb ffab 	bl	142c <print_formatted>
		break;
    54d6:	e7e6      	b.n	54a6 <std_print+0x78>
		print_formatted(log_output, str, args[0], args[1], args[2],
    54d8:	68e3      	ldr	r3, [r4, #12]
    54da:	9301      	str	r3, [sp, #4]
    54dc:	68a3      	ldr	r3, [r4, #8]
    54de:	9300      	str	r3, [sp, #0]
    54e0:	e9d4 2300 	ldrd	r2, r3, [r4]
    54e4:	4631      	mov	r1, r6
    54e6:	4628      	mov	r0, r5
    54e8:	f7fb ffa0 	bl	142c <print_formatted>
		break;
    54ec:	e7db      	b.n	54a6 <std_print+0x78>
		print_formatted(log_output, str, args[0], args[1], args[2],
    54ee:	6923      	ldr	r3, [r4, #16]
    54f0:	9302      	str	r3, [sp, #8]
    54f2:	68e3      	ldr	r3, [r4, #12]
    54f4:	9301      	str	r3, [sp, #4]
    54f6:	68a3      	ldr	r3, [r4, #8]
    54f8:	9300      	str	r3, [sp, #0]
    54fa:	e9d4 2300 	ldrd	r2, r3, [r4]
    54fe:	4631      	mov	r1, r6
    5500:	4628      	mov	r0, r5
    5502:	f7fb ff93 	bl	142c <print_formatted>
		break;
    5506:	e7ce      	b.n	54a6 <std_print+0x78>
		print_formatted(log_output, str, args[0], args[1], args[2],
    5508:	6963      	ldr	r3, [r4, #20]
    550a:	9303      	str	r3, [sp, #12]
    550c:	6923      	ldr	r3, [r4, #16]
    550e:	9302      	str	r3, [sp, #8]
    5510:	68e3      	ldr	r3, [r4, #12]
    5512:	9301      	str	r3, [sp, #4]
    5514:	68a3      	ldr	r3, [r4, #8]
    5516:	9300      	str	r3, [sp, #0]
    5518:	e9d4 2300 	ldrd	r2, r3, [r4]
    551c:	4631      	mov	r1, r6
    551e:	4628      	mov	r0, r5
    5520:	f7fb ff84 	bl	142c <print_formatted>
		break;
    5524:	e7bf      	b.n	54a6 <std_print+0x78>
		print_formatted(log_output, str, args[0], args[1], args[2],
    5526:	69a3      	ldr	r3, [r4, #24]
    5528:	9304      	str	r3, [sp, #16]
    552a:	6963      	ldr	r3, [r4, #20]
    552c:	9303      	str	r3, [sp, #12]
    552e:	6923      	ldr	r3, [r4, #16]
    5530:	9302      	str	r3, [sp, #8]
    5532:	68e3      	ldr	r3, [r4, #12]
    5534:	9301      	str	r3, [sp, #4]
    5536:	68a3      	ldr	r3, [r4, #8]
    5538:	9300      	str	r3, [sp, #0]
    553a:	e9d4 2300 	ldrd	r2, r3, [r4]
    553e:	4631      	mov	r1, r6
    5540:	4628      	mov	r0, r5
    5542:	f7fb ff73 	bl	142c <print_formatted>
		break;
    5546:	e7ae      	b.n	54a6 <std_print+0x78>
		print_formatted(log_output, str, args[0], args[1], args[2],
    5548:	69e3      	ldr	r3, [r4, #28]
    554a:	9305      	str	r3, [sp, #20]
    554c:	69a3      	ldr	r3, [r4, #24]
    554e:	9304      	str	r3, [sp, #16]
    5550:	6963      	ldr	r3, [r4, #20]
    5552:	9303      	str	r3, [sp, #12]
    5554:	6923      	ldr	r3, [r4, #16]
    5556:	9302      	str	r3, [sp, #8]
    5558:	68e3      	ldr	r3, [r4, #12]
    555a:	9301      	str	r3, [sp, #4]
    555c:	68a3      	ldr	r3, [r4, #8]
    555e:	9300      	str	r3, [sp, #0]
    5560:	e9d4 2300 	ldrd	r2, r3, [r4]
    5564:	4631      	mov	r1, r6
    5566:	4628      	mov	r0, r5
    5568:	f7fb ff60 	bl	142c <print_formatted>
		break;
    556c:	e79b      	b.n	54a6 <std_print+0x78>
		print_formatted(log_output, str, args[0], args[1], args[2],
    556e:	6a23      	ldr	r3, [r4, #32]
    5570:	9306      	str	r3, [sp, #24]
    5572:	69e3      	ldr	r3, [r4, #28]
    5574:	9305      	str	r3, [sp, #20]
    5576:	69a3      	ldr	r3, [r4, #24]
    5578:	9304      	str	r3, [sp, #16]
    557a:	6963      	ldr	r3, [r4, #20]
    557c:	9303      	str	r3, [sp, #12]
    557e:	6923      	ldr	r3, [r4, #16]
    5580:	9302      	str	r3, [sp, #8]
    5582:	68e3      	ldr	r3, [r4, #12]
    5584:	9301      	str	r3, [sp, #4]
    5586:	68a3      	ldr	r3, [r4, #8]
    5588:	9300      	str	r3, [sp, #0]
    558a:	e9d4 2300 	ldrd	r2, r3, [r4]
    558e:	4631      	mov	r1, r6
    5590:	4628      	mov	r0, r5
    5592:	f7fb ff4b 	bl	142c <print_formatted>
		break;
    5596:	e786      	b.n	54a6 <std_print+0x78>
		print_formatted(log_output, str, args[0], args[1], args[2],
    5598:	6a63      	ldr	r3, [r4, #36]	; 0x24
    559a:	9307      	str	r3, [sp, #28]
    559c:	6a23      	ldr	r3, [r4, #32]
    559e:	9306      	str	r3, [sp, #24]
    55a0:	69e3      	ldr	r3, [r4, #28]
    55a2:	9305      	str	r3, [sp, #20]
    55a4:	69a3      	ldr	r3, [r4, #24]
    55a6:	9304      	str	r3, [sp, #16]
    55a8:	6963      	ldr	r3, [r4, #20]
    55aa:	9303      	str	r3, [sp, #12]
    55ac:	6923      	ldr	r3, [r4, #16]
    55ae:	9302      	str	r3, [sp, #8]
    55b0:	68e3      	ldr	r3, [r4, #12]
    55b2:	9301      	str	r3, [sp, #4]
    55b4:	68a3      	ldr	r3, [r4, #8]
    55b6:	9300      	str	r3, [sp, #0]
    55b8:	e9d4 2300 	ldrd	r2, r3, [r4]
    55bc:	4631      	mov	r1, r6
    55be:	4628      	mov	r0, r5
    55c0:	f7fb ff34 	bl	142c <print_formatted>
		break;
    55c4:	e76f      	b.n	54a6 <std_print+0x78>
		print_formatted(log_output, str, args[0], args[1], args[2],
    55c6:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    55c8:	9308      	str	r3, [sp, #32]
    55ca:	6a63      	ldr	r3, [r4, #36]	; 0x24
    55cc:	9307      	str	r3, [sp, #28]
    55ce:	6a23      	ldr	r3, [r4, #32]
    55d0:	9306      	str	r3, [sp, #24]
    55d2:	69e3      	ldr	r3, [r4, #28]
    55d4:	9305      	str	r3, [sp, #20]
    55d6:	69a3      	ldr	r3, [r4, #24]
    55d8:	9304      	str	r3, [sp, #16]
    55da:	6963      	ldr	r3, [r4, #20]
    55dc:	9303      	str	r3, [sp, #12]
    55de:	6923      	ldr	r3, [r4, #16]
    55e0:	9302      	str	r3, [sp, #8]
    55e2:	68e3      	ldr	r3, [r4, #12]
    55e4:	9301      	str	r3, [sp, #4]
    55e6:	68a3      	ldr	r3, [r4, #8]
    55e8:	9300      	str	r3, [sp, #0]
    55ea:	e9d4 2300 	ldrd	r2, r3, [r4]
    55ee:	4631      	mov	r1, r6
    55f0:	4628      	mov	r0, r5
    55f2:	f7fb ff1b 	bl	142c <print_formatted>
		break;
    55f6:	e756      	b.n	54a6 <std_print+0x78>
		print_formatted(log_output, str, args[0], args[1], args[2],
    55f8:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    55fa:	9309      	str	r3, [sp, #36]	; 0x24
    55fc:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    55fe:	9308      	str	r3, [sp, #32]
    5600:	6a63      	ldr	r3, [r4, #36]	; 0x24
    5602:	9307      	str	r3, [sp, #28]
    5604:	6a23      	ldr	r3, [r4, #32]
    5606:	9306      	str	r3, [sp, #24]
    5608:	69e3      	ldr	r3, [r4, #28]
    560a:	9305      	str	r3, [sp, #20]
    560c:	69a3      	ldr	r3, [r4, #24]
    560e:	9304      	str	r3, [sp, #16]
    5610:	6963      	ldr	r3, [r4, #20]
    5612:	9303      	str	r3, [sp, #12]
    5614:	6923      	ldr	r3, [r4, #16]
    5616:	9302      	str	r3, [sp, #8]
    5618:	68e3      	ldr	r3, [r4, #12]
    561a:	9301      	str	r3, [sp, #4]
    561c:	68a3      	ldr	r3, [r4, #8]
    561e:	9300      	str	r3, [sp, #0]
    5620:	e9d4 2300 	ldrd	r2, r3, [r4]
    5624:	4631      	mov	r1, r6
    5626:	4628      	mov	r0, r5
    5628:	f7fb ff00 	bl	142c <print_formatted>
		break;
    562c:	e73b      	b.n	54a6 <std_print+0x78>
		print_formatted(log_output, str, args[0], args[1], args[2],
    562e:	6b23      	ldr	r3, [r4, #48]	; 0x30
    5630:	930a      	str	r3, [sp, #40]	; 0x28
    5632:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    5634:	9309      	str	r3, [sp, #36]	; 0x24
    5636:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    5638:	9308      	str	r3, [sp, #32]
    563a:	6a63      	ldr	r3, [r4, #36]	; 0x24
    563c:	9307      	str	r3, [sp, #28]
    563e:	6a23      	ldr	r3, [r4, #32]
    5640:	9306      	str	r3, [sp, #24]
    5642:	69e3      	ldr	r3, [r4, #28]
    5644:	9305      	str	r3, [sp, #20]
    5646:	69a3      	ldr	r3, [r4, #24]
    5648:	9304      	str	r3, [sp, #16]
    564a:	6963      	ldr	r3, [r4, #20]
    564c:	9303      	str	r3, [sp, #12]
    564e:	6923      	ldr	r3, [r4, #16]
    5650:	9302      	str	r3, [sp, #8]
    5652:	68e3      	ldr	r3, [r4, #12]
    5654:	9301      	str	r3, [sp, #4]
    5656:	68a3      	ldr	r3, [r4, #8]
    5658:	9300      	str	r3, [sp, #0]
    565a:	e9d4 2300 	ldrd	r2, r3, [r4]
    565e:	4631      	mov	r1, r6
    5660:	4628      	mov	r0, r5
    5662:	f7fb fee3 	bl	142c <print_formatted>
		break;
    5666:	e71e      	b.n	54a6 <std_print+0x78>
		print_formatted(log_output, str, args[0], args[1], args[2],
    5668:	6b63      	ldr	r3, [r4, #52]	; 0x34
    566a:	930b      	str	r3, [sp, #44]	; 0x2c
    566c:	6b23      	ldr	r3, [r4, #48]	; 0x30
    566e:	930a      	str	r3, [sp, #40]	; 0x28
    5670:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    5672:	9309      	str	r3, [sp, #36]	; 0x24
    5674:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    5676:	9308      	str	r3, [sp, #32]
    5678:	6a63      	ldr	r3, [r4, #36]	; 0x24
    567a:	9307      	str	r3, [sp, #28]
    567c:	6a23      	ldr	r3, [r4, #32]
    567e:	9306      	str	r3, [sp, #24]
    5680:	69e3      	ldr	r3, [r4, #28]
    5682:	9305      	str	r3, [sp, #20]
    5684:	69a3      	ldr	r3, [r4, #24]
    5686:	9304      	str	r3, [sp, #16]
    5688:	6963      	ldr	r3, [r4, #20]
    568a:	9303      	str	r3, [sp, #12]
    568c:	6923      	ldr	r3, [r4, #16]
    568e:	9302      	str	r3, [sp, #8]
    5690:	68e3      	ldr	r3, [r4, #12]
    5692:	9301      	str	r3, [sp, #4]
    5694:	68a3      	ldr	r3, [r4, #8]
    5696:	9300      	str	r3, [sp, #0]
    5698:	e9d4 2300 	ldrd	r2, r3, [r4]
    569c:	4631      	mov	r1, r6
    569e:	4628      	mov	r0, r5
    56a0:	f7fb fec4 	bl	142c <print_formatted>
		break;
    56a4:	e6ff      	b.n	54a6 <std_print+0x78>
		print_formatted(log_output, str, args[0], args[1], args[2],
    56a6:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    56a8:	930c      	str	r3, [sp, #48]	; 0x30
    56aa:	6b63      	ldr	r3, [r4, #52]	; 0x34
    56ac:	930b      	str	r3, [sp, #44]	; 0x2c
    56ae:	6b23      	ldr	r3, [r4, #48]	; 0x30
    56b0:	930a      	str	r3, [sp, #40]	; 0x28
    56b2:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    56b4:	9309      	str	r3, [sp, #36]	; 0x24
    56b6:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    56b8:	9308      	str	r3, [sp, #32]
    56ba:	6a63      	ldr	r3, [r4, #36]	; 0x24
    56bc:	9307      	str	r3, [sp, #28]
    56be:	6a23      	ldr	r3, [r4, #32]
    56c0:	9306      	str	r3, [sp, #24]
    56c2:	69e3      	ldr	r3, [r4, #28]
    56c4:	9305      	str	r3, [sp, #20]
    56c6:	69a3      	ldr	r3, [r4, #24]
    56c8:	9304      	str	r3, [sp, #16]
    56ca:	6963      	ldr	r3, [r4, #20]
    56cc:	9303      	str	r3, [sp, #12]
    56ce:	6923      	ldr	r3, [r4, #16]
    56d0:	9302      	str	r3, [sp, #8]
    56d2:	68e3      	ldr	r3, [r4, #12]
    56d4:	9301      	str	r3, [sp, #4]
    56d6:	68a3      	ldr	r3, [r4, #8]
    56d8:	9300      	str	r3, [sp, #0]
    56da:	e9d4 2300 	ldrd	r2, r3, [r4]
    56de:	4631      	mov	r1, r6
    56e0:	4628      	mov	r0, r5
    56e2:	f7fb fea3 	bl	142c <print_formatted>
}
    56e6:	e6de      	b.n	54a6 <std_print+0x78>

000056e8 <log_output_flush>:
		     log_output->control_block->offset,
    56e8:	6842      	ldr	r2, [r0, #4]
	buffer_write(log_output->func, log_output->buf,
    56ea:	6881      	ldr	r1, [r0, #8]
{
    56ec:	b510      	push	{r4, lr}
    56ee:	4604      	mov	r4, r0
	buffer_write(log_output->func, log_output->buf,
    56f0:	e9d2 2300 	ldrd	r2, r3, [r2]
    56f4:	6800      	ldr	r0, [r0, #0]
    56f6:	f7ff fe8d 	bl	5414 <buffer_write>
	log_output->control_block->offset = 0;
    56fa:	6863      	ldr	r3, [r4, #4]
    56fc:	2200      	movs	r2, #0
    56fe:	601a      	str	r2, [r3, #0]
}
    5700:	bd10      	pop	{r4, pc}

00005702 <out_func>:
{
    5702:	b538      	push	{r3, r4, r5, lr}
	if (out_ctx->control_block->offset == out_ctx->size) {
    5704:	684b      	ldr	r3, [r1, #4]
    5706:	681a      	ldr	r2, [r3, #0]
    5708:	68cb      	ldr	r3, [r1, #12]
    570a:	429a      	cmp	r2, r3
{
    570c:	4605      	mov	r5, r0
    570e:	460c      	mov	r4, r1
	if (out_ctx->control_block->offset == out_ctx->size) {
    5710:	d102      	bne.n	5718 <out_func+0x16>
		log_output_flush(out_ctx);
    5712:	4608      	mov	r0, r1
    5714:	f7ff ffe8 	bl	56e8 <log_output_flush>
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
    5718:	6863      	ldr	r3, [r4, #4]
    571a:	f3bf 8f5b 	dmb	ish
    571e:	e853 2f00 	ldrex	r2, [r3]
    5722:	1c51      	adds	r1, r2, #1
    5724:	e843 1000 	strex	r0, r1, [r3]
    5728:	2800      	cmp	r0, #0
    572a:	d1f8      	bne.n	571e <out_func+0x1c>
    572c:	f3bf 8f5b 	dmb	ish
	out_ctx->buf[idx] = (uint8_t)c;
    5730:	68a3      	ldr	r3, [r4, #8]
    5732:	549d      	strb	r5, [r3, r2]
}
    5734:	2000      	movs	r0, #0
    5736:	bd38      	pop	{r3, r4, r5, pc}

00005738 <get_status>:
	return GET_STATUS(get_sub_data(dev, type)->flags);
    5738:	68c2      	ldr	r2, [r0, #12]
    573a:	b2cb      	uxtb	r3, r1
    573c:	210c      	movs	r1, #12
    573e:	fb03 2101 	mla	r1, r3, r1, r2
    5742:	6c08      	ldr	r0, [r1, #64]	; 0x40
}
    5744:	f000 0007 	and.w	r0, r0, #7
    5748:	4770      	bx	lr

0000574a <set_off_state>:
	__asm__ volatile(
    574a:	f04f 0320 	mov.w	r3, #32
    574e:	f3ef 8211 	mrs	r2, BASEPRI
    5752:	f383 8811 	msr	BASEPRI, r3
    5756:	f3bf 8f6f 	isb	sy
	uint32_t current_ctx = GET_CTX(*flags);
    575a:	6803      	ldr	r3, [r0, #0]
	if ((current_ctx != 0) && (current_ctx != ctx)) {
    575c:	f013 03c0 	ands.w	r3, r3, #192	; 0xc0
    5760:	d001      	beq.n	5766 <set_off_state+0x1c>
    5762:	428b      	cmp	r3, r1
    5764:	d107      	bne.n	5776 <set_off_state+0x2c>
		*flags = CLOCK_CONTROL_STATUS_OFF;
    5766:	2301      	movs	r3, #1
    5768:	6003      	str	r3, [r0, #0]
	int err = 0;
    576a:	2000      	movs	r0, #0
	__asm__ volatile(
    576c:	f382 8811 	msr	BASEPRI, r2
    5770:	f3bf 8f6f 	isb	sy
}
    5774:	4770      	bx	lr
		err = -EPERM;
    5776:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    577a:	e7f7      	b.n	576c <set_off_state+0x22>

0000577c <set_starting_state>:
{
    577c:	b510      	push	{r4, lr}
	__asm__ volatile(
    577e:	f04f 0320 	mov.w	r3, #32
    5782:	f3ef 8211 	mrs	r2, BASEPRI
    5786:	f383 8811 	msr	BASEPRI, r3
    578a:	f3bf 8f6f 	isb	sy
	uint32_t current_ctx = GET_CTX(*flags);
    578e:	6803      	ldr	r3, [r0, #0]
	if ((*flags & (STATUS_MASK)) == CLOCK_CONTROL_STATUS_OFF) {
    5790:	f003 0407 	and.w	r4, r3, #7
    5794:	2c01      	cmp	r4, #1
    5796:	d106      	bne.n	57a6 <set_starting_state+0x2a>
		*flags = CLOCK_CONTROL_STATUS_STARTING | ctx;
    5798:	6001      	str	r1, [r0, #0]
	int err = 0;
    579a:	2000      	movs	r0, #0
	__asm__ volatile(
    579c:	f382 8811 	msr	BASEPRI, r2
    57a0:	f3bf 8f6f 	isb	sy
}
    57a4:	bd10      	pop	{r4, pc}
	uint32_t current_ctx = GET_CTX(*flags);
    57a6:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
	} else if (current_ctx != ctx) {
    57aa:	428b      	cmp	r3, r1
		err = -EALREADY;
    57ac:	bf14      	ite	ne
    57ae:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
    57b2:	f06f 0044 	mvneq.w	r0, #68	; 0x44
    57b6:	e7f1      	b.n	579c <set_starting_state+0x20>

000057b8 <set_on_state>:
	__asm__ volatile(
    57b8:	f04f 0320 	mov.w	r3, #32
    57bc:	f3ef 8211 	mrs	r2, BASEPRI
    57c0:	f383 8811 	msr	BASEPRI, r3
    57c4:	f3bf 8f6f 	isb	sy
	*flags = CLOCK_CONTROL_STATUS_ON | GET_CTX(*flags);
    57c8:	6803      	ldr	r3, [r0, #0]
    57ca:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
    57ce:	f043 0302 	orr.w	r3, r3, #2
    57d2:	6003      	str	r3, [r0, #0]
	__asm__ volatile(
    57d4:	f382 8811 	msr	BASEPRI, r2
    57d8:	f3bf 8f6f 	isb	sy
}
    57dc:	4770      	bx	lr

000057de <onoff_started_callback>:
	return &data->mgr[type];
    57de:	68c0      	ldr	r0, [r0, #12]
{
    57e0:	b410      	push	{r4}
	return &data->mgr[type];
    57e2:	b2cb      	uxtb	r3, r1
	notify(mgr, 0);
    57e4:	241c      	movs	r4, #28
    57e6:	fb03 0004 	mla	r0, r3, r4, r0
    57ea:	2100      	movs	r1, #0
}
    57ec:	bc10      	pop	{r4}
	notify(mgr, 0);
    57ee:	4710      	bx	r2

000057f0 <blocking_start_callback>:
{
    57f0:	4610      	mov	r0, r2
	z_impl_k_sem_give(sem);
    57f2:	f7fe bf89 	b.w	4708 <z_impl_k_sem_give>

000057f6 <lfclk_stop>:
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
    57f6:	2000      	movs	r0, #0
    57f8:	f7fd bf6e 	b.w	36d8 <nrfx_clock_stop>

000057fc <api_stop>:
{
    57fc:	b538      	push	{r3, r4, r5, lr}
    57fe:	b2c9      	uxtb	r1, r1
	err = set_off_state(&subdata->flags, ctx);
    5800:	240c      	movs	r4, #12
    5802:	434c      	muls	r4, r1
{
    5804:	4605      	mov	r5, r0
	err = set_off_state(&subdata->flags, ctx);
    5806:	68c0      	ldr	r0, [r0, #12]
    5808:	f104 0340 	add.w	r3, r4, #64	; 0x40
    580c:	2180      	movs	r1, #128	; 0x80
    580e:	4418      	add	r0, r3
    5810:	f7ff ff9b 	bl	574a <set_off_state>
	if (err < 0) {
    5814:	2800      	cmp	r0, #0
    5816:	db04      	blt.n	5822 <api_stop+0x26>
	get_sub_config(dev, type)->stop();
    5818:	6869      	ldr	r1, [r5, #4]
    581a:	440c      	add	r4, r1
    581c:	6863      	ldr	r3, [r4, #4]
    581e:	4798      	blx	r3
	return 0;
    5820:	2000      	movs	r0, #0
}
    5822:	bd38      	pop	{r3, r4, r5, pc}

00005824 <api_start>:
{
    5824:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    5828:	b2c9      	uxtb	r1, r1
	err = set_starting_state(&subdata->flags, ctx);
    582a:	240c      	movs	r4, #12
	struct nrf_clock_control_sub_data *subdata = get_sub_data(dev, type);
    582c:	68c5      	ldr	r5, [r0, #12]
	err = set_starting_state(&subdata->flags, ctx);
    582e:	434c      	muls	r4, r1
{
    5830:	4606      	mov	r6, r0
	err = set_starting_state(&subdata->flags, ctx);
    5832:	f104 0040 	add.w	r0, r4, #64	; 0x40
    5836:	2180      	movs	r1, #128	; 0x80
    5838:	4428      	add	r0, r5
{
    583a:	4690      	mov	r8, r2
    583c:	461f      	mov	r7, r3
	err = set_starting_state(&subdata->flags, ctx);
    583e:	f7ff ff9d 	bl	577c <set_starting_state>
	if (err < 0) {
    5842:	2800      	cmp	r0, #0
    5844:	db06      	blt.n	5854 <api_start+0x30>
	subdata->cb = cb;
    5846:	4425      	add	r5, r4
	subdata->user_data = user_data;
    5848:	e9c5 870e 	strd	r8, r7, [r5, #56]	; 0x38
	 get_sub_config(dev, type)->start();
    584c:	6873      	ldr	r3, [r6, #4]
    584e:	591b      	ldr	r3, [r3, r4]
    5850:	4798      	blx	r3
	return 0;
    5852:	2000      	movs	r0, #0
}
    5854:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00005858 <z_clock_isr>:
/* Weak-linked noop defaults for optional driver interfaces: */

void __weak z_clock_isr(void *arg)
{
	__ASSERT_NO_MSG(false);
}
    5858:	4770      	bx	lr

0000585a <z_clock_idle_exit>:
{
}

void __weak z_clock_idle_exit(void)
{
}
    585a:	4770      	bx	lr

0000585c <SEGGER_RTT_Init>:
*    Initializes the RTT Control Block.
*    Should be used in RAM targets, at start of the application.
*
*/
void SEGGER_RTT_Init (void) {
  _DoInit();
    585c:	f7fc bb4c 	b.w	1ef8 <_DoInit>

00005860 <rtt_init>:
 */

K_MUTEX_DEFINE(rtt_term_mutex);

static int rtt_init(const struct device *unused)
{
    5860:	b508      	push	{r3, lr}
	ARG_UNUSED(unused);

	SEGGER_RTT_Init();
    5862:	f7ff fffb 	bl	585c <SEGGER_RTT_Init>

	return 0;
}
    5866:	2000      	movs	r0, #0
    5868:	bd08      	pop	{r3, pc}

0000586a <z_irq_spurious>:
 */
void z_irq_spurious(const void *unused)
{
	ARG_UNUSED(unused);

	z_arm_fatal_error(K_ERR_SPURIOUS_IRQ, NULL);
    586a:	2100      	movs	r1, #0
    586c:	2001      	movs	r0, #1
    586e:	f7fc bc69 	b.w	2144 <z_arm_fatal_error>

00005872 <z_do_kernel_oops>:
 *   fault handler will executed insted of the SVC.
 *
 * @param esf exception frame
 */
void z_do_kernel_oops(const z_arch_esf_t *esf)
{
    5872:	4601      	mov	r1, r0
	}

#endif /* CONFIG_USERSPACE */

#if !defined(CONFIG_EXTRA_EXCEPTION_INFO)
	z_arm_fatal_error(reason, esf);
    5874:	6800      	ldr	r0, [r0, #0]
    5876:	f7fc bc65 	b.w	2144 <z_arm_fatal_error>

0000587a <z_arm_nmi>:
 *
 * @return N/A
 */

void z_arm_nmi(void)
{
    587a:	b508      	push	{r3, lr}
	handler();
    587c:	f7fc fd14 	bl	22a8 <z_SysNmiOnReset>
	z_arm_int_exit();
}
    5880:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	z_arm_int_exit();
    5884:	f7fc bd56 	b.w	2334 <z_arm_exc_exit>

00005888 <strcpy>:

char *strcpy(char *_MLIBC_RESTRICT d, const char *_MLIBC_RESTRICT s)
{
	char *dest = d;

	while (*s != '\0') {
    5888:	3901      	subs	r1, #1
    588a:	4603      	mov	r3, r0
    588c:	f811 2f01 	ldrb.w	r2, [r1, #1]!
    5890:	b90a      	cbnz	r2, 5896 <strcpy+0xe>
		*d = *s;
		d++;
		s++;
	}

	*d = '\0';
    5892:	701a      	strb	r2, [r3, #0]

	return dest;
}
    5894:	4770      	bx	lr
		*d = *s;
    5896:	f803 2b01 	strb.w	r2, [r3], #1
		s++;
    589a:	e7f7      	b.n	588c <strcpy+0x4>

0000589c <strncpy>:
 *
 * @return pointer to destination buffer <d>
 */

char *strncpy(char *_MLIBC_RESTRICT d, const char *_MLIBC_RESTRICT s, size_t n)
{
    589c:	b570      	push	{r4, r5, r6, lr}
    589e:	3901      	subs	r1, #1
    58a0:	4605      	mov	r5, r0
    58a2:	462c      	mov	r4, r5
	char *dest = d;

	while ((n > 0) && *s != '\0') {
    58a4:	b142      	cbz	r2, 58b8 <strncpy+0x1c>
    58a6:	f811 3f01 	ldrb.w	r3, [r1, #1]!
    58aa:	1e56      	subs	r6, r2, #1
    58ac:	b92b      	cbnz	r3, 58ba <strncpy+0x1e>
    58ae:	442a      	add	r2, r5
		d++;
		n--;
	}

	while (n > 0) {
		*d = '\0';
    58b0:	f804 3b01 	strb.w	r3, [r4], #1
	while (n > 0) {
    58b4:	42a2      	cmp	r2, r4
    58b6:	d1fb      	bne.n	58b0 <strncpy+0x14>
		d++;
		n--;
	}

	return dest;
}
    58b8:	bd70      	pop	{r4, r5, r6, pc}
		*d = *s;
    58ba:	f805 3b01 	strb.w	r3, [r5], #1
		n--;
    58be:	4632      	mov	r2, r6
    58c0:	e7ef      	b.n	58a2 <strncpy+0x6>

000058c2 <strlen>:
 *
 * @return number of bytes in string <s>
 */

size_t strlen(const char *s)
{
    58c2:	4603      	mov	r3, r0
	size_t n = 0;
    58c4:	2000      	movs	r0, #0

	while (*s != '\0') {
    58c6:	5c1a      	ldrb	r2, [r3, r0]
    58c8:	b902      	cbnz	r2, 58cc <strlen+0xa>
		s++;
		n++;
	}

	return n;
}
    58ca:	4770      	bx	lr
		n++;
    58cc:	3001      	adds	r0, #1
    58ce:	e7fa      	b.n	58c6 <strlen+0x4>

000058d0 <strcmp>:
 * @return negative # if <s1> < <s2>, 0 if <s1> == <s2>, else positive #
 */

int strcmp(const char *s1, const char *s2)
{
	while ((*s1 == *s2) && (*s1 != '\0')) {
    58d0:	1e43      	subs	r3, r0, #1
    58d2:	3901      	subs	r1, #1
    58d4:	f813 2f01 	ldrb.w	r2, [r3, #1]!
    58d8:	f811 0f01 	ldrb.w	r0, [r1, #1]!
    58dc:	4282      	cmp	r2, r0
    58de:	d101      	bne.n	58e4 <strcmp+0x14>
    58e0:	2a00      	cmp	r2, #0
    58e2:	d1f7      	bne.n	58d4 <strcmp+0x4>
		s1++;
		s2++;
	}

	return *s1 - *s2;
}
    58e4:	1a10      	subs	r0, r2, r0
    58e6:	4770      	bx	lr

000058e8 <memcpy>:
 *
 * @return pointer to start of destination buffer
 */

void *memcpy(void *_MLIBC_RESTRICT d, const void *_MLIBC_RESTRICT s, size_t n)
{
    58e8:	b5f0      	push	{r4, r5, r6, r7, lr}

	unsigned char *d_byte = (unsigned char *)d;
	const unsigned char *s_byte = (const unsigned char *)s;
	const uintptr_t mask = sizeof(mem_word_t) - 1;

	if ((((uintptr_t)d ^ (uintptr_t)s_byte) & mask) == 0) {
    58ea:	ea81 0400 	eor.w	r4, r1, r0
    58ee:	07a5      	lsls	r5, r4, #30
    58f0:	4603      	mov	r3, r0
    58f2:	d00b      	beq.n	590c <memcpy+0x24>
    58f4:	3b01      	subs	r3, #1
    58f6:	440a      	add	r2, r1
		s_byte = (unsigned char *)s_word;
	}

	/* do byte-sized copying until finished */

	while (n > 0) {
    58f8:	4291      	cmp	r1, r2
    58fa:	d11b      	bne.n	5934 <memcpy+0x4c>
		*(d_byte++) = *(s_byte++);
		n--;
	}

	return d;
}
    58fc:	bdf0      	pop	{r4, r5, r6, r7, pc}
			if (n == 0) {
    58fe:	2a00      	cmp	r2, #0
    5900:	d0fc      	beq.n	58fc <memcpy+0x14>
			*(d_byte++) = *(s_byte++);
    5902:	f811 4b01 	ldrb.w	r4, [r1], #1
    5906:	f803 4b01 	strb.w	r4, [r3], #1
			n--;
    590a:	3a01      	subs	r2, #1
		while (((uintptr_t)d_byte) & mask) {
    590c:	079c      	lsls	r4, r3, #30
    590e:	d1f6      	bne.n	58fe <memcpy+0x16>
    5910:	f022 0403 	bic.w	r4, r2, #3
    5914:	1f1d      	subs	r5, r3, #4
    5916:	0896      	lsrs	r6, r2, #2
    5918:	190f      	adds	r7, r1, r4
		while (n >= sizeof(mem_word_t)) {
    591a:	42b9      	cmp	r1, r7
    591c:	d105      	bne.n	592a <memcpy+0x42>
    591e:	f06f 0503 	mvn.w	r5, #3
    5922:	fb05 2206 	mla	r2, r5, r6, r2
    5926:	4423      	add	r3, r4
    5928:	e7e4      	b.n	58f4 <memcpy+0xc>
			*(d_word++) = *(s_word++);
    592a:	f851 cb04 	ldr.w	ip, [r1], #4
    592e:	f845 cf04 	str.w	ip, [r5, #4]!
			n -= sizeof(mem_word_t);
    5932:	e7f2      	b.n	591a <memcpy+0x32>
		*(d_byte++) = *(s_byte++);
    5934:	f811 4b01 	ldrb.w	r4, [r1], #1
    5938:	f803 4f01 	strb.w	r4, [r3, #1]!
		n--;
    593c:	e7dc      	b.n	58f8 <memcpy+0x10>

0000593e <memset>:
 *
 * @return pointer to start of buffer
 */

void *memset(void *buf, int c, size_t n)
{
    593e:	b570      	push	{r4, r5, r6, lr}
	/* do byte-sized initialization until word-aligned or finished */

	unsigned char *d_byte = (unsigned char *)buf;
	unsigned char c_byte = (unsigned char)c;
    5940:	b2c9      	uxtb	r1, r1
	unsigned char *d_byte = (unsigned char *)buf;
    5942:	4603      	mov	r3, r0

	while (((uintptr_t)d_byte) & (sizeof(mem_word_t) - 1)) {
    5944:	079c      	lsls	r4, r3, #30
    5946:	d111      	bne.n	596c <memset+0x2e>
	/* do word-sized initialization as long as possible */

	mem_word_t *d_word = (mem_word_t *)d_byte;
	mem_word_t c_word = (mem_word_t)c_byte;

	c_word |= c_word << 8;
    5948:	ea41 2401 	orr.w	r4, r1, r1, lsl #8
	c_word |= c_word << 16;
    594c:	f022 0603 	bic.w	r6, r2, #3
    5950:	ea44 4504 	orr.w	r5, r4, r4, lsl #16
#if Z_MEM_WORD_T_WIDTH > 32
	c_word |= c_word << 32;
#endif

	while (n >= sizeof(mem_word_t)) {
    5954:	441e      	add	r6, r3
    5956:	0894      	lsrs	r4, r2, #2
    5958:	42b3      	cmp	r3, r6
    595a:	d10d      	bne.n	5978 <memset+0x3a>
    595c:	f06f 0503 	mvn.w	r5, #3
    5960:	fb05 2204 	mla	r2, r5, r4, r2
    5964:	441a      	add	r2, r3

	/* do byte-sized initialization until finished */

	d_byte = (unsigned char *)d_word;

	while (n > 0) {
    5966:	4293      	cmp	r3, r2
    5968:	d109      	bne.n	597e <memset+0x40>
		*(d_byte++) = c_byte;
		n--;
	}

	return buf;
}
    596a:	bd70      	pop	{r4, r5, r6, pc}
		if (n == 0) {
    596c:	2a00      	cmp	r2, #0
    596e:	d0fc      	beq.n	596a <memset+0x2c>
		*(d_byte++) = c_byte;
    5970:	f803 1b01 	strb.w	r1, [r3], #1
		n--;
    5974:	3a01      	subs	r2, #1
    5976:	e7e5      	b.n	5944 <memset+0x6>
		*(d_word++) = c_word;
    5978:	f843 5b04 	str.w	r5, [r3], #4
		n -= sizeof(mem_word_t);
    597c:	e7ec      	b.n	5958 <memset+0x1a>
		*(d_byte++) = c_byte;
    597e:	f803 1b01 	strb.w	r1, [r3], #1
		n--;
    5982:	e7f0      	b.n	5966 <memset+0x28>

00005984 <_stdout_hook_default>:
}
    5984:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    5988:	4770      	bx	lr

0000598a <z_platform_init>:

void z_platform_init(void)
{
	SystemInit();
    598a:	f7fd bd27 	b.w	33dc <SystemInit>

0000598e <nrf_gpio_cfg_sense_set>:
    *p_pin = pin_number & 0x1F;
    598e:	f000 001f 	and.w	r0, r0, #31
    5992:	0080      	lsls	r0, r0, #2
    5994:	f100 40a0 	add.w	r0, r0, #1342177280	; 0x50000000
    uint32_t cnf = reg->PIN_CNF[pin_number] & ~GPIO_PIN_CNF_SENSE_Msk;
    5998:	f8d0 3700 	ldr.w	r3, [r0, #1792]	; 0x700
    599c:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
    reg->PIN_CNF[pin_number] = cnf | (sense_config << GPIO_PIN_CNF_SENSE_Pos);
    59a0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
    59a4:	f8c0 3700 	str.w	r3, [r0, #1792]	; 0x700
}
    59a8:	4770      	bx	lr

000059aa <gpio_nrfx_port_get_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    59aa:	6843      	ldr	r3, [r0, #4]
    59ac:	685b      	ldr	r3, [r3, #4]
    return p_reg->IN;
    59ae:	f8d3 3510 	ldr.w	r3, [r3, #1296]	; 0x510
	*value = nrf_gpio_port_in_read(reg);
    59b2:	600b      	str	r3, [r1, #0]
}
    59b4:	2000      	movs	r0, #0
    59b6:	4770      	bx	lr

000059b8 <gpio_nrfx_port_set_masked_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    59b8:	6843      	ldr	r3, [r0, #4]
    59ba:	685b      	ldr	r3, [r3, #4]
    return p_reg->OUT;
    59bc:	f8d3 0504 	ldr.w	r0, [r3, #1284]	; 0x504
	nrf_gpio_port_out_write(reg, value_tmp | (mask & value));
    59c0:	4042      	eors	r2, r0
    59c2:	400a      	ands	r2, r1
    59c4:	4042      	eors	r2, r0
    p_reg->OUT = value;
    59c6:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
}
    59ca:	2000      	movs	r0, #0
    59cc:	4770      	bx	lr

000059ce <gpio_nrfx_port_set_bits_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    59ce:	6843      	ldr	r3, [r0, #4]
    59d0:	685b      	ldr	r3, [r3, #4]
}
    59d2:	2000      	movs	r0, #0
    p_reg->OUTSET = set_mask;
    59d4:	f8c3 1508 	str.w	r1, [r3, #1288]	; 0x508
    59d8:	4770      	bx	lr

000059da <gpio_nrfx_port_clear_bits_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    59da:	6843      	ldr	r3, [r0, #4]
    59dc:	685b      	ldr	r3, [r3, #4]
}
    59de:	2000      	movs	r0, #0
    p_reg->OUTCLR = clr_mask;
    59e0:	f8c3 150c 	str.w	r1, [r3, #1292]	; 0x50c
    59e4:	4770      	bx	lr

000059e6 <gpio_nrfx_port_toggle_bits>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    59e6:	6843      	ldr	r3, [r0, #4]
    59e8:	685a      	ldr	r2, [r3, #4]
    return p_reg->OUT;
    59ea:	f8d2 3504 	ldr.w	r3, [r2, #1284]	; 0x504
	nrf_gpio_port_out_write(reg, value ^ mask);
    59ee:	404b      	eors	r3, r1
    p_reg->OUT = value;
    59f0:	f8c2 3504 	str.w	r3, [r2, #1284]	; 0x504
}
    59f4:	2000      	movs	r0, #0
    59f6:	4770      	bx	lr

000059f8 <gpio_nrfx_manage_callback>:
	return gpio_manage_callback(&get_port_data(port)->callbacks,
    59f8:	68c3      	ldr	r3, [r0, #12]
Z_GENLIST_IS_EMPTY(slist)
    59fa:	6858      	ldr	r0, [r3, #4]
{
    59fc:	b530      	push	{r4, r5, lr}
	if (!sys_slist_is_empty(callbacks)) {
    59fe:	b158      	cbz	r0, 5a18 <gpio_nrfx_manage_callback+0x20>
 * @return true if node was removed
 */
static inline bool sys_slist_find_and_remove(sys_slist_t *list,
					     sys_snode_t *node);

Z_GENLIST_FIND_AND_REMOVE(slist, snode)
    5a00:	2400      	movs	r4, #0
    5a02:	4281      	cmp	r1, r0
    5a04:	d113      	bne.n	5a2e <gpio_nrfx_manage_callback+0x36>
Z_GENLIST_REMOVE(slist, snode)
    5a06:	6808      	ldr	r0, [r1, #0]
    5a08:	b95c      	cbnz	r4, 5a22 <gpio_nrfx_manage_callback+0x2a>
    5a0a:	689c      	ldr	r4, [r3, #8]
	list->head = node;
    5a0c:	6058      	str	r0, [r3, #4]
Z_GENLIST_REMOVE(slist, snode)
    5a0e:	42a1      	cmp	r1, r4
    5a10:	d100      	bne.n	5a14 <gpio_nrfx_manage_callback+0x1c>
	list->tail = node;
    5a12:	6098      	str	r0, [r3, #8]
	parent->next = child;
    5a14:	2000      	movs	r0, #0
    5a16:	6008      	str	r0, [r1, #0]
	if (set) {
    5a18:	b972      	cbnz	r2, 5a38 <gpio_nrfx_manage_callback+0x40>
	return 0;
    5a1a:	2000      	movs	r0, #0
}
    5a1c:	bd30      	pop	{r4, r5, pc}
    5a1e:	4628      	mov	r0, r5
    5a20:	e7ef      	b.n	5a02 <gpio_nrfx_manage_callback+0xa>
    5a22:	6020      	str	r0, [r4, #0]
Z_GENLIST_REMOVE(slist, snode)
    5a24:	6898      	ldr	r0, [r3, #8]
    5a26:	4281      	cmp	r1, r0
	list->tail = node;
    5a28:	bf08      	it	eq
    5a2a:	609c      	streq	r4, [r3, #8]
}
    5a2c:	e7f2      	b.n	5a14 <gpio_nrfx_manage_callback+0x1c>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
    5a2e:	6805      	ldr	r5, [r0, #0]
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
    5a30:	4604      	mov	r4, r0
    5a32:	2d00      	cmp	r5, #0
    5a34:	d1f3      	bne.n	5a1e <gpio_nrfx_manage_callback+0x26>
			if (!set) {
    5a36:	b13a      	cbz	r2, 5a48 <gpio_nrfx_manage_callback+0x50>
Z_GENLIST_PREPEND(slist, snode)
    5a38:	685a      	ldr	r2, [r3, #4]
	parent->next = child;
    5a3a:	600a      	str	r2, [r1, #0]
Z_GENLIST_PREPEND(slist, snode)
    5a3c:	6898      	ldr	r0, [r3, #8]
	list->head = node;
    5a3e:	6059      	str	r1, [r3, #4]
Z_GENLIST_PREPEND(slist, snode)
    5a40:	2800      	cmp	r0, #0
    5a42:	d1ea      	bne.n	5a1a <gpio_nrfx_manage_callback+0x22>
	list->tail = node;
    5a44:	6099      	str	r1, [r3, #8]
}
    5a46:	e7e9      	b.n	5a1c <gpio_nrfx_manage_callback+0x24>
				return -EINVAL;
    5a48:	f06f 0015 	mvn.w	r0, #21
	return gpio_manage_callback(&get_port_data(port)->callbacks,
    5a4c:	e7e6      	b.n	5a1c <gpio_nrfx_manage_callback+0x24>

00005a4e <any_other_channel_is_active>:
{
    5a4e:	b530      	push	{r4, r5, lr}
    5a50:	2300      	movs	r3, #0
		data->current[channel] & PWM_NRFX_CH_PULSE_CYCLES_MASK;
    5a52:	1d0c      	adds	r4, r1, #4
		if (i != channel && pwm_channel_is_active(i, data)) {
    5a54:	b2da      	uxtb	r2, r3
    5a56:	4282      	cmp	r2, r0
    5a58:	d007      	beq.n	5a6a <any_other_channel_is_active+0x1c>
	uint16_t pulse_cycle =
    5a5a:	f834 2013 	ldrh.w	r2, [r4, r3, lsl #1]
    5a5e:	f3c2 020e 	ubfx	r2, r2, #0, #15
	return (pulse_cycle > 0 && pulse_cycle < data->countertop);
    5a62:	b112      	cbz	r2, 5a6a <any_other_channel_is_active+0x1c>
    5a64:	898d      	ldrh	r5, [r1, #12]
    5a66:	4295      	cmp	r5, r2
    5a68:	d804      	bhi.n	5a74 <any_other_channel_is_active+0x26>
	for (i = 0; i < NRF_PWM_CHANNEL_COUNT; ++i) {
    5a6a:	3301      	adds	r3, #1
    5a6c:	2b04      	cmp	r3, #4
    5a6e:	d1f1      	bne.n	5a54 <any_other_channel_is_active+0x6>
	return false;
    5a70:	2000      	movs	r0, #0
}
    5a72:	bd30      	pop	{r4, r5, pc}
			return true;
    5a74:	2001      	movs	r0, #1
    5a76:	e7fc      	b.n	5a72 <any_other_channel_is_active+0x24>

00005a78 <uarte_nrfx_isr_int>:
	return config->uarte_regs;
    5a78:	6843      	ldr	r3, [r0, #4]
    5a7a:	681b      	ldr	r3, [r3, #0]
    return p_reg->INTENSET & mask;
    5a7c:	f8d3 2304 	ldr.w	r2, [r3, #772]	; 0x304
	if (nrf_uarte_int_enable_check(uarte, NRF_UARTE_INT_ENDTX_MASK) &&
    5a80:	05d2      	lsls	r2, r2, #23
    5a82:	d518      	bpl.n	5ab6 <uarte_nrfx_isr_int+0x3e>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    5a84:	f8d3 2120 	ldr.w	r2, [r3, #288]	; 0x120
    5a88:	b1aa      	cbz	r2, 5ab6 <uarte_nrfx_isr_int+0x3e>
	__asm__ volatile(
    5a8a:	f04f 0120 	mov.w	r1, #32
    5a8e:	f3ef 8211 	mrs	r2, BASEPRI
    5a92:	f381 8811 	msr	BASEPRI, r1
    5a96:	f3bf 8f6f 	isb	sy
    5a9a:	f8d3 1120 	ldr.w	r1, [r3, #288]	; 0x120
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDTX)) {
    5a9e:	b131      	cbz	r1, 5aae <uarte_nrfx_isr_int+0x36>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    5aa0:	2100      	movs	r1, #0
    5aa2:	f8c3 1120 	str.w	r1, [r3, #288]	; 0x120
    5aa6:	f8d3 1120 	ldr.w	r1, [r3, #288]	; 0x120
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    5aaa:	2101      	movs	r1, #1
    5aac:	60d9      	str	r1, [r3, #12]
	__asm__ volatile(
    5aae:	f382 8811 	msr	BASEPRI, r2
    5ab2:	f3bf 8f6f 	isb	sy
}
    5ab6:	4770      	bx	lr

00005ab8 <uarte_nrfx_config_get>:
	*cfg = get_dev_data(dev)->uart_config;
    5ab8:	68c2      	ldr	r2, [r0, #12]
{
    5aba:	460b      	mov	r3, r1
	*cfg = get_dev_data(dev)->uart_config;
    5abc:	e9d2 0101 	ldrd	r0, r1, [r2, #4]
    5ac0:	e883 0003 	stmia.w	r3, {r0, r1}
}
    5ac4:	2000      	movs	r0, #0
    5ac6:	4770      	bx	lr

00005ac8 <uarte_nrfx_err_check>:
	return config->uarte_regs;
    5ac8:	6843      	ldr	r3, [r0, #4]
    5aca:	681b      	ldr	r3, [r3, #0]
    uint32_t errsrc_mask = p_reg->ERRORSRC;
    5acc:	f8d3 0480 	ldr.w	r0, [r3, #1152]	; 0x480
    p_reg->ERRORSRC = errsrc_mask;
    5ad0:	f8c3 0480 	str.w	r0, [r3, #1152]	; 0x480
}
    5ad4:	4770      	bx	lr

00005ad6 <is_tx_ready>:
	const struct uarte_nrfx_config *config = get_dev_config(dev);
    5ad6:	6842      	ldr	r2, [r0, #4]
	return config->uarte_regs;
    5ad8:	6813      	ldr	r3, [r2, #0]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    5ada:	f8d3 0158 	ldr.w	r0, [r3, #344]	; 0x158
	return nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED) ||
    5ade:	b938      	cbnz	r0, 5af0 <is_tx_ready+0x1a>
    5ae0:	7992      	ldrb	r2, [r2, #6]
    5ae2:	b932      	cbnz	r2, 5af2 <is_tx_ready+0x1c>
    5ae4:	f8d3 0120 	ldr.w	r0, [r3, #288]	; 0x120
    5ae8:	3800      	subs	r0, #0
    5aea:	bf18      	it	ne
    5aec:	2001      	movne	r0, #1
    5aee:	4770      	bx	lr
    5af0:	2001      	movs	r0, #1
}
    5af2:	4770      	bx	lr

00005af4 <uarte_nrfx_poll_in>:
	return config->uarte_regs;
    5af4:	6843      	ldr	r3, [r0, #4]
	const struct uarte_nrfx_data *data = get_dev_data(dev);
    5af6:	68c2      	ldr	r2, [r0, #12]
	return config->uarte_regs;
    5af8:	681b      	ldr	r3, [r3, #0]
    5afa:	f8d3 0110 	ldr.w	r0, [r3, #272]	; 0x110
	if (!nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDRX)) {
    5afe:	b148      	cbz	r0, 5b14 <uarte_nrfx_poll_in+0x20>
	*c = data->rx_data;
    5b00:	7b52      	ldrb	r2, [r2, #13]
    5b02:	700a      	strb	r2, [r1, #0]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    5b04:	2000      	movs	r0, #0
    5b06:	f8c3 0110 	str.w	r0, [r3, #272]	; 0x110
    5b0a:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    5b0e:	2201      	movs	r2, #1
    5b10:	601a      	str	r2, [r3, #0]
	return 0;
    5b12:	4770      	bx	lr
		return -1;
    5b14:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
    5b18:	4770      	bx	lr

00005b1a <nrfx_isr>:
#include <nrfx.h>
#include <kernel.h>

void nrfx_isr(const void *irq_handler)
{
	((nrfx_irq_handler_t)irq_handler)();
    5b1a:	4700      	bx	r0

00005b1c <nrfx_busy_wait>:
	z_impl_k_busy_wait(usec_to_wait);
    5b1c:	f000 b932 	b.w	5d84 <z_impl_k_busy_wait>

00005b20 <nrfx_clock_enable>:
{
    5b20:	b508      	push	{r3, lr}
    priority = NRFX_CLOCK_DEFAULT_CONFIG_IRQ_PRIORITY;
#else
    #error "This code is not supposed to be compiled when neither POWER nor CLOCK is enabled."
#endif

    if (!NRFX_IRQ_IS_ENABLED(nrfx_get_irq_number(NRF_CLOCK)))
    5b22:	2000      	movs	r0, #0
    5b24:	f7fc fa98 	bl	2058 <arch_irq_is_enabled>
    5b28:	b918      	cbnz	r0, 5b32 <nrfx_clock_enable+0x12>
}
    5b2a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    {
        NRFX_IRQ_PRIORITY_SET(nrfx_get_irq_number(NRF_CLOCK), priority);
        NRFX_IRQ_ENABLE(nrfx_get_irq_number(NRF_CLOCK));
    5b2e:	f7fc ba83 	b.w	2038 <arch_irq_enable>
    5b32:	bd08      	pop	{r3, pc}

00005b34 <start_playback.isra.0>:
static uint32_t start_playback(nrfx_pwm_t const * p_instance,
    5b34:	b510      	push	{r4, lr}
    p_cb->state = NRFX_DRV_STATE_POWERED_ON;
    5b36:	2402      	movs	r4, #2
    5b38:	720c      	strb	r4, [r1, #8]
    p_cb->flags = flags;
    5b3a:	724a      	strb	r2, [r1, #9]
    if (p_cb->handler)
    5b3c:	6809      	ldr	r1, [r1, #0]
    5b3e:	b171      	cbz	r1, 5b5e <start_playback.isra.0+0x2a>
            int_mask |= NRF_PWM_INT_SEQEND0_MASK;
    5b40:	f012 0f04 	tst.w	r2, #4
    5b44:	bf0c      	ite	eq
    5b46:	2182      	moveq	r1, #130	; 0x82
    5b48:	2192      	movne	r1, #146	; 0x92
        if (flags & NRFX_PWM_FLAG_SIGNAL_END_SEQ1)
    5b4a:	0714      	lsls	r4, r2, #28
            int_mask |= NRF_PWM_INT_SEQEND1_MASK;
    5b4c:	bf48      	it	mi
    5b4e:	f041 0120 	orrmi.w	r1, r1, #32
        if (flags & NRFX_PWM_FLAG_NO_EVT_FINISHED)
    5b52:	06d4      	lsls	r4, r2, #27
            int_mask &= ~NRF_PWM_INT_LOOPSDONE_MASK;
    5b54:	bf48      	it	mi
    5b56:	f021 0180 	bicmi.w	r1, r1, #128	; 0x80
    p_reg->INTEN = mask;
    5b5a:	f8c0 1300 	str.w	r1, [r0, #768]	; 0x300
    if (flags & NRFX_PWM_FLAG_START_VIA_TASK)
    5b5e:	0612      	lsls	r2, r2, #24
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    5b60:	f04f 0100 	mov.w	r1, #0
    5b64:	f8c0 1104 	str.w	r1, [r0, #260]	; 0x104
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    5b68:	bf58      	it	pl
    5b6a:	2201      	movpl	r2, #1
    5b6c:	f8d0 4104 	ldr.w	r4, [r0, #260]	; 0x104
    5b70:	bf56      	itet	pl
    5b72:	50c2      	strpl	r2, [r0, r3]
    return ((uint32_t)p_reg + (uint32_t)task);
    5b74:	18c0      	addmi	r0, r0, r3
    return 0;
    5b76:	4608      	movpl	r0, r1
}
    5b78:	bd10      	pop	{r4, pc}

00005b7a <nrfx_pwm_stop>:
{
    5b7a:	b538      	push	{r3, r4, r5, lr}
    nrf_pwm_shorts_set(p_instance->p_registers, 0);
    5b7c:	6803      	ldr	r3, [r0, #0]
    p_reg->SHORTS = mask;
    5b7e:	2200      	movs	r2, #0
    5b80:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    5b84:	2201      	movs	r2, #1
    5b86:	605a      	str	r2, [r3, #4]
{
    5b88:	4605      	mov	r5, r0
    5b8a:	460c      	mov	r4, r1
    if (nrfx_pwm_is_stopped(p_instance))
    5b8c:	f7fd ff10 	bl	39b0 <nrfx_pwm_is_stopped>
    5b90:	b938      	cbnz	r0, 5ba2 <nrfx_pwm_stop+0x28>
            if (nrfx_pwm_is_stopped(p_instance))
    5b92:	4628      	mov	r0, r5
    5b94:	f7fd ff0c 	bl	39b0 <nrfx_pwm_is_stopped>
    5b98:	b918      	cbnz	r0, 5ba2 <nrfx_pwm_stop+0x28>
        } while (wait_until_stopped);
    5b9a:	2c00      	cmp	r4, #0
    5b9c:	d1f9      	bne.n	5b92 <nrfx_pwm_stop+0x18>
}
    5b9e:	4620      	mov	r0, r4
    5ba0:	bd38      	pop	{r3, r4, r5, pc}
        ret_val = true;
    5ba2:	2401      	movs	r4, #1
    5ba4:	e7fb      	b.n	5b9e <nrfx_pwm_stop+0x24>

00005ba6 <z_sys_power_save_idle_exit>:
	z_clock_idle_exit();
    5ba6:	f7ff be58 	b.w	585a <z_clock_idle_exit>

00005baa <k_mem_slab_init>:
{
    5baa:	b530      	push	{r4, r5, lr}
	slab->num_used = 0U;
    5bac:	2400      	movs	r4, #0
    5bae:	6184      	str	r4, [r0, #24]
	CHECKIF(((slab->block_size | (uintptr_t)slab->buffer) &
    5bb0:	ea41 0402 	orr.w	r4, r1, r2
    5bb4:	f014 0403 	ands.w	r4, r4, #3
	slab->block_size = block_size;
    5bb8:	e9c0 3202 	strd	r3, r2, [r0, #8]
	slab->buffer = buffer;
    5bbc:	6101      	str	r1, [r0, #16]
	CHECKIF(((slab->block_size | (uintptr_t)slab->buffer) &
    5bbe:	d10c      	bne.n	5bda <k_mem_slab_init+0x30>
	slab->free_list = NULL;
    5bc0:	6144      	str	r4, [r0, #20]
	for (j = 0U; j < slab->num_blocks; j++) {
    5bc2:	42a3      	cmp	r3, r4
    5bc4:	d103      	bne.n	5bce <k_mem_slab_init+0x24>
	list->tail = (sys_dnode_t *)list;
    5bc6:	e9c0 0000 	strd	r0, r0, [r0]
}
    5bca:	2000      	movs	r0, #0
}
    5bcc:	bd30      	pop	{r4, r5, pc}
		*(char **)p = slab->free_list;
    5bce:	6945      	ldr	r5, [r0, #20]
    5bd0:	600d      	str	r5, [r1, #0]
	for (j = 0U; j < slab->num_blocks; j++) {
    5bd2:	3401      	adds	r4, #1
		slab->free_list = p;
    5bd4:	6141      	str	r1, [r0, #20]
		p += slab->block_size;
    5bd6:	4411      	add	r1, r2
	for (j = 0U; j < slab->num_blocks; j++) {
    5bd8:	e7f3      	b.n	5bc2 <k_mem_slab_init+0x18>
		return -EINVAL;
    5bda:	f06f 0015 	mvn.w	r0, #21
	return rc;
    5bde:	e7f5      	b.n	5bcc <k_mem_slab_init+0x22>

00005be0 <z_find_first_thread_to_unpend>:
{
    5be0:	b510      	push	{r4, lr}
	__asm__ volatile(
    5be2:	f04f 0320 	mov.w	r3, #32
    5be6:	f3ef 8411 	mrs	r4, BASEPRI
    5bea:	f383 8811 	msr	BASEPRI, r3
    5bee:	f3bf 8f6f 	isb	sy
		ret = _priq_wait_best(&wait_q->waitq);
    5bf2:	f000 f837 	bl	5c64 <z_priq_dumb_best>
	__asm__ volatile(
    5bf6:	f384 8811 	msr	BASEPRI, r4
    5bfa:	f3bf 8f6f 	isb	sy
}
    5bfe:	bd10      	pop	{r4, pc}

00005c00 <z_unpend_thread_no_timeout>:
{
    5c00:	b510      	push	{r4, lr}
	__asm__ volatile(
    5c02:	f04f 0320 	mov.w	r3, #32
    5c06:	f3ef 8411 	mrs	r4, BASEPRI
    5c0a:	f383 8811 	msr	BASEPRI, r3
    5c0e:	f3bf 8f6f 	isb	sy
		unpend_thread_no_timeout(thread);
    5c12:	f000 f81b 	bl	5c4c <unpend_thread_no_timeout>
	__asm__ volatile(
    5c16:	f384 8811 	msr	BASEPRI, r4
    5c1a:	f3bf 8f6f 	isb	sy
}
    5c1e:	bd10      	pop	{r4, pc}

00005c20 <z_reschedule_irqlock>:
	return arch_irq_unlocked(key) && !arch_is_in_isr();
    5c20:	4603      	mov	r3, r0
    5c22:	b920      	cbnz	r0, 5c2e <z_reschedule_irqlock+0xe>
    5c24:	f3ef 8205 	mrs	r2, IPSR
    5c28:	b90a      	cbnz	r2, 5c2e <z_reschedule_irqlock+0xe>
    5c2a:	f7fc b9eb 	b.w	2004 <arch_swap>
    5c2e:	f383 8811 	msr	BASEPRI, r3
    5c32:	f3bf 8f6f 	isb	sy
}
    5c36:	4770      	bx	lr

00005c38 <z_reschedule_unlocked>:
	__asm__ volatile(
    5c38:	f04f 0320 	mov.w	r3, #32
    5c3c:	f3ef 8011 	mrs	r0, BASEPRI
    5c40:	f383 8811 	msr	BASEPRI, r3
    5c44:	f3bf 8f6f 	isb	sy
	(void) z_reschedule_irqlock(arch_irq_lock());
    5c48:	f7ff bfea 	b.w	5c20 <z_reschedule_irqlock>

00005c4c <unpend_thread_no_timeout>:
{
    5c4c:	4601      	mov	r1, r0
    5c4e:	b508      	push	{r3, lr}
	_priq_wait_remove(&pended_on(thread)->waitq, thread);
    5c50:	6880      	ldr	r0, [r0, #8]
    5c52:	f7fe fa31 	bl	40b8 <z_priq_dumb_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
    5c56:	7b4b      	ldrb	r3, [r1, #13]
    5c58:	f023 0302 	bic.w	r3, r3, #2
    5c5c:	734b      	strb	r3, [r1, #13]
	thread->base.pended_on = NULL;
    5c5e:	2300      	movs	r3, #0
    5c60:	608b      	str	r3, [r1, #8]
}
    5c62:	bd08      	pop	{r3, pc}

00005c64 <z_priq_dumb_best>:
{
    5c64:	4603      	mov	r3, r0
	return list->head == list;
    5c66:	6800      	ldr	r0, [r0, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    5c68:	4283      	cmp	r3, r0
    5c6a:	d003      	beq.n	5c74 <z_priq_dumb_best+0x10>
	if (n != NULL) {
    5c6c:	2800      	cmp	r0, #0
    5c6e:	bf38      	it	cc
    5c70:	2000      	movcc	r0, #0
    5c72:	4770      	bx	lr
	struct k_thread *thread = NULL;
    5c74:	2000      	movs	r0, #0
}
    5c76:	4770      	bx	lr

00005c78 <z_ready_thread>:
{
    5c78:	b510      	push	{r4, lr}
    5c7a:	f04f 0320 	mov.w	r3, #32
    5c7e:	f3ef 8411 	mrs	r4, BASEPRI
    5c82:	f383 8811 	msr	BASEPRI, r3
    5c86:	f3bf 8f6f 	isb	sy
		ready_thread(thread);
    5c8a:	f7fe fa6f 	bl	416c <ready_thread>
	__asm__ volatile(
    5c8e:	f384 8811 	msr	BASEPRI, r4
    5c92:	f3bf 8f6f 	isb	sy
}
    5c96:	bd10      	pop	{r4, pc}

00005c98 <z_thread_timeout>:
{
    5c98:	b570      	push	{r4, r5, r6, lr}
    5c9a:	4604      	mov	r4, r0
	__asm__ volatile(
    5c9c:	f04f 0320 	mov.w	r3, #32
    5ca0:	f3ef 8611 	mrs	r6, BASEPRI
    5ca4:	f383 8811 	msr	BASEPRI, r3
    5ca8:	f3bf 8f6f 	isb	sy
		if (thread->base.pended_on != NULL) {
    5cac:	f850 3c10 	ldr.w	r3, [r0, #-16]
		struct k_thread *thread = CONTAINER_OF(timeout,
    5cb0:	f1a0 0518 	sub.w	r5, r0, #24
		if (thread->base.pended_on != NULL) {
    5cb4:	b113      	cbz	r3, 5cbc <z_thread_timeout+0x24>
			unpend_thread_no_timeout(thread);
    5cb6:	4628      	mov	r0, r5
    5cb8:	f7ff ffc8 	bl	5c4c <unpend_thread_no_timeout>
	thread->base.thread_state &= ~_THREAD_SUSPENDED;
    5cbc:	f814 3c0b 	ldrb.w	r3, [r4, #-11]
    5cc0:	f023 0314 	bic.w	r3, r3, #20
    5cc4:	f804 3c0b 	strb.w	r3, [r4, #-11]
		ready_thread(thread);
    5cc8:	4628      	mov	r0, r5
    5cca:	f7fe fa4f 	bl	416c <ready_thread>
	__asm__ volatile(
    5cce:	f386 8811 	msr	BASEPRI, r6
    5cd2:	f3bf 8f6f 	isb	sy
}
    5cd6:	bd70      	pop	{r4, r5, r6, pc}

00005cd8 <add_to_waitq_locked>:
{
    5cd8:	b538      	push	{r3, r4, r5, lr}
    5cda:	4604      	mov	r4, r0
    5cdc:	460d      	mov	r5, r1
	unready_thread(thread);
    5cde:	f7fe fbcd 	bl	447c <unready_thread>
	thread->base.thread_state |= _THREAD_PENDING;
    5ce2:	7b63      	ldrb	r3, [r4, #13]
    5ce4:	f043 0302 	orr.w	r3, r3, #2
    5ce8:	7363      	strb	r3, [r4, #13]
	if (wait_q != NULL) {
    5cea:	b1c5      	cbz	r5, 5d1e <add_to_waitq_locked+0x46>
	return list->head == list;
    5cec:	682b      	ldr	r3, [r5, #0]
		thread->base.pended_on = wait_q;
    5cee:	60a5      	str	r5, [r4, #8]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    5cf0:	429d      	cmp	r5, r3
    5cf2:	bf08      	it	eq
    5cf4:	2300      	moveq	r3, #0
    5cf6:	2b00      	cmp	r3, #0
    5cf8:	bf38      	it	cc
    5cfa:	2300      	movcc	r3, #0
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    5cfc:	b183      	cbz	r3, 5d20 <add_to_waitq_locked+0x48>
	if (thread_1->base.prio < thread_2->base.prio) {
    5cfe:	f994 100e 	ldrsb.w	r1, [r4, #14]
    5d02:	f993 200e 	ldrsb.w	r2, [r3, #14]
    5d06:	4291      	cmp	r1, r2
    5d08:	db04      	blt.n	5d14 <add_to_waitq_locked+0x3c>
	return (node == list->tail) ? NULL : node->next;
    5d0a:	686a      	ldr	r2, [r5, #4]
    5d0c:	429a      	cmp	r2, r3
    5d0e:	d007      	beq.n	5d20 <add_to_waitq_locked+0x48>
    5d10:	681b      	ldr	r3, [r3, #0]
    5d12:	e7f3      	b.n	5cfc <add_to_waitq_locked+0x24>
	node->prev = successor->prev;
    5d14:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
    5d16:	e9c4 3200 	strd	r3, r2, [r4]
	successor->prev->next = node;
    5d1a:	6014      	str	r4, [r2, #0]
	successor->prev = node;
    5d1c:	605c      	str	r4, [r3, #4]
}
    5d1e:	bd38      	pop	{r3, r4, r5, pc}
	node->prev = list->tail;
    5d20:	686b      	ldr	r3, [r5, #4]
    5d22:	6063      	str	r3, [r4, #4]
	list->tail->next = node;
    5d24:	686b      	ldr	r3, [r5, #4]
	node->next = list;
    5d26:	6025      	str	r5, [r4, #0]
	list->tail->next = node;
    5d28:	601c      	str	r4, [r3, #0]
	list->tail = node;
    5d2a:	606c      	str	r4, [r5, #4]
    5d2c:	e7f7      	b.n	5d1e <add_to_waitq_locked+0x46>

00005d2e <z_unpend_first_thread>:
{
    5d2e:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
    5d30:	f04f 0320 	mov.w	r3, #32
    5d34:	f3ef 8211 	mrs	r2, BASEPRI
    5d38:	f383 8811 	msr	BASEPRI, r3
    5d3c:	f3bf 8f6f 	isb	sy
		ret = _priq_wait_best(&wait_q->waitq);
    5d40:	f7ff ff90 	bl	5c64 <z_priq_dumb_best>
    5d44:	4604      	mov	r4, r0
	__asm__ volatile(
    5d46:	f382 8811 	msr	BASEPRI, r2
    5d4a:	f3bf 8f6f 	isb	sy

static inline struct k_thread *z_unpend1_no_timeout(_wait_q_t *wait_q)
{
	struct k_thread *thread = z_find_first_thread_to_unpend(wait_q, NULL);

	if (thread != NULL) {
    5d4e:	b188      	cbz	r0, 5d74 <z_unpend_first_thread+0x46>
	__asm__ volatile(
    5d50:	f04f 0320 	mov.w	r3, #32
    5d54:	f3ef 8511 	mrs	r5, BASEPRI
    5d58:	f383 8811 	msr	BASEPRI, r3
    5d5c:	f3bf 8f6f 	isb	sy
		unpend_thread_no_timeout(thread);
    5d60:	f7ff ff74 	bl	5c4c <unpend_thread_no_timeout>
	__asm__ volatile(
    5d64:	f385 8811 	msr	BASEPRI, r5
    5d68:	f3bf 8f6f 	isb	sy
	return z_abort_timeout(&thread->base.timeout);
    5d6c:	f104 0018 	add.w	r0, r4, #24
    5d70:	f000 f811 	bl	5d96 <z_abort_timeout>
}
    5d74:	4620      	mov	r0, r4
    5d76:	bd38      	pop	{r3, r4, r5, pc}

00005d78 <k_is_in_isr>:
    5d78:	f3ef 8005 	mrs	r0, IPSR
}
    5d7c:	3800      	subs	r0, #0
    5d7e:	bf18      	it	ne
    5d80:	2001      	movne	r0, #1
    5d82:	4770      	bx	lr

00005d84 <z_impl_k_busy_wait>:
	if (usec_to_wait == 0) {
    5d84:	b108      	cbz	r0, 5d8a <z_impl_k_busy_wait+0x6>
	arch_busy_wait(usec_to_wait);
    5d86:	f7fc be55 	b.w	2a34 <arch_busy_wait>
}
    5d8a:	4770      	bx	lr

00005d8c <z_impl_k_thread_name_set>:
}
    5d8c:	f06f 0046 	mvn.w	r0, #70	; 0x46
    5d90:	4770      	bx	lr

00005d92 <k_thread_name_get>:
}
    5d92:	2000      	movs	r0, #0
    5d94:	4770      	bx	lr

00005d96 <z_abort_timeout>:
{
    5d96:	b510      	push	{r4, lr}
	__asm__ volatile(
    5d98:	f04f 0220 	mov.w	r2, #32
    5d9c:	f3ef 8411 	mrs	r4, BASEPRI
    5da0:	f382 8811 	msr	BASEPRI, r2
    5da4:	f3bf 8f6f 	isb	sy
		if (sys_dnode_is_linked(&to->node)) {
    5da8:	6803      	ldr	r3, [r0, #0]
    5daa:	b13b      	cbz	r3, 5dbc <z_abort_timeout+0x26>
			remove_timeout(to);
    5dac:	f7fe fdd0 	bl	4950 <remove_timeout>
			ret = 0;
    5db0:	2000      	movs	r0, #0
	__asm__ volatile(
    5db2:	f384 8811 	msr	BASEPRI, r4
    5db6:	f3bf 8f6f 	isb	sy
}
    5dba:	bd10      	pop	{r4, pc}
	int ret = -EINVAL;
    5dbc:	f06f 0015 	mvn.w	r0, #21
    5dc0:	e7f7      	b.n	5db2 <z_abort_timeout+0x1c>

00005dc2 <z_get_next_timeout_expiry>:
{
    5dc2:	b510      	push	{r4, lr}
	__asm__ volatile(
    5dc4:	f04f 0320 	mov.w	r3, #32
    5dc8:	f3ef 8411 	mrs	r4, BASEPRI
    5dcc:	f383 8811 	msr	BASEPRI, r3
    5dd0:	f3bf 8f6f 	isb	sy
		ret = next_timeout();
    5dd4:	f7fe fdd6 	bl	4984 <next_timeout>
	__asm__ volatile(
    5dd8:	f384 8811 	msr	BASEPRI, r4
    5ddc:	f3bf 8f6f 	isb	sy
}
    5de0:	bd10      	pop	{r4, pc}

00005de2 <z_set_timeout_expiry>:
{
    5de2:	b570      	push	{r4, r5, r6, lr}
    5de4:	4604      	mov	r4, r0
    5de6:	460d      	mov	r5, r1
	__asm__ volatile(
    5de8:	f04f 0320 	mov.w	r3, #32
    5dec:	f3ef 8611 	mrs	r6, BASEPRI
    5df0:	f383 8811 	msr	BASEPRI, r3
    5df4:	f3bf 8f6f 	isb	sy
		int next_to = next_timeout();
    5df8:	f7fe fdc4 	bl	4984 <next_timeout>
		if (!imminent && (sooner || IS_ENABLED(CONFIG_SMP))) {
    5dfc:	2801      	cmp	r0, #1
    5dfe:	dd05      	ble.n	5e0c <z_set_timeout_expiry+0x2a>
    5e00:	42a0      	cmp	r0, r4
    5e02:	dd03      	ble.n	5e0c <z_set_timeout_expiry+0x2a>
			z_clock_set_timeout(ticks, is_idle);
    5e04:	4629      	mov	r1, r5
    5e06:	4620      	mov	r0, r4
    5e08:	f7fb ffdc 	bl	1dc4 <z_clock_set_timeout>
	__asm__ volatile(
    5e0c:	f386 8811 	msr	BASEPRI, r6
    5e10:	f3bf 8f6f 	isb	sy
}
    5e14:	bd70      	pop	{r4, r5, r6, pc}

00005e16 <z_tick_get_32>:

uint32_t z_tick_get_32(void)
{
    5e16:	b508      	push	{r3, lr}
#ifdef CONFIG_TICKLESS_KERNEL
	return (uint32_t)z_tick_get();
    5e18:	f7fe fed4 	bl	4bc4 <z_tick_get>
#else
	return (uint32_t)curr_tick;
#endif
}
    5e1c:	bd08      	pop	{r3, pc}

00005e1e <k_timer_init>:
	timer->status = 0U;
    5e1e:	2300      	movs	r3, #0
	timer->stop_fn = stop_fn;
    5e20:	e9c0 1208 	strd	r1, r2, [r0, #32]
	sys_dlist_init(&w->waitq);
    5e24:	f100 0218 	add.w	r2, r0, #24
	list->tail = (sys_dnode_t *)list;
    5e28:	e9c0 2206 	strd	r2, r2, [r0, #24]
	node->prev = NULL;
    5e2c:	e9c0 3300 	strd	r3, r3, [r0]
	timer->status = 0U;
    5e30:	6303      	str	r3, [r0, #48]	; 0x30
	timer->user_data = NULL;
    5e32:	6343      	str	r3, [r0, #52]	; 0x34
}
    5e34:	4770      	bx	lr

00005e36 <z_impl_k_timer_stop>:
}
#include <syscalls/k_timer_start_mrsh.c>
#endif

void z_impl_k_timer_stop(struct k_timer *timer)
{
    5e36:	b510      	push	{r4, lr}
    5e38:	4604      	mov	r4, r0
	int inactive = z_abort_timeout(&timer->timeout) != 0;
    5e3a:	f7ff ffac 	bl	5d96 <z_abort_timeout>

	if (inactive) {
    5e3e:	b9d8      	cbnz	r0, 5e78 <z_impl_k_timer_stop+0x42>
		return;
	}

	if (timer->stop_fn != NULL) {
    5e40:	6a63      	ldr	r3, [r4, #36]	; 0x24
    5e42:	b10b      	cbz	r3, 5e48 <z_impl_k_timer_stop+0x12>
		timer->stop_fn(timer);
    5e44:	4620      	mov	r0, r4
    5e46:	4798      	blx	r3
	struct k_thread *thread = z_find_first_thread_to_unpend(wait_q, NULL);
    5e48:	f104 0018 	add.w	r0, r4, #24
    5e4c:	2100      	movs	r1, #0
    5e4e:	f7ff fec7 	bl	5be0 <z_find_first_thread_to_unpend>
	if (thread != NULL) {
    5e52:	4604      	mov	r4, r0
    5e54:	b180      	cbz	r0, 5e78 <z_impl_k_timer_stop+0x42>
		z_unpend_thread_no_timeout(thread);
    5e56:	f7ff fed3 	bl	5c00 <z_unpend_thread_no_timeout>
	}

	struct k_thread *pending_thread = z_unpend1_no_timeout(&timer->wait_q);

	if (pending_thread != NULL) {
		z_ready_thread(pending_thread);
    5e5a:	4620      	mov	r0, r4
    5e5c:	f7ff ff0c 	bl	5c78 <z_ready_thread>
	__asm__ volatile(
    5e60:	f04f 0320 	mov.w	r3, #32
    5e64:	f3ef 8011 	mrs	r0, BASEPRI
    5e68:	f383 8811 	msr	BASEPRI, r3
    5e6c:	f3bf 8f6f 	isb	sy
		z_reschedule_unlocked();
	}
}
    5e70:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	(void) z_reschedule_irqlock(arch_irq_lock());
    5e74:	f7ff bed4 	b.w	5c20 <z_reschedule_irqlock>
    5e78:	bd10      	pop	{r4, pc}

00005e7a <k_heap_init>:
{
    5e7a:	b410      	push	{r4}
    5e7c:	f100 040c 	add.w	r4, r0, #12
	list->tail = (sys_dnode_t *)list;
    5e80:	e9c0 4403 	strd	r4, r4, [r0, #12]
}
    5e84:	bc10      	pop	{r4}
	sys_heap_init(&h->heap, mem, bytes);
    5e86:	f7ff b8d7 	b.w	5038 <sys_heap_init>

00005e8a <_OffsetAbsSyms>:
#include "offsets_aarch64.c"
#else
#include "offsets_aarch32.c"
#endif

GEN_ABS_SYM_END
    5e8a:	4770      	bx	lr
